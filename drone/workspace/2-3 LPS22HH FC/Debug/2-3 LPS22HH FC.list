
2-3 LPS22HH FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef8  08005ef8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f00  08005f00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000074  08005f7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005f7c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfbf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002913  00000000  00000000  0002e063  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b8a  00000000  00000000  000323d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd56  00000000  00000000  00055f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8972  00000000  00000000  00061cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a62a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  0012a6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c78 	.word	0x08005c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c78 	.word	0x08005c78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2f>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005f0:	bf24      	itt	cs
 80005f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005fa:	d90d      	bls.n	8000618 <__aeabi_d2f+0x30>
 80005fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000608:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800060c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000610:	bf08      	it	eq
 8000612:	f020 0001 	biceq.w	r0, r0, #1
 8000616:	4770      	bx	lr
 8000618:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800061c:	d121      	bne.n	8000662 <__aeabi_d2f+0x7a>
 800061e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000622:	bfbc      	itt	lt
 8000624:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000628:	4770      	bxlt	lr
 800062a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000632:	f1c2 0218 	rsb	r2, r2, #24
 8000636:	f1c2 0c20 	rsb	ip, r2, #32
 800063a:	fa10 f30c 	lsls.w	r3, r0, ip
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	bf18      	it	ne
 8000644:	f040 0001 	orrne.w	r0, r0, #1
 8000648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800064c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000654:	ea40 000c 	orr.w	r0, r0, ip
 8000658:	fa23 f302 	lsr.w	r3, r3, r2
 800065c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000660:	e7cc      	b.n	80005fc <__aeabi_d2f+0x14>
 8000662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000666:	d107      	bne.n	8000678 <__aeabi_d2f+0x90>
 8000668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800066c:	bf1e      	ittt	ne
 800066e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000672:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000676:	4770      	bxne	lr
 8000678:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800067c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000680:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b972 	b.w	8000984 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f806 	bl	80006b8 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__udivmoddi4>:
 80006b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006bc:	9e08      	ldr	r6, [sp, #32]
 80006be:	4604      	mov	r4, r0
 80006c0:	4688      	mov	r8, r1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d14b      	bne.n	800075e <__udivmoddi4+0xa6>
 80006c6:	428a      	cmp	r2, r1
 80006c8:	4615      	mov	r5, r2
 80006ca:	d967      	bls.n	800079c <__udivmoddi4+0xe4>
 80006cc:	fab2 f282 	clz	r2, r2
 80006d0:	b14a      	cbz	r2, 80006e6 <__udivmoddi4+0x2e>
 80006d2:	f1c2 0720 	rsb	r7, r2, #32
 80006d6:	fa01 f302 	lsl.w	r3, r1, r2
 80006da:	fa20 f707 	lsr.w	r7, r0, r7
 80006de:	4095      	lsls	r5, r2
 80006e0:	ea47 0803 	orr.w	r8, r7, r3
 80006e4:	4094      	lsls	r4, r2
 80006e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ea:	0c23      	lsrs	r3, r4, #16
 80006ec:	fbb8 f7fe 	udiv	r7, r8, lr
 80006f0:	fa1f fc85 	uxth.w	ip, r5
 80006f4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006fc:	fb07 f10c 	mul.w	r1, r7, ip
 8000700:	4299      	cmp	r1, r3
 8000702:	d909      	bls.n	8000718 <__udivmoddi4+0x60>
 8000704:	18eb      	adds	r3, r5, r3
 8000706:	f107 30ff 	add.w	r0, r7, #4294967295
 800070a:	f080 811b 	bcs.w	8000944 <__udivmoddi4+0x28c>
 800070e:	4299      	cmp	r1, r3
 8000710:	f240 8118 	bls.w	8000944 <__udivmoddi4+0x28c>
 8000714:	3f02      	subs	r7, #2
 8000716:	442b      	add	r3, r5
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	b2a4      	uxth	r4, r4
 800071c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000720:	fb0e 3310 	mls	r3, lr, r0, r3
 8000724:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000728:	fb00 fc0c 	mul.w	ip, r0, ip
 800072c:	45a4      	cmp	ip, r4
 800072e:	d909      	bls.n	8000744 <__udivmoddi4+0x8c>
 8000730:	192c      	adds	r4, r5, r4
 8000732:	f100 33ff 	add.w	r3, r0, #4294967295
 8000736:	f080 8107 	bcs.w	8000948 <__udivmoddi4+0x290>
 800073a:	45a4      	cmp	ip, r4
 800073c:	f240 8104 	bls.w	8000948 <__udivmoddi4+0x290>
 8000740:	3802      	subs	r0, #2
 8000742:	442c      	add	r4, r5
 8000744:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000748:	eba4 040c 	sub.w	r4, r4, ip
 800074c:	2700      	movs	r7, #0
 800074e:	b11e      	cbz	r6, 8000758 <__udivmoddi4+0xa0>
 8000750:	40d4      	lsrs	r4, r2
 8000752:	2300      	movs	r3, #0
 8000754:	e9c6 4300 	strd	r4, r3, [r6]
 8000758:	4639      	mov	r1, r7
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	428b      	cmp	r3, r1
 8000760:	d909      	bls.n	8000776 <__udivmoddi4+0xbe>
 8000762:	2e00      	cmp	r6, #0
 8000764:	f000 80eb 	beq.w	800093e <__udivmoddi4+0x286>
 8000768:	2700      	movs	r7, #0
 800076a:	e9c6 0100 	strd	r0, r1, [r6]
 800076e:	4638      	mov	r0, r7
 8000770:	4639      	mov	r1, r7
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	fab3 f783 	clz	r7, r3
 800077a:	2f00      	cmp	r7, #0
 800077c:	d147      	bne.n	800080e <__udivmoddi4+0x156>
 800077e:	428b      	cmp	r3, r1
 8000780:	d302      	bcc.n	8000788 <__udivmoddi4+0xd0>
 8000782:	4282      	cmp	r2, r0
 8000784:	f200 80fa 	bhi.w	800097c <__udivmoddi4+0x2c4>
 8000788:	1a84      	subs	r4, r0, r2
 800078a:	eb61 0303 	sbc.w	r3, r1, r3
 800078e:	2001      	movs	r0, #1
 8000790:	4698      	mov	r8, r3
 8000792:	2e00      	cmp	r6, #0
 8000794:	d0e0      	beq.n	8000758 <__udivmoddi4+0xa0>
 8000796:	e9c6 4800 	strd	r4, r8, [r6]
 800079a:	e7dd      	b.n	8000758 <__udivmoddi4+0xa0>
 800079c:	b902      	cbnz	r2, 80007a0 <__udivmoddi4+0xe8>
 800079e:	deff      	udf	#255	; 0xff
 80007a0:	fab2 f282 	clz	r2, r2
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	f040 808f 	bne.w	80008c8 <__udivmoddi4+0x210>
 80007aa:	1b49      	subs	r1, r1, r5
 80007ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007b0:	fa1f f885 	uxth.w	r8, r5
 80007b4:	2701      	movs	r7, #1
 80007b6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ba:	0c23      	lsrs	r3, r4, #16
 80007bc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007c4:	fb08 f10c 	mul.w	r1, r8, ip
 80007c8:	4299      	cmp	r1, r3
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0x124>
 80007cc:	18eb      	adds	r3, r5, r3
 80007ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0x122>
 80007d4:	4299      	cmp	r1, r3
 80007d6:	f200 80cd 	bhi.w	8000974 <__udivmoddi4+0x2bc>
 80007da:	4684      	mov	ip, r0
 80007dc:	1a59      	subs	r1, r3, r1
 80007de:	b2a3      	uxth	r3, r4
 80007e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007e4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ec:	fb08 f800 	mul.w	r8, r8, r0
 80007f0:	45a0      	cmp	r8, r4
 80007f2:	d907      	bls.n	8000804 <__udivmoddi4+0x14c>
 80007f4:	192c      	adds	r4, r5, r4
 80007f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x14a>
 80007fc:	45a0      	cmp	r8, r4
 80007fe:	f200 80b6 	bhi.w	800096e <__udivmoddi4+0x2b6>
 8000802:	4618      	mov	r0, r3
 8000804:	eba4 0408 	sub.w	r4, r4, r8
 8000808:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800080c:	e79f      	b.n	800074e <__udivmoddi4+0x96>
 800080e:	f1c7 0c20 	rsb	ip, r7, #32
 8000812:	40bb      	lsls	r3, r7
 8000814:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000818:	ea4e 0e03 	orr.w	lr, lr, r3
 800081c:	fa01 f407 	lsl.w	r4, r1, r7
 8000820:	fa20 f50c 	lsr.w	r5, r0, ip
 8000824:	fa21 f30c 	lsr.w	r3, r1, ip
 8000828:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800082c:	4325      	orrs	r5, r4
 800082e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000832:	0c2c      	lsrs	r4, r5, #16
 8000834:	fb08 3319 	mls	r3, r8, r9, r3
 8000838:	fa1f fa8e 	uxth.w	sl, lr
 800083c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000840:	fb09 f40a 	mul.w	r4, r9, sl
 8000844:	429c      	cmp	r4, r3
 8000846:	fa02 f207 	lsl.w	r2, r2, r7
 800084a:	fa00 f107 	lsl.w	r1, r0, r7
 800084e:	d90b      	bls.n	8000868 <__udivmoddi4+0x1b0>
 8000850:	eb1e 0303 	adds.w	r3, lr, r3
 8000854:	f109 30ff 	add.w	r0, r9, #4294967295
 8000858:	f080 8087 	bcs.w	800096a <__udivmoddi4+0x2b2>
 800085c:	429c      	cmp	r4, r3
 800085e:	f240 8084 	bls.w	800096a <__udivmoddi4+0x2b2>
 8000862:	f1a9 0902 	sub.w	r9, r9, #2
 8000866:	4473      	add	r3, lr
 8000868:	1b1b      	subs	r3, r3, r4
 800086a:	b2ad      	uxth	r5, r5
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000878:	fb00 fa0a 	mul.w	sl, r0, sl
 800087c:	45a2      	cmp	sl, r4
 800087e:	d908      	bls.n	8000892 <__udivmoddi4+0x1da>
 8000880:	eb1e 0404 	adds.w	r4, lr, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	d26b      	bcs.n	8000962 <__udivmoddi4+0x2aa>
 800088a:	45a2      	cmp	sl, r4
 800088c:	d969      	bls.n	8000962 <__udivmoddi4+0x2aa>
 800088e:	3802      	subs	r0, #2
 8000890:	4474      	add	r4, lr
 8000892:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000896:	fba0 8902 	umull	r8, r9, r0, r2
 800089a:	eba4 040a 	sub.w	r4, r4, sl
 800089e:	454c      	cmp	r4, r9
 80008a0:	46c2      	mov	sl, r8
 80008a2:	464b      	mov	r3, r9
 80008a4:	d354      	bcc.n	8000950 <__udivmoddi4+0x298>
 80008a6:	d051      	beq.n	800094c <__udivmoddi4+0x294>
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d069      	beq.n	8000980 <__udivmoddi4+0x2c8>
 80008ac:	ebb1 050a 	subs.w	r5, r1, sl
 80008b0:	eb64 0403 	sbc.w	r4, r4, r3
 80008b4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008b8:	40fd      	lsrs	r5, r7
 80008ba:	40fc      	lsrs	r4, r7
 80008bc:	ea4c 0505 	orr.w	r5, ip, r5
 80008c0:	e9c6 5400 	strd	r5, r4, [r6]
 80008c4:	2700      	movs	r7, #0
 80008c6:	e747      	b.n	8000758 <__udivmoddi4+0xa0>
 80008c8:	f1c2 0320 	rsb	r3, r2, #32
 80008cc:	fa20 f703 	lsr.w	r7, r0, r3
 80008d0:	4095      	lsls	r5, r2
 80008d2:	fa01 f002 	lsl.w	r0, r1, r2
 80008d6:	fa21 f303 	lsr.w	r3, r1, r3
 80008da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008de:	4338      	orrs	r0, r7
 80008e0:	0c01      	lsrs	r1, r0, #16
 80008e2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008e6:	fa1f f885 	uxth.w	r8, r5
 80008ea:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f2:	fb07 f308 	mul.w	r3, r7, r8
 80008f6:	428b      	cmp	r3, r1
 80008f8:	fa04 f402 	lsl.w	r4, r4, r2
 80008fc:	d907      	bls.n	800090e <__udivmoddi4+0x256>
 80008fe:	1869      	adds	r1, r5, r1
 8000900:	f107 3cff 	add.w	ip, r7, #4294967295
 8000904:	d22f      	bcs.n	8000966 <__udivmoddi4+0x2ae>
 8000906:	428b      	cmp	r3, r1
 8000908:	d92d      	bls.n	8000966 <__udivmoddi4+0x2ae>
 800090a:	3f02      	subs	r7, #2
 800090c:	4429      	add	r1, r5
 800090e:	1acb      	subs	r3, r1, r3
 8000910:	b281      	uxth	r1, r0
 8000912:	fbb3 f0fe 	udiv	r0, r3, lr
 8000916:	fb0e 3310 	mls	r3, lr, r0, r3
 800091a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800091e:	fb00 f308 	mul.w	r3, r0, r8
 8000922:	428b      	cmp	r3, r1
 8000924:	d907      	bls.n	8000936 <__udivmoddi4+0x27e>
 8000926:	1869      	adds	r1, r5, r1
 8000928:	f100 3cff 	add.w	ip, r0, #4294967295
 800092c:	d217      	bcs.n	800095e <__udivmoddi4+0x2a6>
 800092e:	428b      	cmp	r3, r1
 8000930:	d915      	bls.n	800095e <__udivmoddi4+0x2a6>
 8000932:	3802      	subs	r0, #2
 8000934:	4429      	add	r1, r5
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800093c:	e73b      	b.n	80007b6 <__udivmoddi4+0xfe>
 800093e:	4637      	mov	r7, r6
 8000940:	4630      	mov	r0, r6
 8000942:	e709      	b.n	8000758 <__udivmoddi4+0xa0>
 8000944:	4607      	mov	r7, r0
 8000946:	e6e7      	b.n	8000718 <__udivmoddi4+0x60>
 8000948:	4618      	mov	r0, r3
 800094a:	e6fb      	b.n	8000744 <__udivmoddi4+0x8c>
 800094c:	4541      	cmp	r1, r8
 800094e:	d2ab      	bcs.n	80008a8 <__udivmoddi4+0x1f0>
 8000950:	ebb8 0a02 	subs.w	sl, r8, r2
 8000954:	eb69 020e 	sbc.w	r2, r9, lr
 8000958:	3801      	subs	r0, #1
 800095a:	4613      	mov	r3, r2
 800095c:	e7a4      	b.n	80008a8 <__udivmoddi4+0x1f0>
 800095e:	4660      	mov	r0, ip
 8000960:	e7e9      	b.n	8000936 <__udivmoddi4+0x27e>
 8000962:	4618      	mov	r0, r3
 8000964:	e795      	b.n	8000892 <__udivmoddi4+0x1da>
 8000966:	4667      	mov	r7, ip
 8000968:	e7d1      	b.n	800090e <__udivmoddi4+0x256>
 800096a:	4681      	mov	r9, r0
 800096c:	e77c      	b.n	8000868 <__udivmoddi4+0x1b0>
 800096e:	3802      	subs	r0, #2
 8000970:	442c      	add	r4, r5
 8000972:	e747      	b.n	8000804 <__udivmoddi4+0x14c>
 8000974:	f1ac 0c02 	sub.w	ip, ip, #2
 8000978:	442b      	add	r3, r5
 800097a:	e72f      	b.n	80007dc <__udivmoddi4+0x124>
 800097c:	4638      	mov	r0, r7
 800097e:	e708      	b.n	8000792 <__udivmoddi4+0xda>
 8000980:	4637      	mov	r7, r6
 8000982:	e6e9      	b.n	8000758 <__udivmoddi4+0xa0>

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f92f 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f003 f898 	bl	8003af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f939 	bl	8000c62 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f90f 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004
 8000a28:	20000000 	.word	0x20000000

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	200000a4 	.word	0x200000a4

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	200000a4 	.word	0x200000a4

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_Delay+0x40>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000004 	.word	0x20000004

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff47 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff5c 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffb0 	bl	8000bd0 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e22d      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d075      	beq.n	8000d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c9a:	4ba3      	ldr	r3, [pc, #652]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d00c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca6:	4ba0      	ldr	r3, [pc, #640]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d112      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb2:	4b9d      	ldr	r3, [pc, #628]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	4b99      	ldr	r3, [pc, #612]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d05b      	beq.n	8000d84 <HAL_RCC_OscConfig+0x108>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d157      	bne.n	8000d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e208      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d106      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x74>
 8000ce2:	4b91      	ldr	r3, [pc, #580]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a90      	ldr	r2, [pc, #576]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e01d      	b.n	8000d2c <HAL_RCC_OscConfig+0xb0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x98>
 8000cfa:	4b8b      	ldr	r3, [pc, #556]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a8a      	ldr	r2, [pc, #552]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b88      	ldr	r3, [pc, #544]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a87      	ldr	r2, [pc, #540]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e00b      	b.n	8000d2c <HAL_RCC_OscConfig+0xb0>
 8000d14:	4b84      	ldr	r3, [pc, #528]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a83      	ldr	r2, [pc, #524]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b81      	ldr	r3, [pc, #516]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a80      	ldr	r2, [pc, #512]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d013      	beq.n	8000d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fe8e 	bl	8000a54 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fe8a 	bl	8000a54 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e1cd      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	4b76      	ldr	r3, [pc, #472]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f0      	beq.n	8000d3c <HAL_RCC_OscConfig+0xc0>
 8000d5a:	e014      	b.n	8000d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fe7a 	bl	8000a54 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fe76 	bl	8000a54 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e1b9      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_RCC_OscConfig+0xe8>
 8000d82:	e000      	b.n	8000d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d063      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d92:	4b65      	ldr	r3, [pc, #404]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00b      	beq.n	8000db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d9e:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d11c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d116      	bne.n	8000de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_RCC_OscConfig+0x152>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d001      	beq.n	8000dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e18d      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dce:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	4952      	ldr	r1, [pc, #328]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de2:	e03a      	b.n	8000e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d020      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <HAL_RCC_OscConfig+0x2b0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df2:	f7ff fe2f 	bl	8000a54 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fe2b 	bl	8000a54 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e16e      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f0      	beq.n	8000dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4940      	ldr	r1, [pc, #256]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
 8000e2c:	e015      	b.n	8000e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <HAL_RCC_OscConfig+0x2b0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e34:	f7ff fe0e 	bl	8000a54 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fe0a 	bl	8000a54 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e14d      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d030      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d016      	beq.n	8000e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_RCC_OscConfig+0x2b4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e74:	f7ff fdee 	bl	8000a54 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fdea 	bl	8000a54 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e12d      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0x200>
 8000e9a:	e015      	b.n	8000ec8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_RCC_OscConfig+0x2b4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fdd7 	bl	8000a54 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fdd3 	bl	8000a54 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e116      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f0      	bne.n	8000eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a0 	beq.w	8001016 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_RCC_OscConfig+0x2b8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d121      	bne.n	8000f56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_RCC_OscConfig+0x2b8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_RCC_OscConfig+0x2b8>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fd99 	bl	8000a54 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	e011      	b.n	8000f4a <HAL_RCC_OscConfig+0x2ce>
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	42470000 	.word	0x42470000
 8000f30:	42470e80 	.word	0x42470e80
 8000f34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f38:	f7ff fd8c 	bl	8000a54 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e0cf      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x478>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d106      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
 8000f5e:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	4a65      	ldr	r2, [pc, #404]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6a:	e01c      	b.n	8000fa6 <HAL_RCC_OscConfig+0x32a>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x312>
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	4a5f      	ldr	r2, [pc, #380]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f80:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f84:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x32a>
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f92:	4a59      	ldr	r2, [pc, #356]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9a:	4b57      	ldr	r3, [pc, #348]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9e:	4a56      	ldr	r2, [pc, #344]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fae:	f7ff fd51 	bl	8000a54 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fd4d 	bl	8000a54 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e08e      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ee      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x33a>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fd3b 	bl	8000a54 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fd37 	bl	8000a54 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e078      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8000ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ee      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a3a      	ldr	r2, [pc, #232]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d064      	beq.n	80010e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b08      	cmp	r3, #8
 8001028:	d05c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d141      	bne.n	80010b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <HAL_RCC_OscConfig+0x480>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fd0c 	bl	8000a54 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff fd08 	bl	8000a54 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e04b      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69da      	ldr	r2, [r3, #28]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	3b01      	subs	r3, #1
 8001078:	041b      	lsls	r3, r3, #16
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	491d      	ldr	r1, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_RCC_OscConfig+0x480>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fce1 	bl	8000a54 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001096:	f7ff fcdd 	bl	8000a54 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e020      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x41a>
 80010b4:	e018      	b.n	80010e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_RCC_OscConfig+0x480>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fcca 	bl	8000a54 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff fcc6 	bl	8000a54 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e009      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_RCC_OscConfig+0x47c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x448>
 80010e2:	e001      	b.n	80010e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40007000 	.word	0x40007000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	42470060 	.word	0x42470060

08001100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0ca      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001114:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d90c      	bls.n	800113c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b64      	ldr	r3, [pc, #400]	; (80012b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <HAL_RCC_ClockConfig+0x1b4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0b6      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a57      	ldr	r2, [pc, #348]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800115a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800115e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116c:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001178:	4b4f      	ldr	r3, [pc, #316]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	494c      	ldr	r1, [pc, #304]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d044      	beq.n	8001220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e07d      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d003      	beq.n	80011be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e06d      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e065      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 0203 	bic.w	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4933      	ldr	r1, [pc, #204]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fc30 	bl	8000a54 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	e00a      	b.n	800120e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f7ff fc2c 	bl	8000a54 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e04d      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 020c 	and.w	r2, r3, #12
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	429a      	cmp	r2, r3
 800121e:	d1eb      	bne.n	80011f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20c      	bcs.n	8001248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e030      	b.n	80012aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4915      	ldr	r1, [pc, #84]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	490d      	ldr	r1, [pc, #52]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001286:	f000 f81d 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 800128a:	4601      	mov	r1, r0
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	fa21 f303 	lsr.w	r3, r1, r3
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fb92 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023c00 	.word	0x40023c00
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08005e14 	.word	0x08005e14
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d007      	beq.n	80012f6 <HAL_RCC_GetSysClockFreq+0x32>
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d008      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x38>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 80b4 	bne.w	8001458 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f0:	4b5e      	ldr	r3, [pc, #376]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012f2:	60bb      	str	r3, [r7, #8]
       break;
 80012f4:	e0b3      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012f8:	60bb      	str	r3, [r7, #8]
      break;
 80012fa:	e0b0      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012fc:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001306:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d04a      	beq.n	80013a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001312:	4b55      	ldr	r3, [pc, #340]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	099b      	lsrs	r3, r3, #6
 8001318:	f04f 0400 	mov.w	r4, #0
 800131c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	ea03 0501 	and.w	r5, r3, r1
 8001328:	ea04 0602 	and.w	r6, r4, r2
 800132c:	4629      	mov	r1, r5
 800132e:	4632      	mov	r2, r6
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	0154      	lsls	r4, r2, #5
 800133a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800133e:	014b      	lsls	r3, r1, #5
 8001340:	4619      	mov	r1, r3
 8001342:	4622      	mov	r2, r4
 8001344:	1b49      	subs	r1, r1, r5
 8001346:	eb62 0206 	sbc.w	r2, r2, r6
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	f04f 0400 	mov.w	r4, #0
 8001352:	0194      	lsls	r4, r2, #6
 8001354:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001358:	018b      	lsls	r3, r1, #6
 800135a:	1a5b      	subs	r3, r3, r1
 800135c:	eb64 0402 	sbc.w	r4, r4, r2
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	00e2      	lsls	r2, r4, #3
 800136a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800136e:	00d9      	lsls	r1, r3, #3
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	195b      	adds	r3, r3, r5
 8001376:	eb44 0406 	adc.w	r4, r4, r6
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	0262      	lsls	r2, r4, #9
 8001384:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001388:	0259      	lsls	r1, r3, #9
 800138a:	460b      	mov	r3, r1
 800138c:	4614      	mov	r4, r2
 800138e:	4618      	mov	r0, r3
 8001390:	4621      	mov	r1, r4
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f04f 0400 	mov.w	r4, #0
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	f7ff f974 	bl	8000688 <__aeabi_uldivmod>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e049      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	099b      	lsrs	r3, r3, #6
 80013ae:	f04f 0400 	mov.w	r4, #0
 80013b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	ea03 0501 	and.w	r5, r3, r1
 80013be:	ea04 0602 	and.w	r6, r4, r2
 80013c2:	4629      	mov	r1, r5
 80013c4:	4632      	mov	r2, r6
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	0154      	lsls	r4, r2, #5
 80013d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013d4:	014b      	lsls	r3, r1, #5
 80013d6:	4619      	mov	r1, r3
 80013d8:	4622      	mov	r2, r4
 80013da:	1b49      	subs	r1, r1, r5
 80013dc:	eb62 0206 	sbc.w	r2, r2, r6
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	f04f 0400 	mov.w	r4, #0
 80013e8:	0194      	lsls	r4, r2, #6
 80013ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013ee:	018b      	lsls	r3, r1, #6
 80013f0:	1a5b      	subs	r3, r3, r1
 80013f2:	eb64 0402 	sbc.w	r4, r4, r2
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	00e2      	lsls	r2, r4, #3
 8001400:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001404:	00d9      	lsls	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	4614      	mov	r4, r2
 800140a:	195b      	adds	r3, r3, r5
 800140c:	eb44 0406 	adc.w	r4, r4, r6
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	02a2      	lsls	r2, r4, #10
 800141a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800141e:	0299      	lsls	r1, r3, #10
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0400 	mov.w	r4, #0
 800142e:	461a      	mov	r2, r3
 8001430:	4623      	mov	r3, r4
 8001432:	f7ff f929 	bl	8000688 <__aeabi_uldivmod>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	3301      	adds	r3, #1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	60bb      	str	r3, [r7, #8]
      break;
 8001456:	e002      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800145a:	60bb      	str	r3, [r7, #8]
      break;
 800145c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145e:	68bb      	ldr	r3, [r7, #8]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	00f42400 	.word	0x00f42400
 8001470:	007a1200 	.word	0x007a1200

08001474 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2103      	movs	r1, #3
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	61bb      	str	r3, [r7, #24]
  return result;
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	605a      	str	r2, [r3, #4]
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001502:	b480      	push	{r7}
 8001504:	b089      	sub	sp, #36	; 0x24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	613b      	str	r3, [r7, #16]
  return result;
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2103      	movs	r1, #3
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	401a      	ands	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	61bb      	str	r3, [r7, #24]
  return result;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	431a      	orrs	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001554:	bf00      	nop
 8001556:	3724      	adds	r7, #36	; 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	613b      	str	r3, [r7, #16]
  return result;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2103      	movs	r1, #3
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	61bb      	str	r3, [r7, #24]
  return result;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	60da      	str	r2, [r3, #12]
}
 80015b2:	bf00      	nop
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80015be:	b480      	push	{r7}
 80015c0:	b089      	sub	sp, #36	; 0x24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	613b      	str	r3, [r7, #16]
  return result;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	210f      	movs	r1, #15
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	401a      	ands	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	61bb      	str	r3, [r7, #24]
  return result;
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	431a      	orrs	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001610:	bf00      	nop
 8001612:	3724      	adds	r7, #36	; 0x24
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	613b      	str	r3, [r7, #16]
  return result;
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	210f      	movs	r1, #15
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	401a      	ands	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	61bb      	str	r3, [r7, #24]
  return result;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	431a      	orrs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001672:	bf00      	nop
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	613b      	str	r3, [r7, #16]
  return result;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016a8:	e049      	b.n	800173e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d03b      	beq.n	8001738 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	461a      	mov	r2, r3
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fed3 	bl	8001474 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d003      	beq.n	80016de <LL_GPIO_Init+0x60>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d106      	bne.n	80016ec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	461a      	mov	r2, r3
 80016e4:	69b9      	ldr	r1, [r7, #24]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff0b 	bl	8001502 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	461a      	mov	r2, r3
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff33 	bl	8001560 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d11a      	bne.n	8001738 <LL_GPIO_Init+0xba>
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	60bb      	str	r3, [r7, #8]
  return result;
 800170e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b07      	cmp	r3, #7
 8001718:	d807      	bhi.n	800172a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	461a      	mov	r2, r3
 8001720:	69b9      	ldr	r1, [r7, #24]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff4b 	bl	80015be <LL_GPIO_SetAFPin_0_7>
 8001728:	e006      	b.n	8001738 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	461a      	mov	r2, r3
 8001730:	69b9      	ldr	r1, [r7, #24]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff72 	bl	800161c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ae      	bne.n	80016aa <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <LL_GPIO_Init+0xde>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d107      	bne.n	800176c <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	461a      	mov	r2, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff feb3 	bl	80014d2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <LL_RCC_GetSysClkSource+0x18>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <LL_RCC_GetAHBPrescaler+0x18>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <LL_RCC_PLL_GetMainSource+0x18>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <LL_RCC_PLL_GetN+0x18>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40023800 	.word	0x40023800

08001820 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <LL_RCC_PLL_GetP+0x18>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <LL_RCC_PLL_GetDivider+0x18>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001860:	f000 f820 	bl	80018a4 <RCC_GetSystemClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f83e 	bl	80018f0 <RCC_GetHCLKClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f84c 	bl	800191c <RCC_GetPCLK1ClockFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f858 	bl	8001944 <RCC_GetPCLK2ClockFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60da      	str	r2, [r3, #12]
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80018ae:	f7ff ff63 	bl	8001778 <LL_RCC_GetSysClkSource>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d006      	beq.n	80018c6 <RCC_GetSystemClockFreq+0x22>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d007      	beq.n	80018cc <RCC_GetSystemClockFreq+0x28>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <RCC_GetSystemClockFreq+0x44>)
 80018c2:	607b      	str	r3, [r7, #4]
      break;
 80018c4:	e00a      	b.n	80018dc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <RCC_GetSystemClockFreq+0x48>)
 80018c8:	607b      	str	r3, [r7, #4]
      break;
 80018ca:	e007      	b.n	80018dc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80018cc:	2008      	movs	r0, #8
 80018ce:	f000 f84d 	bl	800196c <RCC_PLL_GetFreqDomain_SYS>
 80018d2:	6078      	str	r0, [r7, #4]
      break;
 80018d4:	e002      	b.n	80018dc <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <RCC_GetSystemClockFreq+0x44>)
 80018d8:	607b      	str	r3, [r7, #4]
      break;
 80018da:	bf00      	nop
  }

  return frequency;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80018f8:	f7ff ff4c 	bl	8001794 <LL_RCC_GetAHBPrescaler>
 80018fc:	4603      	mov	r3, r0
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <RCC_GetHCLKClockFreq+0x28>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	40d3      	lsrs	r3, r2
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	08005e14 	.word	0x08005e14

0800191c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001924:	f7ff ff44 	bl	80017b0 <LL_RCC_GetAPB1Prescaler>
 8001928:	4603      	mov	r3, r0
 800192a:	0a9b      	lsrs	r3, r3, #10
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <RCC_GetPCLK1ClockFreq+0x24>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	40d3      	lsrs	r3, r2
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	08005e24 	.word	0x08005e24

08001944 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800194c:	f7ff ff3e 	bl	80017cc <LL_RCC_GetAPB2Prescaler>
 8001950:	4603      	mov	r3, r0
 8001952:	0b5b      	lsrs	r3, r3, #13
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <RCC_GetPCLK2ClockFreq+0x24>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	40d3      	lsrs	r3, r2
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	08005e24 	.word	0x08005e24

0800196c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001980:	f7ff ff32 	bl	80017e8 <LL_RCC_PLL_GetMainSource>
 8001984:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800198c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001990:	d003      	beq.n	800199a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001992:	e005      	b.n	80019a0 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001996:	617b      	str	r3, [r7, #20]
      break;
 8001998:	e005      	b.n	80019a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800199c:	617b      	str	r3, [r7, #20]
      break;
 800199e:	e002      	b.n	80019a6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80019a2:	617b      	str	r3, [r7, #20]
      break;
 80019a4:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d113      	bne.n	80019d4 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80019ac:	f7ff ff46 	bl	800183c <LL_RCC_PLL_GetDivider>
 80019b0:	4602      	mov	r2, r0
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fbb3 f4f2 	udiv	r4, r3, r2
 80019b8:	f7ff ff24 	bl	8001804 <LL_RCC_PLL_GetN>
 80019bc:	4603      	mov	r3, r0
 80019be:	fb03 f404 	mul.w	r4, r3, r4
 80019c2:	f7ff ff2d 	bl	8001820 <LL_RCC_PLL_GetP>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80019d2:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80019d4:	693b      	ldr	r3, [r7, #16]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	bf00      	nop
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	007a1200 	.word	0x007a1200

080019e8 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d101      	bne.n	8001a00 <LL_SPI_IsEnabled+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_SPI_IsEnabled+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffd3 	bl	80019e8 <LL_SPI_IsEnabled>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d139      	bne.n	8001abc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a50:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	6852      	ldr	r2, [r2, #4]
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	6892      	ldr	r2, [r2, #8]
 8001a62:	4311      	orrs	r1, r2
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	68d2      	ldr	r2, [r2, #12]
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	6912      	ldr	r2, [r2, #16]
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6952      	ldr	r2, [r2, #20]
 8001a74:	4311      	orrs	r1, r2
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	6992      	ldr	r2, [r2, #24]
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	69d2      	ldr	r2, [r2, #28]
 8001a80:	4311      	orrs	r1, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6a12      	ldr	r2, [r2, #32]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0204 	bic.w	r2, r3, #4
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	0c1b      	lsrs	r3, r3, #16
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aaa:	d105      	bne.n	8001ab8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffab 	bl	8001a0e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	61da      	str	r2, [r3, #28]
  return status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	615a      	str	r2, [r3, #20]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <LL_TIM_Init+0x108>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <LL_TIM_Init+0x40>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd6:	d00f      	beq.n	8001bf8 <LL_TIM_Init+0x40>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <LL_TIM_Init+0x10c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00b      	beq.n	8001bf8 <LL_TIM_Init+0x40>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <LL_TIM_Init+0x110>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <LL_TIM_Init+0x40>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <LL_TIM_Init+0x114>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <LL_TIM_Init+0x40>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a37      	ldr	r2, [pc, #220]	; (8001cd0 <LL_TIM_Init+0x118>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d106      	bne.n	8001c06 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <LL_TIM_Init+0x108>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d027      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <LL_TIM_Init+0x10c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d023      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <LL_TIM_Init+0x110>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01f      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <LL_TIM_Init+0x114>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01b      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <LL_TIM_Init+0x118>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d017      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <LL_TIM_Init+0x11c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <LL_TIM_Init+0x120>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00f      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <LL_TIM_Init+0x124>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00b      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <LL_TIM_Init+0x128>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <LL_TIM_Init+0x12c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d003      	beq.n	8001c66 <LL_TIM_Init+0xae>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <LL_TIM_Init+0x130>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d106      	bne.n	8001c74 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff34 	bl	8001aee <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff20 	bl	8001ad2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <LL_TIM_Init+0x108>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <LL_TIM_Init+0xea>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <LL_TIM_Init+0x118>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d105      	bne.n	8001cae <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	7c1b      	ldrb	r3, [r3, #16]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff2e 	bl	8001b0a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff71 	bl	8001b96 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	40010400 	.word	0x40010400
 8001cd4:	40014000 	.word	0x40014000
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40014800 	.word	0x40014800
 8001ce0:	40001800 	.word	0x40001800
 8001ce4:	40001c00 	.word	0x40001c00
 8001ce8:	40002000 	.word	0x40002000

08001cec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d012      	beq.n	8001d28 <LL_TIM_OC_Init+0x3c>
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d802      	bhi.n	8001d0c <LL_TIM_OC_Init+0x20>
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d007      	beq.n	8001d1a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d0a:	e022      	b.n	8001d52 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8001d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d10:	d011      	beq.n	8001d36 <LL_TIM_OC_Init+0x4a>
 8001d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d16:	d015      	beq.n	8001d44 <LL_TIM_OC_Init+0x58>
      break;
 8001d18:	e01b      	b.n	8001d52 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f81d 	bl	8001d5c <OC1Config>
 8001d22:	4603      	mov	r3, r0
 8001d24:	75fb      	strb	r3, [r7, #23]
      break;
 8001d26:	e014      	b.n	8001d52 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f882 	bl	8001e34 <OC2Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
      break;
 8001d34:	e00d      	b.n	8001d52 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f8eb 	bl	8001f14 <OC3Config>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
      break;
 8001d42:	e006      	b.n	8001d52 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f954 	bl	8001ff4 <OC4Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d50:	bf00      	nop
  }

  return result;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	f023 0201 	bic.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f023 0202 	bic.w	r2, r3, #2
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0201 	bic.w	r2, r3, #1
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <OC1Config+0xd0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <OC1Config+0x6a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <OC1Config+0xd4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11e      	bne.n	8001e04 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f023 0208 	bic.w	r2, r3, #8
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f023 0204 	bic.w	r2, r3, #4
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fe85 	bl	8001b26 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010400 	.word	0x40010400

08001e34 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f023 0210 	bic.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f023 0220 	bic.w	r2, r3, #32
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0210 	bic.w	r2, r3, #16
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <OC2Config+0xd8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <OC2Config+0x70>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <OC2Config+0xdc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d11f      	bne.n	8001ee4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	019b      	lsls	r3, r3, #6
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	019b      	lsls	r3, r3, #6
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fe23 	bl	8001b42 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40010400 	.word	0x40010400

08001f14 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <OC3Config+0xd8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <OC3Config+0x6e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <OC3Config+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d11f      	bne.n	8001fc2 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	029b      	lsls	r3, r3, #10
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fdc2 	bl	8001b5e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	031b      	lsls	r3, r3, #12
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	031b      	lsls	r3, r3, #12
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <OC4Config+0xa8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <OC4Config+0x70>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <OC4Config+0xac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d107      	bne.n	8002074 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fd77 	bl	8001b7a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010400 	.word	0x40010400

080020a4 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	615a      	str	r2, [r3, #20]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	d152      	bne.n	80021d4 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009a      	lsls	r2, r3, #2
 8002138:	441a      	add	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4a4f      	ldr	r2, [pc, #316]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	b29b      	uxth	r3, r3
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	b299      	uxth	r1, r3
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009a      	lsls	r2, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 8002166:	fba3 0302 	umull	r0, r3, r3, r2
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2064      	movs	r0, #100	; 0x64
 800216e:	fb00 f303 	mul.w	r3, r0, r3
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	3332      	adds	r3, #50	; 0x32
 8002178:	4a41      	ldr	r2, [pc, #260]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b29b      	uxth	r3, r3
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	b29b      	uxth	r3, r3
 8002186:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800218a:	b29b      	uxth	r3, r3
 800218c:	440b      	add	r3, r1
 800218e:	b299      	uxth	r1, r3
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009a      	lsls	r2, r3, #2
 800219a:	441a      	add	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 80021a6:	fba3 0302 	umull	r0, r3, r3, r2
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2064      	movs	r0, #100	; 0x64
 80021ae:	fb00 f303 	mul.w	r3, r0, r3
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	3332      	adds	r3, #50	; 0x32
 80021b8:	4a31      	ldr	r2, [pc, #196]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	440b      	add	r3, r1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80021d2:	e04f      	b.n	8002274 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009a      	lsls	r2, r3, #2
 80021de:	441a      	add	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	4a25      	ldr	r2, [pc, #148]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	b299      	uxth	r1, r3
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	009a      	lsls	r2, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	fbb2 f2f3 	udiv	r2, r2, r3
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 800220c:	fba3 0302 	umull	r0, r3, r3, r2
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	2064      	movs	r0, #100	; 0x64
 8002214:	fb00 f303 	mul.w	r3, r0, r3
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	3332      	adds	r3, #50	; 0x32
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b29b      	uxth	r3, r3
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	b29b      	uxth	r3, r3
 800222e:	440b      	add	r3, r1
 8002230:	b299      	uxth	r1, r3
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	441a      	add	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fbb2 f2f3 	udiv	r2, r2, r3
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 8002248:	fba3 0302 	umull	r0, r3, r3, r2
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	2064      	movs	r0, #100	; 0x64
 8002250:	fb00 f303 	mul.w	r3, r0, r3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	3332      	adds	r3, #50	; 0x32
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <LL_USART_SetBaudRate+0x168>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b29b      	uxth	r3, r3
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	b29b      	uxth	r3, r3
 800226a:	440b      	add	r3, r1
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	51eb851f 	.word	0x51eb851f

08002284 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff04 	bl	80020a4 <LL_USART_IsEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d15e      	bne.n	8002360 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022aa:	f023 030c 	bic.w	r3, r3, #12
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	6851      	ldr	r1, [r2, #4]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	4311      	orrs	r1, r2
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	6912      	ldr	r2, [r2, #16]
 80022bc:	4311      	orrs	r1, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	6992      	ldr	r2, [r2, #24]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fefb 	bl	80020cc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4619      	mov	r1, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff08 	bl	80020f2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fab6 	bl	8001858 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <LL_USART_Init+0xe8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e021      	b.n	800233e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <LL_USART_Init+0xec>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d102      	bne.n	8002308 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	e01a      	b.n	800233e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <LL_USART_Init+0xf0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d102      	bne.n	8002316 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e013      	b.n	800233e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a17      	ldr	r2, [pc, #92]	; (8002378 <LL_USART_Init+0xf4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d102      	bne.n	8002324 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e00c      	b.n	800233e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <LL_USART_Init+0xf8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d102      	bne.n	8002332 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	e005      	b.n	800233e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <LL_USART_Init+0xfc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00d      	beq.n	8002360 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800234c:	2300      	movs	r3, #0
 800234e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69b9      	ldr	r1, [r7, #24]
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fedc 	bl	8002118 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002360:	7ffb      	ldrb	r3, [r7, #31]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40011000 	.word	0x40011000
 8002370:	40004400 	.word	0x40004400
 8002374:	40004800 	.word	0x40004800
 8002378:	40011400 	.word	0x40011400
 800237c:	40004c00 	.word	0x40004c00
 8002380:	40005000 	.word	0x40005000

08002384 <LL_SPI_Enable>:
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_SPI_SetStandard>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f023 0210 	bic.w	r2, r3, #16
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d101      	bne.n	8002408 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	b2db      	uxtb	r3, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	330c      	adds	r3, #12
 8002440:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	4013      	ands	r3, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	041a      	lsls	r2, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4013      	ands	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40023800 	.word	0x40023800

080024e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40023800 	.word	0x40023800

08002518 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b090      	sub	sp, #64	; 0x40
 800251c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	2228      	movs	r2, #40	; 0x28
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f001 ff50 	bl	80043cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800253c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002540:	f7ff ffd2 	bl	80024e8 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002544:	2002      	movs	r0, #2
 8002546:	f7ff ffb7 	bl	80024b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800254a:	2004      	movs	r0, #4
 800254c:	f7ff ffb4 	bl	80024b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff ffb1 	bl	80024b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002556:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800255a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800255c:	2302      	movs	r3, #2
 800255e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800256c:	2305      	movs	r3, #5
 800256e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	463b      	mov	r3, r7
 8002572:	4619      	mov	r1, r3
 8002574:	4841      	ldr	r0, [pc, #260]	; (800267c <BNO080_GPIO_SPI_Initialization+0x164>)
 8002576:	f7ff f882 	bl	800167e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800257e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002582:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002588:	2302      	movs	r3, #2
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800258c:	2301      	movs	r3, #1
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002596:	2318      	movs	r3, #24
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80025a2:	230a      	movs	r3, #10
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80025a6:	f107 0318 	add.w	r3, r7, #24
 80025aa:	4619      	mov	r1, r3
 80025ac:	4834      	ldr	r0, [pc, #208]	; (8002680 <BNO080_GPIO_SPI_Initialization+0x168>)
 80025ae:	f7ff fa3e 	bl	8001a2e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80025b2:	2100      	movs	r1, #0
 80025b4:	4832      	ldr	r0, [pc, #200]	; (8002680 <BNO080_GPIO_SPI_Initialization+0x168>)
 80025b6:	f7ff fef5 	bl	80023a4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80025ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025be:	4831      	ldr	r0, [pc, #196]	; (8002684 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80025c0:	f7ff ff6b 	bl	800249a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80025c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c8:	482c      	ldr	r0, [pc, #176]	; (800267c <BNO080_GPIO_SPI_Initialization+0x164>)
 80025ca:	f7ff ff66 	bl	800249a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80025ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d2:	482d      	ldr	r0, [pc, #180]	; (8002688 <BNO080_GPIO_SPI_Initialization+0x170>)
 80025d4:	f7ff ff61 	bl	800249a <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025de:	2301      	movs	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80025ee:	463b      	mov	r3, r7
 80025f0:	4619      	mov	r1, r3
 80025f2:	4822      	ldr	r0, [pc, #136]	; (800267c <BNO080_GPIO_SPI_Initialization+0x164>)
 80025f4:	f7ff f843 	bl	800167e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80025f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025fe:	2301      	movs	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 800260e:	463b      	mov	r3, r7
 8002610:	4619      	mov	r1, r3
 8002612:	481c      	ldr	r0, [pc, #112]	; (8002684 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002614:	f7ff f833 	bl	800167e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8002618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800261e:	2301      	movs	r3, #1
 8002620:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 800262e:	463b      	mov	r3, r7
 8002630:	4619      	mov	r1, r3
 8002632:	4815      	ldr	r0, [pc, #84]	; (8002688 <BNO080_GPIO_SPI_Initialization+0x170>)
 8002634:	f7ff f823 	bl	800167e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8002638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002642:	2301      	movs	r3, #1
 8002644:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8002646:	463b      	mov	r3, r7
 8002648:	4619      	mov	r1, r3
 800264a:	480e      	ldr	r0, [pc, #56]	; (8002684 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800264c:	f7ff f817 	bl	800167e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8002650:	480b      	ldr	r0, [pc, #44]	; (8002680 <BNO080_GPIO_SPI_Initialization+0x168>)
 8002652:	f7ff fe97 	bl	8002384 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8002656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265a:	4808      	ldr	r0, [pc, #32]	; (800267c <BNO080_GPIO_SPI_Initialization+0x164>)
 800265c:	f7ff ff0f 	bl	800247e <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8002660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <BNO080_GPIO_SPI_Initialization+0x170>)
 8002666:	f7ff ff0a 	bl	800247e <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800266a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002670:	f7ff ff05 	bl	800247e <LL_GPIO_SetOutputPin>
}
 8002674:	bf00      	nop
 8002676:	3740      	adds	r7, #64	; 0x40
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40020400 	.word	0x40020400
 8002680:	40003800 	.word	0x40003800
 8002684:	40020800 	.word	0x40020800
 8002688:	40020000 	.word	0x40020000

0800268c <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8002692:	f7ff ff41 	bl	8002518 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8002696:	482e      	ldr	r0, [pc, #184]	; (8002750 <BNO080_Initialization+0xc4>)
 8002698:	f001 fea0 	bl	80043dc <iprintf>
	
	CHIP_DESELECT(BNO080);
 800269c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a0:	482c      	ldr	r0, [pc, #176]	; (8002754 <BNO080_Initialization+0xc8>)
 80026a2:	f7ff feec 	bl	800247e <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80026a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026aa:	482b      	ldr	r0, [pc, #172]	; (8002758 <BNO080_Initialization+0xcc>)
 80026ac:	f7ff fee7 	bl	800247e <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80026b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b4:	4829      	ldr	r0, [pc, #164]	; (800275c <BNO080_Initialization+0xd0>)
 80026b6:	f7ff fef0 	bl	800249a <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80026ba:	20c8      	movs	r0, #200	; 0xc8
 80026bc:	f7fe f9d6 	bl	8000a6c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80026c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c4:	4825      	ldr	r0, [pc, #148]	; (800275c <BNO080_Initialization+0xd0>)
 80026c6:	f7ff feda 	bl	800247e <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80026ca:	f000 f8d7 	bl	800287c <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80026ce:	f000 f8d5 	bl	800287c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80026d2:	f000 f8f7 	bl	80028c4 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80026d6:	f000 f8d1 	bl	800287c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80026da:	f000 f8f3 	bl	80028c4 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <BNO080_Initialization+0xd4>)
 80026e0:	22f9      	movs	r2, #249	; 0xf9
 80026e2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <BNO080_Initialization+0xd4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80026ea:	2102      	movs	r1, #2
 80026ec:	2002      	movs	r0, #2
 80026ee:	f000 f959 	bl	80029a4 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80026f2:	f000 f8c3 	bl	800287c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80026f6:	f000 f8e5 	bl	80028c4 <BNO080_receivePacket>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d11b      	bne.n	8002738 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <BNO080_Initialization+0xd8>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <BNO080_Initialization+0xd8>)
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	461a      	mov	r2, r3
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <BNO080_Initialization+0xd8>)
 800270e:	789b      	ldrb	r3, [r3, #2]
 8002710:	4618      	mov	r0, r3
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <BNO080_Initialization+0xd8>)
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4603      	mov	r3, r0
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <BNO080_Initialization+0xdc>)
 800271c:	f001 fe5e 	bl	80043dc <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <BNO080_Initialization+0xd4>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2bf8      	cmp	r3, #248	; 0xf8
 8002726:	d107      	bne.n	8002738 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <BNO080_Initialization+0xd4>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	480f      	ldr	r0, [pc, #60]	; (800276c <BNO080_Initialization+0xe0>)
 8002730:	f001 fe54 	bl	80043dc <iprintf>
			return (0);
 8002734:	2300      	movs	r3, #0
 8002736:	e007      	b.n	8002748 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <BNO080_Initialization+0xd4>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	22f8      	movs	r2, #248	; 0xf8
 800273e:	4619      	mov	r1, r3
 8002740:	480b      	ldr	r0, [pc, #44]	; (8002770 <BNO080_Initialization+0xe4>)
 8002742:	f001 fe4b 	bl	80043dc <iprintf>
	return (1); //Something went wrong
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	08005c90 	.word	0x08005c90
 8002754:	40020400 	.word	0x40020400
 8002758:	40020000 	.word	0x40020000
 800275c:	40020800 	.word	0x40020800
 8002760:	20000100 	.word	0x20000100
 8002764:	200000ac 	.word	0x200000ac
 8002768:	08005ca4 	.word	0x08005ca4
 800276c:	08005cbc 	.word	0x08005cbc
 8002770:	08005cdc 	.word	0x08005cdc

08002774 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800277e:	bf00      	nop
 8002780:	480c      	ldr	r0, [pc, #48]	; (80027b4 <SPI2_SendByte+0x40>)
 8002782:	f7ff fe35 	bl	80023f0 <LL_SPI_IsActiveFlag_TXE>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f9      	beq.n	8002780 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	4619      	mov	r1, r3
 8002790:	4808      	ldr	r0, [pc, #32]	; (80027b4 <SPI2_SendByte+0x40>)
 8002792:	f7ff fe4d 	bl	8002430 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8002796:	bf00      	nop
 8002798:	4806      	ldr	r0, [pc, #24]	; (80027b4 <SPI2_SendByte+0x40>)
 800279a:	f7ff fe16 	bl	80023ca <LL_SPI_IsActiveFlag_RXNE>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f9      	beq.n	8002798 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <SPI2_SendByte+0x40>)
 80027a6:	f7ff fe36 	bl	8002416 <LL_SPI_ReceiveData8>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40003800 	.word	0x40003800

080027b8 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	2005      	movs	r0, #5
 80027ca:	f000 f805 	bl	80027d8 <BNO080_setFeatureCommand>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 80027e8:	22fd      	movs	r2, #253	; 0xfd
 80027ea:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80027ec:	4a22      	ldr	r2, [pc, #136]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002800:	2200      	movs	r2, #0
 8002802:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 800280a:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002814:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 800281e:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	0e1b      	lsrs	r3, r3, #24
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002828:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 800282c:	2200      	movs	r2, #0
 800282e:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002832:	2200      	movs	r2, #0
 8002834:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002838:	2200      	movs	r2, #0
 800283a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 800283e:	2200      	movs	r2, #0
 8002840:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002848:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002852:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 800285c:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0e1b      	lsrs	r3, r3, #24
 8002862:	b2da      	uxtb	r2, r3
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <BNO080_setFeatureCommand+0xa0>)
 8002866:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8002868:	2111      	movs	r1, #17
 800286a:	2002      	movs	r0, #2
 800286c:	f000 f89a 	bl	80029a4 <BNO080_sendPacket>
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000100 	.word	0x20000100

0800287c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	e00c      	b.n	80028a2 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8002888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288c:	480b      	ldr	r0, [pc, #44]	; (80028bc <BNO080_waitForSPI+0x40>)
 800288e:	f7ff fde1 	bl	8002454 <LL_GPIO_IsInputPinSet>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8002898:	2301      	movs	r3, #1
 800289a:	e00a      	b.n	80028b2 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3301      	adds	r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d1ee      	bne.n	8002888 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <BNO080_waitForSPI+0x44>)
 80028ac:	f001 fe0a 	bl	80044c4 <puts>
	return (0);
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40020800 	.word	0x40020800
 80028c0:	08005d28 	.word	0x08005d28

080028c4 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80028ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ce:	4831      	ldr	r0, [pc, #196]	; (8002994 <BNO080_receivePacket+0xd0>)
 80028d0:	f7ff fdc0 	bl	8002454 <LL_GPIO_IsInputPinSet>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80028da:	2300      	movs	r3, #0
 80028dc:	e056      	b.n	800298c <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80028de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e2:	482d      	ldr	r0, [pc, #180]	; (8002998 <BNO080_receivePacket+0xd4>)
 80028e4:	f7ff fdd9 	bl	800249a <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff ff43 	bl	8002774 <SPI2_SendByte>
 80028ee:	4603      	mov	r3, r0
 80028f0:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff ff3e 	bl	8002774 <SPI2_SendByte>
 80028f8:	4603      	mov	r3, r0
 80028fa:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7ff ff39 	bl	8002774 <SPI2_SendByte>
 8002902:	4603      	mov	r3, r0
 8002904:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff ff34 	bl	8002774 <SPI2_SendByte>
 800290c:	4603      	mov	r3, r0
 800290e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8002910:	4a22      	ldr	r2, [pc, #136]	; (800299c <BNO080_receivePacket+0xd8>)
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <BNO080_receivePacket+0xd8>)
 8002918:	7b3b      	ldrb	r3, [r7, #12]
 800291a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 800291c:	4a1f      	ldr	r2, [pc, #124]	; (800299c <BNO080_receivePacket+0xd8>)
 800291e:	7afb      	ldrb	r3, [r7, #11]
 8002920:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <BNO080_receivePacket+0xd8>)
 8002924:	7abb      	ldrb	r3, [r7, #10]
 8002926:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8002928:	7b3b      	ldrb	r3, [r7, #12]
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	b21a      	sxth	r2, r3
 800292e:	7b7b      	ldrb	r3, [r7, #13]
 8002930:	b21b      	sxth	r3, r3
 8002932:	4313      	orrs	r3, r2
 8002934:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8002936:	893b      	ldrh	r3, [r7, #8]
 8002938:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800293c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800293e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8002946:	2300      	movs	r3, #0
 8002948:	e020      	b.n	800298c <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	3b04      	subs	r3, #4
 800294e:	b29b      	uxth	r3, r3
 8002950:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8002952:	2300      	movs	r3, #0
 8002954:	81fb      	strh	r3, [r7, #14]
 8002956:	e00e      	b.n	8002976 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8002958:	20ff      	movs	r0, #255	; 0xff
 800295a:	f7ff ff0b 	bl	8002774 <SPI2_SendByte>
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	2b7f      	cmp	r3, #127	; 0x7f
 8002966:	d803      	bhi.n	8002970 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	490d      	ldr	r1, [pc, #52]	; (80029a0 <BNO080_receivePacket+0xdc>)
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	3301      	adds	r3, #1
 8002974:	81fb      	strh	r3, [r7, #14]
 8002976:	89fa      	ldrh	r2, [r7, #14]
 8002978:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	dbeb      	blt.n	8002958 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8002980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <BNO080_receivePacket+0xd4>)
 8002986:	f7ff fd7a 	bl	800247e <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40020800 	.word	0x40020800
 8002998:	40020400 	.word	0x40020400
 800299c:	200000ac 	.word	0x200000ac
 80029a0:	20000100 	.word	0x20000100

080029a4 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	460a      	mov	r2, r1
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80029b4:	79bb      	ldrb	r3, [r7, #6]
 80029b6:	3304      	adds	r3, #4
 80029b8:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80029ba:	f7ff ff5f 	bl	800287c <BNO080_waitForSPI>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80029c4:	2300      	movs	r3, #0
 80029c6:	e032      	b.n	8002a2e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80029c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029cc:	481a      	ldr	r0, [pc, #104]	; (8002a38 <BNO080_sendPacket+0x94>)
 80029ce:	f7ff fd64 	bl	800249a <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fecd 	bl	8002774 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80029da:	7bbb      	ldrb	r3, [r7, #14]
 80029dc:	121b      	asrs	r3, r3, #8
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fec7 	bl	8002774 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fec3 	bl	8002774 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <BNO080_sendPacket+0x98>)
 80029f2:	5cd2      	ldrb	r2, [r2, r3]
 80029f4:	1c51      	adds	r1, r2, #1
 80029f6:	b2c8      	uxtb	r0, r1
 80029f8:	4910      	ldr	r1, [pc, #64]	; (8002a3c <BNO080_sendPacket+0x98>)
 80029fa:	54c8      	strb	r0, [r1, r3]
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff feb9 	bl	8002774 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	e008      	b.n	8002a1a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <BNO080_sendPacket+0x9c>)
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff feb0 	bl	8002774 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	3301      	adds	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	79bb      	ldrb	r3, [r7, #6]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3f2      	bcc.n	8002a08 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8002a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a26:	4804      	ldr	r0, [pc, #16]	; (8002a38 <BNO080_sendPacket+0x94>)
 8002a28:	f7ff fd29 	bl	800247e <LL_GPIO_SetOutputPin>

	return (1);
 8002a2c:	2301      	movs	r3, #1
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	20000090 	.word	0x20000090
 8002a40:	20000100 	.word	0x20000100

08002a44 <LL_SPI_Enable>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_SPI_SetStandard>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0210 	bic.w	r2, r3, #16
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_SPI_IsActiveFlag_RXNE>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_SPI_IsActiveFlag_TXE>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d101      	bne.n	8002ac8 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_SPI_ReceiveData8>:
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	b2db      	uxtb	r3, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_SPI_TransmitData8>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	330c      	adds	r3, #12
 8002b00:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	701a      	strb	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_GPIO_SetOutputPin>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	619a      	str	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_GPIO_ResetOutputPin>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <LL_AHB1_GRP1_EnableClock>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5c:	4907      	ldr	r1, [pc, #28]	; (8002b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40023800 	.word	0x40023800

08002b80 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40023800 	.word	0x40023800

08002bb0 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b090      	sub	sp, #64	; 0x40
 8002bb4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002bb6:	f107 0318 	add.w	r3, r7, #24
 8002bba:	2228      	movs	r2, #40	; 0x28
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 fc04 	bl	80043cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002bd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002bd8:	f7ff ffd2 	bl	8002b80 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7ff ffb7 	bl	8002b50 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002be2:	2004      	movs	r0, #4
 8002be4:	f7ff ffb4 	bl	8002b50 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002be8:	23e0      	movs	r3, #224	; 0xe0
 8002bea:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bec:	2302      	movs	r3, #2
 8002bee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002bfc:	2305      	movs	r3, #5
 8002bfe:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	463b      	mov	r3, r7
 8002c02:	4619      	mov	r1, r3
 8002c04:	4825      	ldr	r0, [pc, #148]	; (8002c9c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002c06:	f7fe fd3a 	bl	800167e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002c0e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002c12:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002c26:	2310      	movs	r3, #16
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002c32:	230a      	movs	r3, #10
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002c36:	f107 0318 	add.w	r3, r7, #24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002c3e:	f7fe fef6 	bl	8001a2e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002c42:	2100      	movs	r1, #0
 8002c44:	4816      	ldr	r0, [pc, #88]	; (8002ca0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002c46:	f7ff ff0d 	bl	8002a64 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	4815      	ldr	r0, [pc, #84]	; (8002ca4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c4e:	f7ff ff6f 	bl	8002b30 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002c52:	2310      	movs	r3, #16
 8002c54:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c56:	2301      	movs	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002c66:	463b      	mov	r3, r7
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480e      	ldr	r0, [pc, #56]	; (8002ca4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c6c:	f7fe fd07 	bl	800167e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002c70:	2320      	movs	r3, #32
 8002c72:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c74:	2300      	movs	r3, #0
 8002c76:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4808      	ldr	r0, [pc, #32]	; (8002ca4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c82:	f7fe fcfc 	bl	800167e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002c88:	f7ff fedc 	bl	8002a44 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002c90:	f7ff ff40 	bl	8002b14 <LL_GPIO_SetOutputPin>
}
 8002c94:	bf00      	nop
 8002c96:	3740      	adds	r7, #64	; 0x40
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40013000 	.word	0x40013000
 8002ca4:	40020800 	.word	0x40020800

08002ca8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002cb2:	bf00      	nop
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <SPI1_SendByte+0x40>)
 8002cb6:	f7ff fefb 	bl	8002ab0 <LL_SPI_IsActiveFlag_TXE>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f9      	beq.n	8002cb4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <SPI1_SendByte+0x40>)
 8002cc6:	f7ff ff13 	bl	8002af0 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002cca:	bf00      	nop
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <SPI1_SendByte+0x40>)
 8002cce:	f7ff fedc 	bl	8002a8a <LL_SPI_IsActiveFlag_RXNE>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f9      	beq.n	8002ccc <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002cd8:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <SPI1_SendByte+0x40>)
 8002cda:	f7ff fefc 	bl	8002ad6 <LL_SPI_ReceiveData8>
 8002cde:	4603      	mov	r3, r0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40013000 	.word	0x40013000

08002cec <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <ICM20602_Readbyte+0x3c>)
 8002cfa:	f7ff ff19 	bl	8002b30 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ffce 	bl	8002ca8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7ff ffcb 	bl	8002ca8 <SPI1_SendByte>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002d16:	2110      	movs	r1, #16
 8002d18:	4803      	ldr	r0, [pc, #12]	; (8002d28 <ICM20602_Readbyte+0x3c>)
 8002d1a:	f7ff fefb 	bl	8002b14 <LL_GPIO_SetOutputPin>
	
	return val;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40020800 	.word	0x40020800

08002d2c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	480b      	ldr	r0, [pc, #44]	; (8002d6c <ICM20602_Writebyte+0x40>)
 8002d40:	f7ff fef6 	bl	8002b30 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ffab 	bl	8002ca8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002d52:	79bb      	ldrb	r3, [r7, #6]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ffa7 	bl	8002ca8 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	4803      	ldr	r0, [pc, #12]	; (8002d6c <ICM20602_Writebyte+0x40>)
 8002d5e:	f7ff fed9 	bl	8002b14 <LL_GPIO_SetOutputPin>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40020800 	.word	0x40020800

08002d70 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002d84:	463b      	mov	r3, r7
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002d8c:	f7ff ff10 	bl	8002bb0 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002d90:	4833      	ldr	r0, [pc, #204]	; (8002e60 <ICM20602_Initialization+0xf0>)
 8002d92:	f001 fb23 	bl	80043dc <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002d96:	2075      	movs	r0, #117	; 0x75
 8002d98:	f7ff ffa8 	bl	8002cec <ICM20602_Readbyte>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b12      	cmp	r3, #18
 8002da4:	d105      	bne.n	8002db2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	4619      	mov	r1, r3
 8002daa:	482e      	ldr	r0, [pc, #184]	; (8002e64 <ICM20602_Initialization+0xf4>)
 8002dac:	f001 fb16 	bl	80043dc <iprintf>
 8002db0:	e012      	b.n	8002dd8 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d00f      	beq.n	8002dd8 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002db8:	2075      	movs	r0, #117	; 0x75
 8002dba:	f7ff ff97 	bl	8002cec <ICM20602_Readbyte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b12      	cmp	r3, #18
 8002dc6:	d007      	beq.n	8002dd8 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2212      	movs	r2, #18
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4826      	ldr	r0, [pc, #152]	; (8002e68 <ICM20602_Initialization+0xf8>)
 8002dd0:	f001 fb04 	bl	80043dc <iprintf>
			return 1; //ERROR
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e03f      	b.n	8002e58 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	206b      	movs	r0, #107	; 0x6b
 8002ddc:	f7ff ffa6 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002de0:	2032      	movs	r0, #50	; 0x32
 8002de2:	f7fd fe43 	bl	8000a6c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002de6:	2101      	movs	r1, #1
 8002de8:	206b      	movs	r0, #107	; 0x6b
 8002dea:	f7ff ff9f 	bl	8002d2c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002dee:	2032      	movs	r0, #50	; 0x32
 8002df0:	f7fd fe3c 	bl	8000a6c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002df4:	2138      	movs	r1, #56	; 0x38
 8002df6:	206c      	movs	r0, #108	; 0x6c
 8002df8:	f7ff ff98 	bl	8002d2c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002dfc:	2032      	movs	r0, #50	; 0x32
 8002dfe:	f7fd fe35 	bl	8000a6c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002e02:	2100      	movs	r1, #0
 8002e04:	2019      	movs	r0, #25
 8002e06:	f7ff ff91 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e0a:	2032      	movs	r0, #50	; 0x32
 8002e0c:	f7fd fe2e 	bl	8000a6c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002e10:	2105      	movs	r1, #5
 8002e12:	201a      	movs	r0, #26
 8002e14:	f7ff ff8a 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e18:	2032      	movs	r0, #50	; 0x32
 8002e1a:	f7fd fe27 	bl	8000a6c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002e1e:	2118      	movs	r1, #24
 8002e20:	201b      	movs	r0, #27
 8002e22:	f7ff ff83 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e26:	2032      	movs	r0, #50	; 0x32
 8002e28:	f7fd fe20 	bl	8000a6c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002e2c:	2118      	movs	r1, #24
 8002e2e:	201c      	movs	r0, #28
 8002e30:	f7ff ff7c 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e34:	2032      	movs	r0, #50	; 0x32
 8002e36:	f7fd fe19 	bl	8000a6c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	201d      	movs	r0, #29
 8002e3e:	f7ff ff75 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e42:	2032      	movs	r0, #50	; 0x32
 8002e44:	f7fd fe12 	bl	8000a6c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2038      	movs	r0, #56	; 0x38
 8002e4c:	f7ff ff6e 	bl	8002d2c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002e50:	2032      	movs	r0, #50	; 0x32
 8002e52:	f7fd fe0b 	bl	8000a6c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	08005d3c 	.word	0x08005d3c
 8002e64:	08005d54 	.word	0x08005d54
 8002e68:	08005d78 	.word	0x08005d78

08002e6c <LL_SPI_Enable>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_SPI_SetStandard>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 0210 	bic.w	r2, r3, #16
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	605a      	str	r2, [r3, #4]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_SPI_IsActiveFlag_TXE>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d101      	bne.n	8002ef0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_SPI_ReceiveData8>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	b2db      	uxtb	r3, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_SPI_TransmitData8>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	330c      	adds	r3, #12
 8002f28:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	701a      	strb	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_GPIO_IsInputPinSet>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_GPIO_SetOutputPin>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_GPIO_ResetOutputPin>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	041a      	lsls	r2, r3, #16
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_AHB1_GRP1_EnableClock>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <LL_APB1_GRP1_EnableClock>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fdc:	4907      	ldr	r1, [pc, #28]	; (8002ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4013      	ands	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40023800 	.word	0x40023800

08003000 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b090      	sub	sp, #64	; 0x40
 8003004:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003006:	f107 0318 	add.w	r3, r7, #24
 800300a:	2228      	movs	r2, #40	; 0x28
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f9dc 	bl	80043cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	463b      	mov	r3, r7
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003024:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003028:	f7ff ffd2 	bl	8002fd0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800302c:	2002      	movs	r0, #2
 800302e:	f7ff ffb7 	bl	8002fa0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003032:	2338      	movs	r3, #56	; 0x38
 8003034:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003036:	2302      	movs	r3, #2
 8003038:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003046:	2306      	movs	r3, #6
 8003048:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304a:	463b      	mov	r3, r7
 800304c:	4619      	mov	r1, r3
 800304e:	4826      	ldr	r0, [pc, #152]	; (80030e8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8003050:	f7fe fb15 	bl	800167e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003058:	f44f 7382 	mov.w	r3, #260	; 0x104
 800305c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800305e:	2300      	movs	r3, #0
 8003060:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003062:	2302      	movs	r3, #2
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003066:	2301      	movs	r3, #1
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800306a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003070:	2308      	movs	r3, #8
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800307c:	230a      	movs	r3, #10
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	4619      	mov	r1, r3
 8003086:	4819      	ldr	r0, [pc, #100]	; (80030ec <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8003088:	f7fe fcd1 	bl	8001a2e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800308c:	2100      	movs	r1, #0
 800308e:	4817      	ldr	r0, [pc, #92]	; (80030ec <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8003090:	f7ff fefc 	bl	8002e8c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	4814      	ldr	r0, [pc, #80]	; (80030e8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8003098:	f7ff ff73 	bl	8002f82 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 800309c:	2340      	movs	r3, #64	; 0x40
 800309e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030a0:	2301      	movs	r3, #1
 80030a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80030b0:	463b      	mov	r3, r7
 80030b2:	4619      	mov	r1, r3
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80030b6:	f7fe fae2 	bl	800167e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80030c2:	2301      	movs	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80030c6:	463b      	mov	r3, r7
 80030c8:	4619      	mov	r1, r3
 80030ca:	4807      	ldr	r0, [pc, #28]	; (80030e8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80030cc:	f7fe fad7 	bl	800167e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80030d0:	4806      	ldr	r0, [pc, #24]	; (80030ec <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80030d2:	f7ff fecb 	bl	8002e6c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80030da:	f7ff ff44 	bl	8002f66 <LL_GPIO_SetOutputPin>
}
 80030de:	bf00      	nop
 80030e0:	3740      	adds	r7, #64	; 0x40
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40003c00 	.word	0x40003c00

080030f0 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80030fa:	bf00      	nop
 80030fc:	480c      	ldr	r0, [pc, #48]	; (8003130 <SPI3_SendByte+0x40>)
 80030fe:	f7ff feeb 	bl	8002ed8 <LL_SPI_IsActiveFlag_TXE>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f9      	beq.n	80030fc <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	4619      	mov	r1, r3
 800310c:	4808      	ldr	r0, [pc, #32]	; (8003130 <SPI3_SendByte+0x40>)
 800310e:	f7ff ff03 	bl	8002f18 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8003112:	bf00      	nop
 8003114:	4806      	ldr	r0, [pc, #24]	; (8003130 <SPI3_SendByte+0x40>)
 8003116:	f7ff fecc 	bl	8002eb2 <LL_SPI_IsActiveFlag_RXNE>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f9      	beq.n	8003114 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8003120:	4803      	ldr	r0, [pc, #12]	; (8003130 <SPI3_SendByte+0x40>)
 8003122:	f7ff feec 	bl	8002efe <LL_SPI_ReceiveData8>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40003c00 	.word	0x40003c00

08003134 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	// CS Pin LOW
	CHIP_SELECT(LPS22HH);
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	480b      	ldr	r0, [pc, #44]	; (8003170 <LPS22HH_Readbyte+0x3c>)
 8003142:	f7ff ff1e 	bl	8002f82 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffce 	bl	80030f0 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8003154:	2000      	movs	r0, #0
 8003156:	f7ff ffcb 	bl	80030f0 <SPI3_SendByte>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
	// CS Pin HIGHs
	CHIP_DESELECT(LPS22HH);
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	4803      	ldr	r0, [pc, #12]	; (8003170 <LPS22HH_Readbyte+0x3c>)
 8003162:	f7ff ff00 	bl	8002f66 <LL_GPIO_SetOutputPin>
	
	return val;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40020400 	.word	0x40020400

08003174 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	603a      	str	r2, [r7, #0]
 800317e:	71fb      	strb	r3, [r7, #7]
 8003180:	460b      	mov	r3, r1
 8003182:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8003188:	2140      	movs	r1, #64	; 0x40
 800318a:	4810      	ldr	r0, [pc, #64]	; (80031cc <LPS22HH_Readbytes+0x58>)
 800318c:	f7ff fef9 	bl	8002f82 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ffa9 	bl	80030f0 <SPI3_SendByte>
	while(i < len)
 800319e:	e009      	b.n	80031b4 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	60fa      	str	r2, [r7, #12]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	18d4      	adds	r4, r2, r3
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7ff ffa0 	bl	80030f0 <SPI3_SendByte>
 80031b0:	4603      	mov	r3, r0
 80031b2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80031b4:	79bb      	ldrb	r3, [r7, #6]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d3f1      	bcc.n	80031a0 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <LPS22HH_Readbytes+0x58>)
 80031c0:	f7ff fed1 	bl	8002f66 <LL_GPIO_SetOutputPin>
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	40020400 	.word	0x40020400

080031d0 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	460a      	mov	r2, r1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	4613      	mov	r3, r2
 80031de:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	480b      	ldr	r0, [pc, #44]	; (8003210 <LPS22HH_Writebyte+0x40>)
 80031e4:	f7ff fecd 	bl	8002f82 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff7d 	bl	80030f0 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80031f6:	79bb      	ldrb	r3, [r7, #6]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff79 	bl	80030f0 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <LPS22HH_Writebyte+0x40>)
 8003202:	f7ff feb0 	bl	8002f66 <LL_GPIO_SetOutputPin>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40020400 	.word	0x40020400

08003214 <LPS22HH_Initialization>:
	}
	CHIP_DESELECT(LPS22HH);
}

int LPS22HH_Initialization(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 800321e:	f7ff feef 	bl	8003000 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8003222:	4841      	ldr	r0, [pc, #260]	; (8003328 <LPS22HH_Initialization+0x114>)
 8003224:	f001 f8da 	bl	80043dc <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8003228:	200f      	movs	r0, #15
 800322a:	f7ff ff83 	bl	8003134 <LPS22HH_Readbyte>
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2bb3      	cmp	r3, #179	; 0xb3
 8003236:	d105      	bne.n	8003244 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	4619      	mov	r1, r3
 800323c:	483b      	ldr	r0, [pc, #236]	; (800332c <LPS22HH_Initialization+0x118>)
 800323e:	f001 f8cd 	bl	80043dc <iprintf>
 8003242:	e012      	b.n	800326a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	2bb3      	cmp	r3, #179	; 0xb3
 8003248:	d00f      	beq.n	800326a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800324a:	200f      	movs	r0, #15
 800324c:	f7ff ff72 	bl	8003134 <LPS22HH_Readbyte>
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2bb3      	cmp	r3, #179	; 0xb3
 8003258:	d007      	beq.n	800326a <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	22b3      	movs	r2, #179	; 0xb3
 800325e:	4619      	mov	r1, r3
 8003260:	4833      	ldr	r0, [pc, #204]	; (8003330 <LPS22HH_Initialization+0x11c>)
 8003262:	f001 f8bb 	bl	80043dc <iprintf>
			return 1; //ERROR
 8003266:	2301      	movs	r3, #1
 8003268:	e059      	b.n	800331e <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800326a:	2104      	movs	r1, #4
 800326c:	2011      	movs	r0, #17
 800326e:	f7ff ffaf 	bl	80031d0 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8003272:	2011      	movs	r0, #17
 8003274:	f7ff ff5e 	bl	8003134 <LPS22HH_Readbyte>
 8003278:	4603      	mov	r3, r0
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f7      	bne.n	8003272 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8003282:	2010      	movs	r0, #16
 8003284:	f7ff ff56 	bl	8003134 <LPS22HH_Readbyte>
 8003288:	4603      	mov	r3, r0
 800328a:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 800328c:	79bb      	ldrb	r3, [r7, #6]
 800328e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003292:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8003294:	79bb      	ldrb	r3, [r7, #6]
 8003296:	4619      	mov	r1, r3
 8003298:	2010      	movs	r0, #16
 800329a:	f7ff ff99 	bl	80031d0 <LPS22HH_Writebyte>
	temp_reg = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80032a2:	2010      	movs	r0, #16
 80032a4:	f7ff ff46 	bl	8003134 <LPS22HH_Readbyte>
 80032a8:	4603      	mov	r3, r0
 80032aa:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80032ac:	2010      	movs	r0, #16
 80032ae:	f7ff ff41 	bl	8003134 <LPS22HH_Readbyte>
 80032b2:	4603      	mov	r3, r0
 80032b4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	f043 030c 	orr.w	r3, r3, #12
 80032bc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80032be:	79bb      	ldrb	r3, [r7, #6]
 80032c0:	4619      	mov	r1, r3
 80032c2:	2010      	movs	r0, #16
 80032c4:	f7ff ff84 	bl	80031d0 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80032c8:	2010      	movs	r0, #16
 80032ca:	f7ff ff33 	bl	8003134 <LPS22HH_Readbyte>
 80032ce:	4603      	mov	r3, r0
 80032d0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80032d2:	79bb      	ldrb	r3, [r7, #6]
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80032da:	79bb      	ldrb	r3, [r7, #6]
 80032dc:	4619      	mov	r1, r3
 80032de:	2010      	movs	r0, #16
 80032e0:	f7ff ff76 	bl	80031d0 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80032e4:	2011      	movs	r0, #17
 80032e6:	f7ff ff25 	bl	8003134 <LPS22HH_Readbyte>
 80032ea:	4603      	mov	r3, r0
 80032ec:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80032ee:	79bb      	ldrb	r3, [r7, #6]
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80032f6:	79bb      	ldrb	r3, [r7, #6]
 80032f8:	4619      	mov	r1, r3
 80032fa:	2011      	movs	r0, #17
 80032fc:	f7ff ff68 	bl	80031d0 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8003300:	2012      	movs	r0, #18
 8003302:	f7ff ff17 	bl	8003134 <LPS22HH_Readbyte>
 8003306:	4603      	mov	r3, r0
 8003308:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 800330a:	79bb      	ldrb	r3, [r7, #6]
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	4619      	mov	r1, r3
 8003316:	2012      	movs	r0, #18
 8003318:	f7ff ff5a 	bl	80031d0 <LPS22HH_Writebyte>
	
	return 0; //OK
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	08005da4 	.word	0x08005da4
 800332c:	08005db8 	.word	0x08005db8
 8003330:	08005ddc 	.word	0x08005ddc

08003334 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <LPS22HH_DataReady+0x14>)
 800333c:	f7ff fdfe 	bl	8002f3c <LL_GPIO_IsInputPinSet>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40020400 	.word	0x40020400

0800334c <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	2103      	movs	r1, #3
 8003358:	2028      	movs	r0, #40	; 0x28
 800335a:	f7ff ff0b 	bl	8003174 <LPS22HH_Readbytes>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	2102      	movs	r1, #2
 8003372:	202b      	movs	r0, #43	; 0x2b
 8003374:	f7ff fefe 	bl	8003174 <LPS22HH_Readbytes>
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	ed87 0a01 	vstr	s0, [r7, #4]
 800338a:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 800338e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80033d8 <getAltitude2+0x58>
 8003392:	edd7 7a01 	vldr	s15, [r7, #4]
 8003396:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800339a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80033dc <getAltitude2+0x5c>
 800339e:	eeb0 0a66 	vmov.f32	s0, s13
 80033a2:	f001 ff63 	bl	800526c <powf>
 80033a6:	eeb0 7a40 	vmov.f32	s14, s0
 80033aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80033ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033b2:	edd7 7a00 	vldr	s15, [r7]
 80033b6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80033e0 <getAltitude2+0x60>
 80033ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80033e4 <getAltitude2+0x64>
 80033c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033ca:	eef0 7a66 	vmov.f32	s15, s13
}
 80033ce:	eeb0 0a67 	vmov.f32	s0, s15
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	447d5000 	.word	0x447d5000
 80033dc:	3e42c9b7 	.word	0x3e42c9b7
 80033e0:	43889333 	.word	0x43889333
 80033e4:	3bd4fdf4 	.word	0x3bd4fdf4

080033e8 <LL_GPIO_ResetOutputPin>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <LL_AHB1_GRP1_EnableClock>:
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40023800 	.word	0x40023800

08003438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343e:	463b      	mov	r3, r7
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
 800344c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800344e:	2080      	movs	r0, #128	; 0x80
 8003450:	f7ff ffda 	bl	8003408 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003454:	2004      	movs	r0, #4
 8003456:	f7ff ffd7 	bl	8003408 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800345a:	2001      	movs	r0, #1
 800345c:	f7ff ffd4 	bl	8003408 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003460:	2002      	movs	r0, #2
 8003462:	f7ff ffd1 	bl	8003408 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8003466:	f240 2117 	movw	r1, #535	; 0x217
 800346a:	482c      	ldr	r0, [pc, #176]	; (800351c <MX_GPIO_Init+0xe4>)
 800346c:	f7ff ffbc 	bl	80033e8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003470:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003474:	482a      	ldr	r0, [pc, #168]	; (8003520 <MX_GPIO_Init+0xe8>)
 8003476:	f7ff ffb7 	bl	80033e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800347a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800347e:	4829      	ldr	r0, [pc, #164]	; (8003524 <MX_GPIO_Init+0xec>)
 8003480:	f7ff ffb2 	bl	80033e8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8003484:	f240 2317 	movw	r3, #535	; 0x217
 8003488:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800348a:	2301      	movs	r3, #1
 800348c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349a:	463b      	mov	r3, r7
 800349c:	4619      	mov	r1, r3
 800349e:	481f      	ldr	r0, [pc, #124]	; (800351c <MX_GPIO_Init+0xe4>)
 80034a0:	f7fe f8ed 	bl	800167e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80034a4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80034a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b2:	463b      	mov	r3, r7
 80034b4:	4619      	mov	r1, r3
 80034b6:	4819      	ldr	r0, [pc, #100]	; (800351c <MX_GPIO_Init+0xe4>)
 80034b8:	f7fe f8e1 	bl	800167e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80034bc:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80034c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80034c2:	2301      	movs	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d2:	463b      	mov	r3, r7
 80034d4:	4619      	mov	r1, r3
 80034d6:	4812      	ldr	r0, [pc, #72]	; (8003520 <MX_GPIO_Init+0xe8>)
 80034d8:	f7fe f8d1 	bl	800167e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80034dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80034e2:	2301      	movs	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	463b      	mov	r3, r7
 80034f4:	4619      	mov	r1, r3
 80034f6:	480b      	ldr	r0, [pc, #44]	; (8003524 <MX_GPIO_Init+0xec>)
 80034f8:	f7fe f8c1 	bl	800167e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003500:	2300      	movs	r3, #0
 8003502:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	463b      	mov	r3, r7
 800350a:	4619      	mov	r1, r3
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <MX_GPIO_Init+0xe8>)
 800350e:	f7fe f8b6 	bl	800167e <LL_GPIO_Init>

}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020800 	.word	0x40020800
 8003520:	40020400 	.word	0x40020400
 8003524:	40020000 	.word	0x40020000

08003528 <LL_TIM_EnableCounter>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_TIM_CC_EnableChannel>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_TIM_CC_DisableChannel>:
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	43db      	mvns	r3, r3
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60da      	str	r2, [r3, #12]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	605a      	str	r2, [r3, #4]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++) {
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e00d      	b.n	80035fa <_write+0x2e>
		LL_USART_TransmitData8(USART6, ptr[i]);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	4413      	add	r3, r2
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4808      	ldr	r0, [pc, #32]	; (800360c <_write+0x40>)
 80035ea:	f7ff ffe0 	bl	80035ae <LL_USART_TransmitData8>
		HAL_Delay(1);
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7fd fa3c 	bl	8000a6c <HAL_Delay>
	for(int i=0; i<len; i++) {
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3301      	adds	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	dbed      	blt.n	80035de <_write+0x12>
	}
	return len;
 8003602:	687b      	ldr	r3, [r7, #4]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40011400 	.word	0x40011400

08003610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003616:	f7fd f9b7 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800361a:	f000 f8a5 	bl	8003768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800361e:	f7ff ff0b 	bl	8003438 <MX_GPIO_Init>
  MX_TIM3_Init();
 8003622:	f000 fccd 	bl	8003fc0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8003626:	f000 fe1d 	bl	8004264 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800362a:	f000 f9bb 	bl	80039a4 <MX_SPI2_Init>
  MX_SPI1_Init();
 800362e:	f000 f967 	bl	8003900 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003632:	f000 fa0b 	bl	8003a4c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8003636:	4843      	ldr	r0, [pc, #268]	; (8003744 <main+0x134>)
 8003638:	f7ff ff76 	bl	8003528 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800363c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003640:	4840      	ldr	r0, [pc, #256]	; (8003744 <main+0x134>)
 8003642:	f7ff ff81 	bl	8003548 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <main+0x134>)
 8003648:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800364e:	2064      	movs	r0, #100	; 0x64
 8003650:	f7fd fa0c 	bl	8000a6c <HAL_Delay>
  TIM3->PSC = 1500;
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <main+0x134>)
 8003656:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800365c:	2064      	movs	r0, #100	; 0x64
 800365e:	f7fd fa05 	bl	8000a6c <HAL_Delay>
  TIM3->PSC = 1000;
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <main+0x134>)
 8003664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800366a:	2064      	movs	r0, #100	; 0x64
 800366c:	f7fd f9fe 	bl	8000a6c <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003674:	4833      	ldr	r0, [pc, #204]	; (8003744 <main+0x134>)
 8003676:	f7ff ff78 	bl	800356a <LL_TIM_CC_DisableChannel>
  LL_USART_EnableIT_RXNE(USART6);
 800367a:	4833      	ldr	r0, [pc, #204]	; (8003748 <main+0x138>)
 800367c:	f7ff ff87 	bl	800358e <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8003680:	f7ff f804 	bl	800268c <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8003684:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003688:	f7ff f896 	bl	80027b8 <BNO080_enableRotationVector>

  ICM20602_Initialization();
 800368c:	f7ff fb70 	bl	8002d70 <ICM20602_Initialization>
  LPS22HH_Initialization();
 8003690:	f7ff fdc0 	bl	8003214 <LPS22HH_Initialization>
//		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
//
//		  printf("%d, %d, %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//	  }

	  if(LPS22HH_DataReady()) {
 8003694:	f7ff fe4e 	bl	8003334 <LPS22HH_DataReady>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0fa      	beq.n	8003694 <main+0x84>
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800369e:	482b      	ldr	r0, [pc, #172]	; (800374c <main+0x13c>)
 80036a0:	f7ff fe54 	bl	800334c <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80036a4:	482a      	ldr	r0, [pc, #168]	; (8003750 <main+0x140>)
 80036a6:	f7ff fe5e 	bl	8003366 <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <main+0x13c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003754 <main+0x144>
 80036ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036be:	4b23      	ldr	r3, [pc, #140]	; (800374c <main+0x13c>)
 80036c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036cc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003758 <main+0x148>
 80036d0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80036d4:	eef0 0a46 	vmov.f32	s1, s12
 80036d8:	eeb0 0a66 	vmov.f32	s0, s13
 80036dc:	f7ff fe50 	bl	8003380 <getAltitude2>
 80036e0:	eef0 7a40 	vmov.f32	s15, s0
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <main+0x13c>)
 80036e6:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.8f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 80036ea:	4b18      	ldr	r3, [pc, #96]	; (800374c <main+0x13c>)
 80036ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80036f0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800375c <main+0x14c>
 80036f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <main+0x13c>)
 80036fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80036fe:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003760 <main+0x150>
 8003702:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <main+0x13c>)
 800370c:	edc3 7a03 	vstr	s15, [r3, #12]
		  printf("%d, %d\r\n", (int)(LPS22HH.baroAlt * 100), (int)(LPS22HH.baroAltFilt * 100));
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <main+0x13c>)
 8003712:	edd3 7a02 	vldr	s15, [r3, #8]
 8003716:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003758 <main+0x148>
 800371a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <main+0x13c>)
 8003724:	edd3 7a03 	vldr	s15, [r3, #12]
 8003728:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003758 <main+0x148>
 800372c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003734:	ee17 2a90 	vmov	r2, s15
 8003738:	ee16 1a90 	vmov	r1, s13
 800373c:	4809      	ldr	r0, [pc, #36]	; (8003764 <main+0x154>)
 800373e:	f000 fe4d 	bl	80043dc <iprintf>
	  if(LPS22HH_DataReady()) {
 8003742:	e7a7      	b.n	8003694 <main+0x84>
 8003744:	40000400 	.word	0x40000400
 8003748:	40011400 	.word	0x40011400
 800374c:	20000190 	.word	0x20000190
 8003750:	20000194 	.word	0x20000194
 8003754:	45800000 	.word	0x45800000
 8003758:	42c80000 	.word	0x42c80000
 800375c:	3f4ccccd 	.word	0x3f4ccccd
 8003760:	3e4ccccc 	.word	0x3e4ccccc
 8003764:	08005e08 	.word	0x08005e08

08003768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b094      	sub	sp, #80	; 0x50
 800376c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800376e:	f107 0320 	add.w	r3, r7, #32
 8003772:	2230      	movs	r2, #48	; 0x30
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fe28 	bl	80043cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	4b28      	ldr	r3, [pc, #160]	; (8003834 <SystemClock_Config+0xcc>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	4a27      	ldr	r2, [pc, #156]	; (8003834 <SystemClock_Config+0xcc>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379a:	6413      	str	r3, [r2, #64]	; 0x40
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <SystemClock_Config+0xcc>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <SystemClock_Config+0xd0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <SystemClock_Config+0xd0>)
 80037b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <SystemClock_Config+0xd0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ce:	2302      	movs	r3, #2
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037d8:	2304      	movs	r3, #4
 80037da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037dc:	23a8      	movs	r3, #168	; 0xa8
 80037de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037e0:	2302      	movs	r3, #2
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037e4:	2304      	movs	r3, #4
 80037e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e8:	f107 0320 	add.w	r3, r7, #32
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd fa45 	bl	8000c7c <HAL_RCC_OscConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037f8:	f000 f820 	bl	800383c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037fc:	230f      	movs	r3, #15
 80037fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003800:	2302      	movs	r3, #2
 8003802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800380c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800380e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	2105      	movs	r1, #5
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fc70 	bl	8001100 <HAL_RCC_ClockConfig>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003826:	f000 f809 	bl	800383c <Error_Handler>
  }
}
 800382a:	bf00      	nop
 800382c:	3750      	adds	r7, #80	; 0x50
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000

0800383c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_SPI_SetStandard>:
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 0210 	bic.w	r2, r3, #16
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_AHB1_GRP1_EnableClock>:
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	4907      	ldr	r1, [pc, #28]	; (800389c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4313      	orrs	r3, r2
 8003882:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4013      	ands	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40023800 	.word	0x40023800

080038a0 <LL_APB1_GRP1_EnableClock>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80038aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ac:	4907      	ldr	r1, [pc, #28]	; (80038cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80038b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40023800 	.word	0x40023800

080038d0 <LL_APB2_GRP1_EnableClock>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80038da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80038e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4013      	ands	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40023800 	.word	0x40023800

08003900 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b090      	sub	sp, #64	; 0x40
 8003904:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003906:	f107 0318 	add.w	r3, r7, #24
 800390a:	2228      	movs	r2, #40	; 0x28
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fd5c 	bl	80043cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	463b      	mov	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003924:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003928:	f7ff ffd2 	bl	80038d0 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800392c:	2001      	movs	r0, #1
 800392e:	f7ff ff9f 	bl	8003870 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003932:	23e0      	movs	r3, #224	; 0xe0
 8003934:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003936:	2302      	movs	r3, #2
 8003938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003946:	2305      	movs	r3, #5
 8003948:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	463b      	mov	r3, r7
 800394c:	4619      	mov	r1, r3
 800394e:	4813      	ldr	r0, [pc, #76]	; (800399c <MX_SPI1_Init+0x9c>)
 8003950:	f7fd fe95 	bl	800167e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003958:	f44f 7382 	mov.w	r3, #260	; 0x104
 800395c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003962:	2302      	movs	r3, #2
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003966:	2301      	movs	r3, #1
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800396a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003970:	2310      	movs	r3, #16
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003974:	2300      	movs	r3, #0
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800397c:	230a      	movs	r3, #10
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003980:	f107 0318 	add.w	r3, r7, #24
 8003984:	4619      	mov	r1, r3
 8003986:	4806      	ldr	r0, [pc, #24]	; (80039a0 <MX_SPI1_Init+0xa0>)
 8003988:	f7fe f851 	bl	8001a2e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800398c:	2100      	movs	r1, #0
 800398e:	4804      	ldr	r0, [pc, #16]	; (80039a0 <MX_SPI1_Init+0xa0>)
 8003990:	f7ff ff5b 	bl	800384a <LL_SPI_SetStandard>

}
 8003994:	bf00      	nop
 8003996:	3740      	adds	r7, #64	; 0x40
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40020000 	.word	0x40020000
 80039a0:	40013000 	.word	0x40013000

080039a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b090      	sub	sp, #64	; 0x40
 80039a8:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80039aa:	f107 0318 	add.w	r3, r7, #24
 80039ae:	2228      	movs	r2, #40	; 0x28
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fd0a 	bl	80043cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	463b      	mov	r3, r7
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80039c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039cc:	f7ff ff68 	bl	80038a0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80039d0:	2002      	movs	r0, #2
 80039d2:	f7ff ff4d 	bl	8003870 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80039d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80039da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039dc:	2302      	movs	r3, #2
 80039de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80039ec:	2305      	movs	r3, #5
 80039ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f0:	463b      	mov	r3, r7
 80039f2:	4619      	mov	r1, r3
 80039f4:	4813      	ldr	r0, [pc, #76]	; (8003a44 <MX_SPI2_Init+0xa0>)
 80039f6:	f7fd fe42 	bl	800167e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80039fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a02:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003a16:	2318      	movs	r3, #24
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003a22:	230a      	movs	r3, #10
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003a26:	f107 0318 	add.w	r3, r7, #24
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4806      	ldr	r0, [pc, #24]	; (8003a48 <MX_SPI2_Init+0xa4>)
 8003a2e:	f7fd fffe 	bl	8001a2e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003a32:	2100      	movs	r1, #0
 8003a34:	4804      	ldr	r0, [pc, #16]	; (8003a48 <MX_SPI2_Init+0xa4>)
 8003a36:	f7ff ff08 	bl	800384a <LL_SPI_SetStandard>

}
 8003a3a:	bf00      	nop
 8003a3c:	3740      	adds	r7, #64	; 0x40
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40003800 	.word	0x40003800

08003a4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b090      	sub	sp, #64	; 0x40
 8003a50:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003a52:	f107 0318 	add.w	r3, r7, #24
 8003a56:	2228      	movs	r2, #40	; 0x28
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fcb6 	bl	80043cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	463b      	mov	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003a70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a74:	f7ff ff14 	bl	80038a0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003a78:	2002      	movs	r0, #2
 8003a7a:	f7ff fef9 	bl	8003870 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003a7e:	2338      	movs	r3, #56	; 0x38
 8003a80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a82:	2302      	movs	r3, #2
 8003a84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003a92:	2306      	movs	r3, #6
 8003a94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a96:	463b      	mov	r3, r7
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4813      	ldr	r0, [pc, #76]	; (8003ae8 <MX_SPI3_Init+0x9c>)
 8003a9c:	f7fd fdef 	bl	800167e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003aa4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003aa8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003abc:	2308      	movs	r3, #8
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003ac8:	230a      	movs	r3, #10
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003acc:	f107 0318 	add.w	r3, r7, #24
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4806      	ldr	r0, [pc, #24]	; (8003aec <MX_SPI3_Init+0xa0>)
 8003ad4:	f7fd ffab 	bl	8001a2e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4804      	ldr	r0, [pc, #16]	; (8003aec <MX_SPI3_Init+0xa0>)
 8003adc:	f7ff feb5 	bl	800384a <LL_SPI_SetStandard>

}
 8003ae0:	bf00      	nop
 8003ae2:	3740      	adds	r7, #64	; 0x40
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	40003c00 	.word	0x40003c00

08003af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_MspInit+0x4c>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <HAL_MspInit+0x4c>)
 8003b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b04:	6453      	str	r3, [r2, #68]	; 0x44
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_MspInit+0x4c>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_MspInit+0x4c>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <HAL_MspInit+0x4c>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6413      	str	r3, [r2, #64]	; 0x40
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_MspInit+0x4c>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800

08003b40 <LL_USART_IsActiveFlag_RXNE>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_USART_ClearFlag_RXNE>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f06f 0220 	mvn.w	r2, #32
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_USART_ReceiveData8>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	b2db      	uxtb	r3, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_USART_TransmitData8>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <HardFault_Handler+0x4>

08003bce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <MemManage_Handler+0x4>

08003bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <BusFault_Handler+0x4>

08003bda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bde:	e7fe      	b.n	8003bde <UsageFault_Handler+0x4>

08003be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0e:	f7fc ff0d 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8003c1c:	480d      	ldr	r0, [pc, #52]	; (8003c54 <USART6_IRQHandler+0x3c>)
 8003c1e:	f7ff ff8f 	bl	8003b40 <LL_USART_IsActiveFlag_RXNE>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d012      	beq.n	8003c4e <USART6_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8003c28:	480a      	ldr	r0, [pc, #40]	; (8003c54 <USART6_IRQHandler+0x3c>)
 8003c2a:	f7ff ff9c 	bl	8003b66 <LL_USART_ClearFlag_RXNE>
		usart6_rx_data = LL_USART_ReceiveData8(USART6);
 8003c2e:	4809      	ldr	r0, [pc, #36]	; (8003c54 <USART6_IRQHandler+0x3c>)
 8003c30:	f7ff ffa7 	bl	8003b82 <LL_USART_ReceiveData8>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <USART6_IRQHandler+0x40>)
 8003c3a:	701a      	strb	r2, [r3, #0]
		LL_USART_TransmitData8(USART6, usart6_rx_data);
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <USART6_IRQHandler+0x40>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	4804      	ldr	r0, [pc, #16]	; (8003c54 <USART6_IRQHandler+0x3c>)
 8003c44:	f7ff ffaa 	bl	8003b9c <LL_USART_TransmitData8>
		usart6_rx_flag = 1;
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <USART6_IRQHandler+0x44>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40011400 	.word	0x40011400
 8003c58:	200001a0 	.word	0x200001a0
 8003c5c:	200001a1 	.word	0x200001a1

08003c60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e00a      	b.n	8003c88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c72:	f3af 8000 	nop.w
 8003c76:	4601      	mov	r1, r0
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	60ba      	str	r2, [r7, #8]
 8003c7e:	b2ca      	uxtb	r2, r1
 8003c80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	dbf0      	blt.n	8003c72 <_read+0x12>
	}

return len;
 8003c90:	687b      	ldr	r3, [r7, #4]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_isatty>:

int _isatty(int file)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <_sbrk+0x50>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <_sbrk+0x16>
		heap_end = &end;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <_sbrk+0x50>)
 8003d16:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <_sbrk+0x54>)
 8003d18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <_sbrk+0x50>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <_sbrk+0x50>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	466a      	mov	r2, sp
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d907      	bls.n	8003d3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d2e:	f000 fb23 	bl	8004378 <__errno>
 8003d32:	4602      	mov	r2, r0
 8003d34:	230c      	movs	r3, #12
 8003d36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	e006      	b.n	8003d4c <_sbrk+0x48>
	}

	heap_end += incr;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <_sbrk+0x50>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <_sbrk+0x50>)
 8003d48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000098 	.word	0x20000098
 8003d58:	200001a8 	.word	0x200001a8

08003d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <SystemInit+0x60>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <SystemInit+0x60>)
 8003d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d70:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <SystemInit+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <SystemInit+0x64>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <SystemInit+0x64>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <SystemInit+0x64>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <SystemInit+0x64>)
 8003d88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <SystemInit+0x64>)
 8003d94:	4a0b      	ldr	r2, [pc, #44]	; (8003dc4 <SystemInit+0x68>)
 8003d96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <SystemInit+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <SystemInit+0x64>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <SystemInit+0x64>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <SystemInit+0x60>)
 8003dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db0:	609a      	str	r2, [r3, #8]
#endif
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	24003010 	.word	0x24003010

08003dc8 <LL_TIM_EnableARRPreload>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_TIM_OC_EnableFast>:
{
 8003de8:	b4b0      	push	{r4, r5, r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d01c      	beq.n	8003e32 <LL_TIM_OC_EnableFast+0x4a>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d017      	beq.n	8003e2e <LL_TIM_OC_EnableFast+0x46>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d012      	beq.n	8003e2a <LL_TIM_OC_EnableFast+0x42>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d00d      	beq.n	8003e26 <LL_TIM_OC_EnableFast+0x3e>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d007      	beq.n	8003e22 <LL_TIM_OC_EnableFast+0x3a>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e18:	d101      	bne.n	8003e1e <LL_TIM_OC_EnableFast+0x36>
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	e00a      	b.n	8003e34 <LL_TIM_OC_EnableFast+0x4c>
 8003e1e:	2306      	movs	r3, #6
 8003e20:	e008      	b.n	8003e34 <LL_TIM_OC_EnableFast+0x4c>
 8003e22:	2304      	movs	r3, #4
 8003e24:	e006      	b.n	8003e34 <LL_TIM_OC_EnableFast+0x4c>
 8003e26:	2303      	movs	r3, #3
 8003e28:	e004      	b.n	8003e34 <LL_TIM_OC_EnableFast+0x4c>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e002      	b.n	8003e34 <LL_TIM_OC_EnableFast+0x4c>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <LL_TIM_OC_EnableFast+0x4c>
 8003e32:	2300      	movs	r3, #0
 8003e34:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3318      	adds	r3, #24
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <LL_TIM_OC_EnableFast+0x7c>)
 8003e40:	5c5b      	ldrb	r3, [r3, r1]
 8003e42:	4413      	add	r3, r2
 8003e44:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <LL_TIM_OC_EnableFast+0x80>)
 8003e4c:	5c5b      	ldrb	r3, [r3, r1]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	2304      	movs	r3, #4
 8003e52:	408b      	lsls	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	6023      	str	r3, [r4, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bcb0      	pop	{r4, r5, r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	08005e2c 	.word	0x08005e2c
 8003e68:	08005e34 	.word	0x08005e34

08003e6c <LL_TIM_OC_EnablePreload>:
{
 8003e6c:	b4b0      	push	{r4, r5, r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d01c      	beq.n	8003eb6 <LL_TIM_OC_EnablePreload+0x4a>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d017      	beq.n	8003eb2 <LL_TIM_OC_EnablePreload+0x46>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d012      	beq.n	8003eae <LL_TIM_OC_EnablePreload+0x42>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d00d      	beq.n	8003eaa <LL_TIM_OC_EnablePreload+0x3e>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d007      	beq.n	8003ea6 <LL_TIM_OC_EnablePreload+0x3a>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d101      	bne.n	8003ea2 <LL_TIM_OC_EnablePreload+0x36>
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	e00a      	b.n	8003eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8003ea2:	2306      	movs	r3, #6
 8003ea4:	e008      	b.n	8003eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	e006      	b.n	8003eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e004      	b.n	8003eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e002      	b.n	8003eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <LL_TIM_OC_EnablePreload+0x7c>)
 8003ec4:	5c5b      	ldrb	r3, [r3, r1]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <LL_TIM_OC_EnablePreload+0x80>)
 8003ed0:	5c5b      	ldrb	r3, [r3, r1]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	408b      	lsls	r3, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	6023      	str	r3, [r4, #0]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bcb0      	pop	{r4, r5, r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	08005e2c 	.word	0x08005e2c
 8003eec:	08005e34 	.word	0x08005e34

08003ef0 <LL_TIM_SetClockSource>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_TIM_SetTriggerOutput>:
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_TIM_DisableMasterSlaveMode>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_AHB1_GRP1_EnableClock>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6c:	4907      	ldr	r1, [pc, #28]	; (8003f8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40023800 	.word	0x40023800

08003f90 <LL_APB1_GRP1_EnableClock>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8003f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9c:	4907      	ldr	r1, [pc, #28]	; (8003fbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8003fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4013      	ands	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003fae:	68fb      	ldr	r3, [r7, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b094      	sub	sp, #80	; 0x50
 8003fc4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003fd6:	f107 031c 	add.w	r3, r7, #28
 8003fda:	2220      	movs	r2, #32
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f9f4 	bl	80043cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	f7ff ffcb 	bl	8003f90 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 8003ffa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003ffe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004000:	2300      	movs	r3, #0
 8004002:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8004004:	2314      	movs	r3, #20
 8004006:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004008:	2300      	movs	r3, #0
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800400c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004010:	4619      	mov	r1, r3
 8004012:	4822      	ldr	r0, [pc, #136]	; (800409c <MX_TIM3_Init+0xdc>)
 8004014:	f7fd fdd0 	bl	8001bb8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8004018:	4820      	ldr	r0, [pc, #128]	; (800409c <MX_TIM3_Init+0xdc>)
 800401a:	f7ff fed5 	bl	8003dc8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800401e:	2100      	movs	r1, #0
 8004020:	481e      	ldr	r0, [pc, #120]	; (800409c <MX_TIM3_Init+0xdc>)
 8004022:	f7ff ff65 	bl	8003ef0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8004026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800402a:	481c      	ldr	r0, [pc, #112]	; (800409c <MX_TIM3_Init+0xdc>)
 800402c:	f7ff ff1e 	bl	8003e6c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004030:	2360      	movs	r3, #96	; 0x60
 8004032:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800403c:	230a      	movs	r3, #10
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	461a      	mov	r2, r3
 800404a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800404e:	4813      	ldr	r0, [pc, #76]	; (800409c <MX_TIM3_Init+0xdc>)
 8004050:	f7fd fe4c 	bl	8001cec <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004058:	4810      	ldr	r0, [pc, #64]	; (800409c <MX_TIM3_Init+0xdc>)
 800405a:	f7ff fec5 	bl	8003de8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800405e:	2100      	movs	r1, #0
 8004060:	480e      	ldr	r0, [pc, #56]	; (800409c <MX_TIM3_Init+0xdc>)
 8004062:	f7ff ff5a 	bl	8003f1a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004066:	480d      	ldr	r0, [pc, #52]	; (800409c <MX_TIM3_Init+0xdc>)
 8004068:	f7ff ff6a 	bl	8003f40 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800406c:	2002      	movs	r0, #2
 800406e:	f7ff ff77 	bl	8003f60 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8004072:	2302      	movs	r3, #2
 8004074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004076:	2302      	movs	r3, #2
 8004078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004086:	2302      	movs	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4804      	ldr	r0, [pc, #16]	; (80040a0 <MX_TIM3_Init+0xe0>)
 8004090:	f7fd faf5 	bl	800167e <LL_GPIO_Init>

}
 8004094:	bf00      	nop
 8004096:	3750      	adds	r7, #80	; 0x50
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40000400 	.word	0x40000400
 80040a0:	40020400 	.word	0x40020400

080040a4 <__NVIC_GetPriorityGrouping>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	; (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_SetPriority>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	; (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	; 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_USART_Enable>:
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60da      	str	r2, [r3, #12]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_USART_ConfigAsyncMode>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	615a      	str	r2, [r3, #20]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <LL_AHB1_GRP1_EnableClock>:
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	4907      	ldr	r1, [pc, #28]	; (8004230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4313      	orrs	r3, r2
 8004216:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800421a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40023800 	.word	0x40023800

08004234 <LL_APB2_GRP1_EnableClock>:
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <LL_APB2_GRP1_EnableClock+0x2c>)
 800423e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004240:	4907      	ldr	r1, [pc, #28]	; (8004260 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4313      	orrs	r3, r2
 8004246:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <LL_APB2_GRP1_EnableClock+0x2c>)
 800424a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4013      	ands	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40023800 	.word	0x40023800

08004264 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	; 0x38
 8004268:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800426a:	f107 031c 	add.w	r3, r7, #28
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	611a      	str	r2, [r3, #16]
 800427a:	615a      	str	r2, [r3, #20]
 800427c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
 800428c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800428e:	2020      	movs	r0, #32
 8004290:	f7ff ffd0 	bl	8004234 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004294:	2004      	movs	r0, #4
 8004296:	f7ff ffb5 	bl	8004204 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800429a:	23c0      	movs	r3, #192	; 0xc0
 800429c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800429e:	2302      	movs	r3, #2
 80042a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80042a2:	2303      	movs	r3, #3
 80042a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80042ae:	2308      	movs	r3, #8
 80042b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4819      	ldr	r0, [pc, #100]	; (800431c <MX_USART6_UART_Init+0xb8>)
 80042b8:	f7fd f9e1 	bl	800167e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80042bc:	f7ff fef2 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2200      	movs	r2, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ff42 	bl	8004150 <NVIC_EncodePriority>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4619      	mov	r1, r3
 80042d0:	2047      	movs	r0, #71	; 0x47
 80042d2:	f7ff ff13 	bl	80040fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80042d6:	2047      	movs	r0, #71	; 0x47
 80042d8:	f7ff fef2 	bl	80040c0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 921600;
 80042dc:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80042e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80042ee:	230c      	movs	r3, #12
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80042fa:	f107 031c 	add.w	r3, r7, #28
 80042fe:	4619      	mov	r1, r3
 8004300:	4807      	ldr	r0, [pc, #28]	; (8004320 <MX_USART6_UART_Init+0xbc>)
 8004302:	f7fd ffbf 	bl	8002284 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <MX_USART6_UART_Init+0xbc>)
 8004308:	f7ff ff65 	bl	80041d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800430c:	4804      	ldr	r0, [pc, #16]	; (8004320 <MX_USART6_UART_Init+0xbc>)
 800430e:	f7ff ff52 	bl	80041b6 <LL_USART_Enable>

}
 8004312:	bf00      	nop
 8004314:	3738      	adds	r7, #56	; 0x38
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40020800 	.word	0x40020800
 8004320:	40011400 	.word	0x40011400

08004324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800435c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800432a:	e003      	b.n	8004334 <LoopCopyDataInit>

0800432c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800432e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004332:	3104      	adds	r1, #4

08004334 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004334:	480b      	ldr	r0, [pc, #44]	; (8004364 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800433a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800433c:	d3f6      	bcc.n	800432c <CopyDataInit>
  ldr  r2, =_sbss
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004340:	e002      	b.n	8004348 <LoopFillZerobss>

08004342 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004342:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004344:	f842 3b04 	str.w	r3, [r2], #4

08004348 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800434a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800434c:	d3f9      	bcc.n	8004342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800434e:	f7ff fd05 	bl	8003d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004352:	f000 f817 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004356:	f7ff f95b 	bl	8003610 <main>
  bx  lr    
 800435a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800435c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004360:	08005f08 	.word	0x08005f08
  ldr  r0, =_sdata
 8004364:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004368:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800436c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004370:	200001a8 	.word	0x200001a8

08004374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <ADC_IRQHandler>
	...

08004378 <__errno>:
 8004378:	4b01      	ldr	r3, [pc, #4]	; (8004380 <__errno+0x8>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	2000000c 	.word	0x2000000c

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4e0d      	ldr	r6, [pc, #52]	; (80043bc <__libc_init_array+0x38>)
 8004388:	4c0d      	ldr	r4, [pc, #52]	; (80043c0 <__libc_init_array+0x3c>)
 800438a:	1ba4      	subs	r4, r4, r6
 800438c:	10a4      	asrs	r4, r4, #2
 800438e:	2500      	movs	r5, #0
 8004390:	42a5      	cmp	r5, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	4e0b      	ldr	r6, [pc, #44]	; (80043c4 <__libc_init_array+0x40>)
 8004396:	4c0c      	ldr	r4, [pc, #48]	; (80043c8 <__libc_init_array+0x44>)
 8004398:	f001 fc6e 	bl	8005c78 <_init>
 800439c:	1ba4      	subs	r4, r4, r6
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	2500      	movs	r5, #0
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043ac:	4798      	blx	r3
 80043ae:	3501      	adds	r5, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043b6:	4798      	blx	r3
 80043b8:	3501      	adds	r5, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	08005f00 	.word	0x08005f00
 80043c0:	08005f00 	.word	0x08005f00
 80043c4:	08005f00 	.word	0x08005f00
 80043c8:	08005f04 	.word	0x08005f04

080043cc <memset>:
 80043cc:	4402      	add	r2, r0
 80043ce:	4603      	mov	r3, r0
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d100      	bne.n	80043d6 <memset+0xa>
 80043d4:	4770      	bx	lr
 80043d6:	f803 1b01 	strb.w	r1, [r3], #1
 80043da:	e7f9      	b.n	80043d0 <memset+0x4>

080043dc <iprintf>:
 80043dc:	b40f      	push	{r0, r1, r2, r3}
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <iprintf+0x2c>)
 80043e0:	b513      	push	{r0, r1, r4, lr}
 80043e2:	681c      	ldr	r4, [r3, #0]
 80043e4:	b124      	cbz	r4, 80043f0 <iprintf+0x14>
 80043e6:	69a3      	ldr	r3, [r4, #24]
 80043e8:	b913      	cbnz	r3, 80043f0 <iprintf+0x14>
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 fa22 	bl	8004834 <__sinit>
 80043f0:	ab05      	add	r3, sp, #20
 80043f2:	9a04      	ldr	r2, [sp, #16]
 80043f4:	68a1      	ldr	r1, [r4, #8]
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 fbdb 	bl	8004bb4 <_vfiprintf_r>
 80043fe:	b002      	add	sp, #8
 8004400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004404:	b004      	add	sp, #16
 8004406:	4770      	bx	lr
 8004408:	2000000c 	.word	0x2000000c

0800440c <_puts_r>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	460e      	mov	r6, r1
 8004410:	4605      	mov	r5, r0
 8004412:	b118      	cbz	r0, 800441c <_puts_r+0x10>
 8004414:	6983      	ldr	r3, [r0, #24]
 8004416:	b90b      	cbnz	r3, 800441c <_puts_r+0x10>
 8004418:	f000 fa0c 	bl	8004834 <__sinit>
 800441c:	69ab      	ldr	r3, [r5, #24]
 800441e:	68ac      	ldr	r4, [r5, #8]
 8004420:	b913      	cbnz	r3, 8004428 <_puts_r+0x1c>
 8004422:	4628      	mov	r0, r5
 8004424:	f000 fa06 	bl	8004834 <__sinit>
 8004428:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <_puts_r+0xac>)
 800442a:	429c      	cmp	r4, r3
 800442c:	d117      	bne.n	800445e <_puts_r+0x52>
 800442e:	686c      	ldr	r4, [r5, #4]
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	071b      	lsls	r3, r3, #28
 8004434:	d51d      	bpl.n	8004472 <_puts_r+0x66>
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	b1db      	cbz	r3, 8004472 <_puts_r+0x66>
 800443a:	3e01      	subs	r6, #1
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004442:	3b01      	subs	r3, #1
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	b9e9      	cbnz	r1, 8004484 <_puts_r+0x78>
 8004448:	2b00      	cmp	r3, #0
 800444a:	da2e      	bge.n	80044aa <_puts_r+0x9e>
 800444c:	4622      	mov	r2, r4
 800444e:	210a      	movs	r1, #10
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f83f 	bl	80044d4 <__swbuf_r>
 8004456:	3001      	adds	r0, #1
 8004458:	d011      	beq.n	800447e <_puts_r+0x72>
 800445a:	200a      	movs	r0, #10
 800445c:	e011      	b.n	8004482 <_puts_r+0x76>
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <_puts_r+0xb0>)
 8004460:	429c      	cmp	r4, r3
 8004462:	d101      	bne.n	8004468 <_puts_r+0x5c>
 8004464:	68ac      	ldr	r4, [r5, #8]
 8004466:	e7e3      	b.n	8004430 <_puts_r+0x24>
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <_puts_r+0xb4>)
 800446a:	429c      	cmp	r4, r3
 800446c:	bf08      	it	eq
 800446e:	68ec      	ldreq	r4, [r5, #12]
 8004470:	e7de      	b.n	8004430 <_puts_r+0x24>
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f87f 	bl	8004578 <__swsetup_r>
 800447a:	2800      	cmp	r0, #0
 800447c:	d0dd      	beq.n	800443a <_puts_r+0x2e>
 800447e:	f04f 30ff 	mov.w	r0, #4294967295
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	2b00      	cmp	r3, #0
 8004486:	da04      	bge.n	8004492 <_puts_r+0x86>
 8004488:	69a2      	ldr	r2, [r4, #24]
 800448a:	429a      	cmp	r2, r3
 800448c:	dc06      	bgt.n	800449c <_puts_r+0x90>
 800448e:	290a      	cmp	r1, #10
 8004490:	d004      	beq.n	800449c <_puts_r+0x90>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	6022      	str	r2, [r4, #0]
 8004498:	7019      	strb	r1, [r3, #0]
 800449a:	e7cf      	b.n	800443c <_puts_r+0x30>
 800449c:	4622      	mov	r2, r4
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 f818 	bl	80044d4 <__swbuf_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1c9      	bne.n	800443c <_puts_r+0x30>
 80044a8:	e7e9      	b.n	800447e <_puts_r+0x72>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	200a      	movs	r0, #10
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	7018      	strb	r0, [r3, #0]
 80044b4:	e7e5      	b.n	8004482 <_puts_r+0x76>
 80044b6:	bf00      	nop
 80044b8:	08005e60 	.word	0x08005e60
 80044bc:	08005e80 	.word	0x08005e80
 80044c0:	08005e40 	.word	0x08005e40

080044c4 <puts>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <puts+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f7ff bf9f 	b.w	800440c <_puts_r>
 80044ce:	bf00      	nop
 80044d0:	2000000c 	.word	0x2000000c

080044d4 <__swbuf_r>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	460e      	mov	r6, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	4605      	mov	r5, r0
 80044dc:	b118      	cbz	r0, 80044e6 <__swbuf_r+0x12>
 80044de:	6983      	ldr	r3, [r0, #24]
 80044e0:	b90b      	cbnz	r3, 80044e6 <__swbuf_r+0x12>
 80044e2:	f000 f9a7 	bl	8004834 <__sinit>
 80044e6:	4b21      	ldr	r3, [pc, #132]	; (800456c <__swbuf_r+0x98>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d12a      	bne.n	8004542 <__swbuf_r+0x6e>
 80044ec:	686c      	ldr	r4, [r5, #4]
 80044ee:	69a3      	ldr	r3, [r4, #24]
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	071a      	lsls	r2, r3, #28
 80044f6:	d52e      	bpl.n	8004556 <__swbuf_r+0x82>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	b363      	cbz	r3, 8004556 <__swbuf_r+0x82>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1ac0      	subs	r0, r0, r3
 8004502:	6963      	ldr	r3, [r4, #20]
 8004504:	b2f6      	uxtb	r6, r6
 8004506:	4283      	cmp	r3, r0
 8004508:	4637      	mov	r7, r6
 800450a:	dc04      	bgt.n	8004516 <__swbuf_r+0x42>
 800450c:	4621      	mov	r1, r4
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f926 	bl	8004760 <_fflush_r>
 8004514:	bb28      	cbnz	r0, 8004562 <__swbuf_r+0x8e>
 8004516:	68a3      	ldr	r3, [r4, #8]
 8004518:	3b01      	subs	r3, #1
 800451a:	60a3      	str	r3, [r4, #8]
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	701e      	strb	r6, [r3, #0]
 8004524:	6963      	ldr	r3, [r4, #20]
 8004526:	3001      	adds	r0, #1
 8004528:	4283      	cmp	r3, r0
 800452a:	d004      	beq.n	8004536 <__swbuf_r+0x62>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	07db      	lsls	r3, r3, #31
 8004530:	d519      	bpl.n	8004566 <__swbuf_r+0x92>
 8004532:	2e0a      	cmp	r6, #10
 8004534:	d117      	bne.n	8004566 <__swbuf_r+0x92>
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 f911 	bl	8004760 <_fflush_r>
 800453e:	b190      	cbz	r0, 8004566 <__swbuf_r+0x92>
 8004540:	e00f      	b.n	8004562 <__swbuf_r+0x8e>
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <__swbuf_r+0x9c>)
 8004544:	429c      	cmp	r4, r3
 8004546:	d101      	bne.n	800454c <__swbuf_r+0x78>
 8004548:	68ac      	ldr	r4, [r5, #8]
 800454a:	e7d0      	b.n	80044ee <__swbuf_r+0x1a>
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <__swbuf_r+0xa0>)
 800454e:	429c      	cmp	r4, r3
 8004550:	bf08      	it	eq
 8004552:	68ec      	ldreq	r4, [r5, #12]
 8004554:	e7cb      	b.n	80044ee <__swbuf_r+0x1a>
 8004556:	4621      	mov	r1, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f000 f80d 	bl	8004578 <__swsetup_r>
 800455e:	2800      	cmp	r0, #0
 8004560:	d0cc      	beq.n	80044fc <__swbuf_r+0x28>
 8004562:	f04f 37ff 	mov.w	r7, #4294967295
 8004566:	4638      	mov	r0, r7
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800456a:	bf00      	nop
 800456c:	08005e60 	.word	0x08005e60
 8004570:	08005e80 	.word	0x08005e80
 8004574:	08005e40 	.word	0x08005e40

08004578 <__swsetup_r>:
 8004578:	4b32      	ldr	r3, [pc, #200]	; (8004644 <__swsetup_r+0xcc>)
 800457a:	b570      	push	{r4, r5, r6, lr}
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	4606      	mov	r6, r0
 8004580:	460c      	mov	r4, r1
 8004582:	b125      	cbz	r5, 800458e <__swsetup_r+0x16>
 8004584:	69ab      	ldr	r3, [r5, #24]
 8004586:	b913      	cbnz	r3, 800458e <__swsetup_r+0x16>
 8004588:	4628      	mov	r0, r5
 800458a:	f000 f953 	bl	8004834 <__sinit>
 800458e:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <__swsetup_r+0xd0>)
 8004590:	429c      	cmp	r4, r3
 8004592:	d10f      	bne.n	80045b4 <__swsetup_r+0x3c>
 8004594:	686c      	ldr	r4, [r5, #4]
 8004596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800459a:	b29a      	uxth	r2, r3
 800459c:	0715      	lsls	r5, r2, #28
 800459e:	d42c      	bmi.n	80045fa <__swsetup_r+0x82>
 80045a0:	06d0      	lsls	r0, r2, #27
 80045a2:	d411      	bmi.n	80045c8 <__swsetup_r+0x50>
 80045a4:	2209      	movs	r2, #9
 80045a6:	6032      	str	r2, [r6, #0]
 80045a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295
 80045b2:	e03e      	b.n	8004632 <__swsetup_r+0xba>
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <__swsetup_r+0xd4>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d101      	bne.n	80045be <__swsetup_r+0x46>
 80045ba:	68ac      	ldr	r4, [r5, #8]
 80045bc:	e7eb      	b.n	8004596 <__swsetup_r+0x1e>
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <__swsetup_r+0xd8>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	bf08      	it	eq
 80045c4:	68ec      	ldreq	r4, [r5, #12]
 80045c6:	e7e6      	b.n	8004596 <__swsetup_r+0x1e>
 80045c8:	0751      	lsls	r1, r2, #29
 80045ca:	d512      	bpl.n	80045f2 <__swsetup_r+0x7a>
 80045cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ce:	b141      	cbz	r1, 80045e2 <__swsetup_r+0x6a>
 80045d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d4:	4299      	cmp	r1, r3
 80045d6:	d002      	beq.n	80045de <__swsetup_r+0x66>
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 fa19 	bl	8004a10 <_free_r>
 80045de:	2300      	movs	r3, #0
 80045e0:	6363      	str	r3, [r4, #52]	; 0x34
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b94b      	cbnz	r3, 8004612 <__swsetup_r+0x9a>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d003      	beq.n	8004612 <__swsetup_r+0x9a>
 800460a:	4621      	mov	r1, r4
 800460c:	4630      	mov	r0, r6
 800460e:	f000 f9bf 	bl	8004990 <__smakebuf_r>
 8004612:	89a2      	ldrh	r2, [r4, #12]
 8004614:	f012 0301 	ands.w	r3, r2, #1
 8004618:	d00c      	beq.n	8004634 <__swsetup_r+0xbc>
 800461a:	2300      	movs	r3, #0
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	6963      	ldr	r3, [r4, #20]
 8004620:	425b      	negs	r3, r3
 8004622:	61a3      	str	r3, [r4, #24]
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	b953      	cbnz	r3, 800463e <__swsetup_r+0xc6>
 8004628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800462c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004630:	d1ba      	bne.n	80045a8 <__swsetup_r+0x30>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	0792      	lsls	r2, r2, #30
 8004636:	bf58      	it	pl
 8004638:	6963      	ldrpl	r3, [r4, #20]
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	e7f2      	b.n	8004624 <__swsetup_r+0xac>
 800463e:	2000      	movs	r0, #0
 8004640:	e7f7      	b.n	8004632 <__swsetup_r+0xba>
 8004642:	bf00      	nop
 8004644:	2000000c 	.word	0x2000000c
 8004648:	08005e60 	.word	0x08005e60
 800464c:	08005e80 	.word	0x08005e80
 8004650:	08005e40 	.word	0x08005e40

08004654 <__sflush_r>:
 8004654:	898a      	ldrh	r2, [r1, #12]
 8004656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	4605      	mov	r5, r0
 800465c:	0710      	lsls	r0, r2, #28
 800465e:	460c      	mov	r4, r1
 8004660:	d458      	bmi.n	8004714 <__sflush_r+0xc0>
 8004662:	684b      	ldr	r3, [r1, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	dc05      	bgt.n	8004674 <__sflush_r+0x20>
 8004668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	dc02      	bgt.n	8004674 <__sflush_r+0x20>
 800466e:	2000      	movs	r0, #0
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004676:	2e00      	cmp	r6, #0
 8004678:	d0f9      	beq.n	800466e <__sflush_r+0x1a>
 800467a:	2300      	movs	r3, #0
 800467c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004680:	682f      	ldr	r7, [r5, #0]
 8004682:	6a21      	ldr	r1, [r4, #32]
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	d032      	beq.n	80046ee <__sflush_r+0x9a>
 8004688:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	075a      	lsls	r2, r3, #29
 800468e:	d505      	bpl.n	800469c <__sflush_r+0x48>
 8004690:	6863      	ldr	r3, [r4, #4]
 8004692:	1ac0      	subs	r0, r0, r3
 8004694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004696:	b10b      	cbz	r3, 800469c <__sflush_r+0x48>
 8004698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800469a:	1ac0      	subs	r0, r0, r3
 800469c:	2300      	movs	r3, #0
 800469e:	4602      	mov	r2, r0
 80046a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046a2:	6a21      	ldr	r1, [r4, #32]
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b0      	blx	r6
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	d106      	bne.n	80046bc <__sflush_r+0x68>
 80046ae:	6829      	ldr	r1, [r5, #0]
 80046b0:	291d      	cmp	r1, #29
 80046b2:	d848      	bhi.n	8004746 <__sflush_r+0xf2>
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <__sflush_r+0x108>)
 80046b6:	40ca      	lsrs	r2, r1
 80046b8:	07d6      	lsls	r6, r2, #31
 80046ba:	d544      	bpl.n	8004746 <__sflush_r+0xf2>
 80046bc:	2200      	movs	r2, #0
 80046be:	6062      	str	r2, [r4, #4]
 80046c0:	04d9      	lsls	r1, r3, #19
 80046c2:	6922      	ldr	r2, [r4, #16]
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	d504      	bpl.n	80046d2 <__sflush_r+0x7e>
 80046c8:	1c42      	adds	r2, r0, #1
 80046ca:	d101      	bne.n	80046d0 <__sflush_r+0x7c>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b903      	cbnz	r3, 80046d2 <__sflush_r+0x7e>
 80046d0:	6560      	str	r0, [r4, #84]	; 0x54
 80046d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046d4:	602f      	str	r7, [r5, #0]
 80046d6:	2900      	cmp	r1, #0
 80046d8:	d0c9      	beq.n	800466e <__sflush_r+0x1a>
 80046da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046de:	4299      	cmp	r1, r3
 80046e0:	d002      	beq.n	80046e8 <__sflush_r+0x94>
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f994 	bl	8004a10 <_free_r>
 80046e8:	2000      	movs	r0, #0
 80046ea:	6360      	str	r0, [r4, #52]	; 0x34
 80046ec:	e7c0      	b.n	8004670 <__sflush_r+0x1c>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b0      	blx	r6
 80046f4:	1c41      	adds	r1, r0, #1
 80046f6:	d1c8      	bne.n	800468a <__sflush_r+0x36>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0c5      	beq.n	800468a <__sflush_r+0x36>
 80046fe:	2b1d      	cmp	r3, #29
 8004700:	d001      	beq.n	8004706 <__sflush_r+0xb2>
 8004702:	2b16      	cmp	r3, #22
 8004704:	d101      	bne.n	800470a <__sflush_r+0xb6>
 8004706:	602f      	str	r7, [r5, #0]
 8004708:	e7b1      	b.n	800466e <__sflush_r+0x1a>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	e7ad      	b.n	8004670 <__sflush_r+0x1c>
 8004714:	690f      	ldr	r7, [r1, #16]
 8004716:	2f00      	cmp	r7, #0
 8004718:	d0a9      	beq.n	800466e <__sflush_r+0x1a>
 800471a:	0793      	lsls	r3, r2, #30
 800471c:	680e      	ldr	r6, [r1, #0]
 800471e:	bf08      	it	eq
 8004720:	694b      	ldreq	r3, [r1, #20]
 8004722:	600f      	str	r7, [r1, #0]
 8004724:	bf18      	it	ne
 8004726:	2300      	movne	r3, #0
 8004728:	eba6 0807 	sub.w	r8, r6, r7
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	dd9c      	ble.n	800466e <__sflush_r+0x1a>
 8004734:	4643      	mov	r3, r8
 8004736:	463a      	mov	r2, r7
 8004738:	6a21      	ldr	r1, [r4, #32]
 800473a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800473c:	4628      	mov	r0, r5
 800473e:	47b0      	blx	r6
 8004740:	2800      	cmp	r0, #0
 8004742:	dc06      	bgt.n	8004752 <__sflush_r+0xfe>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	e78e      	b.n	8004670 <__sflush_r+0x1c>
 8004752:	4407      	add	r7, r0
 8004754:	eba8 0800 	sub.w	r8, r8, r0
 8004758:	e7e9      	b.n	800472e <__sflush_r+0xda>
 800475a:	bf00      	nop
 800475c:	20400001 	.word	0x20400001

08004760 <_fflush_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	690b      	ldr	r3, [r1, #16]
 8004764:	4605      	mov	r5, r0
 8004766:	460c      	mov	r4, r1
 8004768:	b1db      	cbz	r3, 80047a2 <_fflush_r+0x42>
 800476a:	b118      	cbz	r0, 8004774 <_fflush_r+0x14>
 800476c:	6983      	ldr	r3, [r0, #24]
 800476e:	b90b      	cbnz	r3, 8004774 <_fflush_r+0x14>
 8004770:	f000 f860 	bl	8004834 <__sinit>
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <_fflush_r+0x48>)
 8004776:	429c      	cmp	r4, r3
 8004778:	d109      	bne.n	800478e <_fflush_r+0x2e>
 800477a:	686c      	ldr	r4, [r5, #4]
 800477c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004780:	b17b      	cbz	r3, 80047a2 <_fflush_r+0x42>
 8004782:	4621      	mov	r1, r4
 8004784:	4628      	mov	r0, r5
 8004786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800478a:	f7ff bf63 	b.w	8004654 <__sflush_r>
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <_fflush_r+0x4c>)
 8004790:	429c      	cmp	r4, r3
 8004792:	d101      	bne.n	8004798 <_fflush_r+0x38>
 8004794:	68ac      	ldr	r4, [r5, #8]
 8004796:	e7f1      	b.n	800477c <_fflush_r+0x1c>
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <_fflush_r+0x50>)
 800479a:	429c      	cmp	r4, r3
 800479c:	bf08      	it	eq
 800479e:	68ec      	ldreq	r4, [r5, #12]
 80047a0:	e7ec      	b.n	800477c <_fflush_r+0x1c>
 80047a2:	2000      	movs	r0, #0
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
 80047a6:	bf00      	nop
 80047a8:	08005e60 	.word	0x08005e60
 80047ac:	08005e80 	.word	0x08005e80
 80047b0:	08005e40 	.word	0x08005e40

080047b4 <std>:
 80047b4:	2300      	movs	r3, #0
 80047b6:	b510      	push	{r4, lr}
 80047b8:	4604      	mov	r4, r0
 80047ba:	e9c0 3300 	strd	r3, r3, [r0]
 80047be:	6083      	str	r3, [r0, #8]
 80047c0:	8181      	strh	r1, [r0, #12]
 80047c2:	6643      	str	r3, [r0, #100]	; 0x64
 80047c4:	81c2      	strh	r2, [r0, #14]
 80047c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ca:	6183      	str	r3, [r0, #24]
 80047cc:	4619      	mov	r1, r3
 80047ce:	2208      	movs	r2, #8
 80047d0:	305c      	adds	r0, #92	; 0x5c
 80047d2:	f7ff fdfb 	bl	80043cc <memset>
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <std+0x38>)
 80047d8:	6263      	str	r3, [r4, #36]	; 0x24
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <std+0x3c>)
 80047dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <std+0x40>)
 80047e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <std+0x44>)
 80047e4:	6224      	str	r4, [r4, #32]
 80047e6:	6323      	str	r3, [r4, #48]	; 0x30
 80047e8:	bd10      	pop	{r4, pc}
 80047ea:	bf00      	nop
 80047ec:	08005111 	.word	0x08005111
 80047f0:	08005133 	.word	0x08005133
 80047f4:	0800516b 	.word	0x0800516b
 80047f8:	0800518f 	.word	0x0800518f

080047fc <_cleanup_r>:
 80047fc:	4901      	ldr	r1, [pc, #4]	; (8004804 <_cleanup_r+0x8>)
 80047fe:	f000 b885 	b.w	800490c <_fwalk_reent>
 8004802:	bf00      	nop
 8004804:	08004761 	.word	0x08004761

08004808 <__sfmoreglue>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	1e4a      	subs	r2, r1, #1
 800480c:	2568      	movs	r5, #104	; 0x68
 800480e:	4355      	muls	r5, r2
 8004810:	460e      	mov	r6, r1
 8004812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004816:	f000 f949 	bl	8004aac <_malloc_r>
 800481a:	4604      	mov	r4, r0
 800481c:	b140      	cbz	r0, 8004830 <__sfmoreglue+0x28>
 800481e:	2100      	movs	r1, #0
 8004820:	e9c0 1600 	strd	r1, r6, [r0]
 8004824:	300c      	adds	r0, #12
 8004826:	60a0      	str	r0, [r4, #8]
 8004828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800482c:	f7ff fdce 	bl	80043cc <memset>
 8004830:	4620      	mov	r0, r4
 8004832:	bd70      	pop	{r4, r5, r6, pc}

08004834 <__sinit>:
 8004834:	6983      	ldr	r3, [r0, #24]
 8004836:	b510      	push	{r4, lr}
 8004838:	4604      	mov	r4, r0
 800483a:	bb33      	cbnz	r3, 800488a <__sinit+0x56>
 800483c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004840:	6503      	str	r3, [r0, #80]	; 0x50
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <__sinit+0x58>)
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <__sinit+0x5c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6282      	str	r2, [r0, #40]	; 0x28
 800484a:	4298      	cmp	r0, r3
 800484c:	bf04      	itt	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	6183      	streq	r3, [r0, #24]
 8004852:	f000 f81f 	bl	8004894 <__sfp>
 8004856:	6060      	str	r0, [r4, #4]
 8004858:	4620      	mov	r0, r4
 800485a:	f000 f81b 	bl	8004894 <__sfp>
 800485e:	60a0      	str	r0, [r4, #8]
 8004860:	4620      	mov	r0, r4
 8004862:	f000 f817 	bl	8004894 <__sfp>
 8004866:	2200      	movs	r2, #0
 8004868:	60e0      	str	r0, [r4, #12]
 800486a:	2104      	movs	r1, #4
 800486c:	6860      	ldr	r0, [r4, #4]
 800486e:	f7ff ffa1 	bl	80047b4 <std>
 8004872:	2201      	movs	r2, #1
 8004874:	2109      	movs	r1, #9
 8004876:	68a0      	ldr	r0, [r4, #8]
 8004878:	f7ff ff9c 	bl	80047b4 <std>
 800487c:	2202      	movs	r2, #2
 800487e:	2112      	movs	r1, #18
 8004880:	68e0      	ldr	r0, [r4, #12]
 8004882:	f7ff ff97 	bl	80047b4 <std>
 8004886:	2301      	movs	r3, #1
 8004888:	61a3      	str	r3, [r4, #24]
 800488a:	bd10      	pop	{r4, pc}
 800488c:	08005e3c 	.word	0x08005e3c
 8004890:	080047fd 	.word	0x080047fd

08004894 <__sfp>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <__sfp+0x70>)
 8004898:	681e      	ldr	r6, [r3, #0]
 800489a:	69b3      	ldr	r3, [r6, #24]
 800489c:	4607      	mov	r7, r0
 800489e:	b913      	cbnz	r3, 80048a6 <__sfp+0x12>
 80048a0:	4630      	mov	r0, r6
 80048a2:	f7ff ffc7 	bl	8004834 <__sinit>
 80048a6:	3648      	adds	r6, #72	; 0x48
 80048a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	d503      	bpl.n	80048b8 <__sfp+0x24>
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	b133      	cbz	r3, 80048c2 <__sfp+0x2e>
 80048b4:	6836      	ldr	r6, [r6, #0]
 80048b6:	e7f7      	b.n	80048a8 <__sfp+0x14>
 80048b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048bc:	b16d      	cbz	r5, 80048da <__sfp+0x46>
 80048be:	3468      	adds	r4, #104	; 0x68
 80048c0:	e7f4      	b.n	80048ac <__sfp+0x18>
 80048c2:	2104      	movs	r1, #4
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff ff9f 	bl	8004808 <__sfmoreglue>
 80048ca:	6030      	str	r0, [r6, #0]
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1f1      	bne.n	80048b4 <__sfp+0x20>
 80048d0:	230c      	movs	r3, #12
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4604      	mov	r4, r0
 80048d6:	4620      	mov	r0, r4
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <__sfp+0x74>)
 80048dc:	6665      	str	r5, [r4, #100]	; 0x64
 80048de:	e9c4 5500 	strd	r5, r5, [r4]
 80048e2:	60a5      	str	r5, [r4, #8]
 80048e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80048e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80048ec:	2208      	movs	r2, #8
 80048ee:	4629      	mov	r1, r5
 80048f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048f4:	f7ff fd6a 	bl	80043cc <memset>
 80048f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004900:	e7e9      	b.n	80048d6 <__sfp+0x42>
 8004902:	bf00      	nop
 8004904:	08005e3c 	.word	0x08005e3c
 8004908:	ffff0001 	.word	0xffff0001

0800490c <_fwalk_reent>:
 800490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004910:	4680      	mov	r8, r0
 8004912:	4689      	mov	r9, r1
 8004914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004918:	2600      	movs	r6, #0
 800491a:	b914      	cbnz	r4, 8004922 <_fwalk_reent+0x16>
 800491c:	4630      	mov	r0, r6
 800491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004922:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004926:	3f01      	subs	r7, #1
 8004928:	d501      	bpl.n	800492e <_fwalk_reent+0x22>
 800492a:	6824      	ldr	r4, [r4, #0]
 800492c:	e7f5      	b.n	800491a <_fwalk_reent+0xe>
 800492e:	89ab      	ldrh	r3, [r5, #12]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d907      	bls.n	8004944 <_fwalk_reent+0x38>
 8004934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004938:	3301      	adds	r3, #1
 800493a:	d003      	beq.n	8004944 <_fwalk_reent+0x38>
 800493c:	4629      	mov	r1, r5
 800493e:	4640      	mov	r0, r8
 8004940:	47c8      	blx	r9
 8004942:	4306      	orrs	r6, r0
 8004944:	3568      	adds	r5, #104	; 0x68
 8004946:	e7ee      	b.n	8004926 <_fwalk_reent+0x1a>

08004948 <__swhatbuf_r>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	460e      	mov	r6, r1
 800494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004950:	2900      	cmp	r1, #0
 8004952:	b096      	sub	sp, #88	; 0x58
 8004954:	4614      	mov	r4, r2
 8004956:	461d      	mov	r5, r3
 8004958:	da07      	bge.n	800496a <__swhatbuf_r+0x22>
 800495a:	2300      	movs	r3, #0
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	89b3      	ldrh	r3, [r6, #12]
 8004960:	061a      	lsls	r2, r3, #24
 8004962:	d410      	bmi.n	8004986 <__swhatbuf_r+0x3e>
 8004964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004968:	e00e      	b.n	8004988 <__swhatbuf_r+0x40>
 800496a:	466a      	mov	r2, sp
 800496c:	f000 fc36 	bl	80051dc <_fstat_r>
 8004970:	2800      	cmp	r0, #0
 8004972:	dbf2      	blt.n	800495a <__swhatbuf_r+0x12>
 8004974:	9a01      	ldr	r2, [sp, #4]
 8004976:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800497a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800497e:	425a      	negs	r2, r3
 8004980:	415a      	adcs	r2, r3
 8004982:	602a      	str	r2, [r5, #0]
 8004984:	e7ee      	b.n	8004964 <__swhatbuf_r+0x1c>
 8004986:	2340      	movs	r3, #64	; 0x40
 8004988:	2000      	movs	r0, #0
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	b016      	add	sp, #88	; 0x58
 800498e:	bd70      	pop	{r4, r5, r6, pc}

08004990 <__smakebuf_r>:
 8004990:	898b      	ldrh	r3, [r1, #12]
 8004992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004994:	079d      	lsls	r5, r3, #30
 8004996:	4606      	mov	r6, r0
 8004998:	460c      	mov	r4, r1
 800499a:	d507      	bpl.n	80049ac <__smakebuf_r+0x1c>
 800499c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	6123      	str	r3, [r4, #16]
 80049a4:	2301      	movs	r3, #1
 80049a6:	6163      	str	r3, [r4, #20]
 80049a8:	b002      	add	sp, #8
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	ab01      	add	r3, sp, #4
 80049ae:	466a      	mov	r2, sp
 80049b0:	f7ff ffca 	bl	8004948 <__swhatbuf_r>
 80049b4:	9900      	ldr	r1, [sp, #0]
 80049b6:	4605      	mov	r5, r0
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f877 	bl	8004aac <_malloc_r>
 80049be:	b948      	cbnz	r0, 80049d4 <__smakebuf_r+0x44>
 80049c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c4:	059a      	lsls	r2, r3, #22
 80049c6:	d4ef      	bmi.n	80049a8 <__smakebuf_r+0x18>
 80049c8:	f023 0303 	bic.w	r3, r3, #3
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	e7e3      	b.n	800499c <__smakebuf_r+0xc>
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <__smakebuf_r+0x7c>)
 80049d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	6020      	str	r0, [r4, #0]
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	6163      	str	r3, [r4, #20]
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	6120      	str	r0, [r4, #16]
 80049ea:	b15b      	cbz	r3, 8004a04 <__smakebuf_r+0x74>
 80049ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 fc05 	bl	8005200 <_isatty_r>
 80049f6:	b128      	cbz	r0, 8004a04 <__smakebuf_r+0x74>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	431d      	orrs	r5, r3
 8004a08:	81a5      	strh	r5, [r4, #12]
 8004a0a:	e7cd      	b.n	80049a8 <__smakebuf_r+0x18>
 8004a0c:	080047fd 	.word	0x080047fd

08004a10 <_free_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d045      	beq.n	8004aa4 <_free_r+0x94>
 8004a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1c:	1f0c      	subs	r4, r1, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	18e4      	addlt	r4, r4, r3
 8004a24:	f000 fc0e 	bl	8005244 <__malloc_lock>
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <_free_r+0x98>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	b933      	cbnz	r3, 8004a3e <_free_r+0x2e>
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	6014      	str	r4, [r2, #0]
 8004a34:	4628      	mov	r0, r5
 8004a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a3a:	f000 bc04 	b.w	8005246 <__malloc_unlock>
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	d90c      	bls.n	8004a5c <_free_r+0x4c>
 8004a42:	6821      	ldr	r1, [r4, #0]
 8004a44:	1862      	adds	r2, r4, r1
 8004a46:	4293      	cmp	r3, r2
 8004a48:	bf04      	itt	eq
 8004a4a:	681a      	ldreq	r2, [r3, #0]
 8004a4c:	685b      	ldreq	r3, [r3, #4]
 8004a4e:	6063      	str	r3, [r4, #4]
 8004a50:	bf04      	itt	eq
 8004a52:	1852      	addeq	r2, r2, r1
 8004a54:	6022      	streq	r2, [r4, #0]
 8004a56:	6004      	str	r4, [r0, #0]
 8004a58:	e7ec      	b.n	8004a34 <_free_r+0x24>
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	b10a      	cbz	r2, 8004a64 <_free_r+0x54>
 8004a60:	42a2      	cmp	r2, r4
 8004a62:	d9fa      	bls.n	8004a5a <_free_r+0x4a>
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	1858      	adds	r0, r3, r1
 8004a68:	42a0      	cmp	r0, r4
 8004a6a:	d10b      	bne.n	8004a84 <_free_r+0x74>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	4401      	add	r1, r0
 8004a70:	1858      	adds	r0, r3, r1
 8004a72:	4282      	cmp	r2, r0
 8004a74:	6019      	str	r1, [r3, #0]
 8004a76:	d1dd      	bne.n	8004a34 <_free_r+0x24>
 8004a78:	6810      	ldr	r0, [r2, #0]
 8004a7a:	6852      	ldr	r2, [r2, #4]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	4401      	add	r1, r0
 8004a80:	6019      	str	r1, [r3, #0]
 8004a82:	e7d7      	b.n	8004a34 <_free_r+0x24>
 8004a84:	d902      	bls.n	8004a8c <_free_r+0x7c>
 8004a86:	230c      	movs	r3, #12
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	e7d3      	b.n	8004a34 <_free_r+0x24>
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	1821      	adds	r1, r4, r0
 8004a90:	428a      	cmp	r2, r1
 8004a92:	bf04      	itt	eq
 8004a94:	6811      	ldreq	r1, [r2, #0]
 8004a96:	6852      	ldreq	r2, [r2, #4]
 8004a98:	6062      	str	r2, [r4, #4]
 8004a9a:	bf04      	itt	eq
 8004a9c:	1809      	addeq	r1, r1, r0
 8004a9e:	6021      	streq	r1, [r4, #0]
 8004aa0:	605c      	str	r4, [r3, #4]
 8004aa2:	e7c7      	b.n	8004a34 <_free_r+0x24>
 8004aa4:	bd38      	pop	{r3, r4, r5, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000009c 	.word	0x2000009c

08004aac <_malloc_r>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	1ccd      	adds	r5, r1, #3
 8004ab0:	f025 0503 	bic.w	r5, r5, #3
 8004ab4:	3508      	adds	r5, #8
 8004ab6:	2d0c      	cmp	r5, #12
 8004ab8:	bf38      	it	cc
 8004aba:	250c      	movcc	r5, #12
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	4606      	mov	r6, r0
 8004ac0:	db01      	blt.n	8004ac6 <_malloc_r+0x1a>
 8004ac2:	42a9      	cmp	r1, r5
 8004ac4:	d903      	bls.n	8004ace <_malloc_r+0x22>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	6033      	str	r3, [r6, #0]
 8004aca:	2000      	movs	r0, #0
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	f000 fbb9 	bl	8005244 <__malloc_lock>
 8004ad2:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <_malloc_r+0xac>)
 8004ad4:	6814      	ldr	r4, [r2, #0]
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	b991      	cbnz	r1, 8004b00 <_malloc_r+0x54>
 8004ada:	4c20      	ldr	r4, [pc, #128]	; (8004b5c <_malloc_r+0xb0>)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	b91b      	cbnz	r3, 8004ae8 <_malloc_r+0x3c>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 fb05 	bl	80050f0 <_sbrk_r>
 8004ae6:	6020      	str	r0, [r4, #0]
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 fb00 	bl	80050f0 <_sbrk_r>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d124      	bne.n	8004b3e <_malloc_r+0x92>
 8004af4:	230c      	movs	r3, #12
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 fba4 	bl	8005246 <__malloc_unlock>
 8004afe:	e7e4      	b.n	8004aca <_malloc_r+0x1e>
 8004b00:	680b      	ldr	r3, [r1, #0]
 8004b02:	1b5b      	subs	r3, r3, r5
 8004b04:	d418      	bmi.n	8004b38 <_malloc_r+0x8c>
 8004b06:	2b0b      	cmp	r3, #11
 8004b08:	d90f      	bls.n	8004b2a <_malloc_r+0x7e>
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	50cd      	str	r5, [r1, r3]
 8004b0e:	18cc      	adds	r4, r1, r3
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 fb98 	bl	8005246 <__malloc_unlock>
 8004b16:	f104 000b 	add.w	r0, r4, #11
 8004b1a:	1d23      	adds	r3, r4, #4
 8004b1c:	f020 0007 	bic.w	r0, r0, #7
 8004b20:	1ac3      	subs	r3, r0, r3
 8004b22:	d0d3      	beq.n	8004acc <_malloc_r+0x20>
 8004b24:	425a      	negs	r2, r3
 8004b26:	50e2      	str	r2, [r4, r3]
 8004b28:	e7d0      	b.n	8004acc <_malloc_r+0x20>
 8004b2a:	428c      	cmp	r4, r1
 8004b2c:	684b      	ldr	r3, [r1, #4]
 8004b2e:	bf16      	itet	ne
 8004b30:	6063      	strne	r3, [r4, #4]
 8004b32:	6013      	streq	r3, [r2, #0]
 8004b34:	460c      	movne	r4, r1
 8004b36:	e7eb      	b.n	8004b10 <_malloc_r+0x64>
 8004b38:	460c      	mov	r4, r1
 8004b3a:	6849      	ldr	r1, [r1, #4]
 8004b3c:	e7cc      	b.n	8004ad8 <_malloc_r+0x2c>
 8004b3e:	1cc4      	adds	r4, r0, #3
 8004b40:	f024 0403 	bic.w	r4, r4, #3
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d005      	beq.n	8004b54 <_malloc_r+0xa8>
 8004b48:	1a21      	subs	r1, r4, r0
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f000 fad0 	bl	80050f0 <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d0cf      	beq.n	8004af4 <_malloc_r+0x48>
 8004b54:	6025      	str	r5, [r4, #0]
 8004b56:	e7db      	b.n	8004b10 <_malloc_r+0x64>
 8004b58:	2000009c 	.word	0x2000009c
 8004b5c:	200000a0 	.word	0x200000a0

08004b60 <__sfputc_r>:
 8004b60:	6893      	ldr	r3, [r2, #8]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	b410      	push	{r4}
 8004b68:	6093      	str	r3, [r2, #8]
 8004b6a:	da08      	bge.n	8004b7e <__sfputc_r+0x1e>
 8004b6c:	6994      	ldr	r4, [r2, #24]
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	db01      	blt.n	8004b76 <__sfputc_r+0x16>
 8004b72:	290a      	cmp	r1, #10
 8004b74:	d103      	bne.n	8004b7e <__sfputc_r+0x1e>
 8004b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b7a:	f7ff bcab 	b.w	80044d4 <__swbuf_r>
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	1c58      	adds	r0, r3, #1
 8004b82:	6010      	str	r0, [r2, #0]
 8004b84:	7019      	strb	r1, [r3, #0]
 8004b86:	4608      	mov	r0, r1
 8004b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <__sfputs_r>:
 8004b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b90:	4606      	mov	r6, r0
 8004b92:	460f      	mov	r7, r1
 8004b94:	4614      	mov	r4, r2
 8004b96:	18d5      	adds	r5, r2, r3
 8004b98:	42ac      	cmp	r4, r5
 8004b9a:	d101      	bne.n	8004ba0 <__sfputs_r+0x12>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e007      	b.n	8004bb0 <__sfputs_r+0x22>
 8004ba0:	463a      	mov	r2, r7
 8004ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f7ff ffda 	bl	8004b60 <__sfputc_r>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d1f3      	bne.n	8004b98 <__sfputs_r+0xa>
 8004bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bb4 <_vfiprintf_r>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	460c      	mov	r4, r1
 8004bba:	b09d      	sub	sp, #116	; 0x74
 8004bbc:	4617      	mov	r7, r2
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	b118      	cbz	r0, 8004bcc <_vfiprintf_r+0x18>
 8004bc4:	6983      	ldr	r3, [r0, #24]
 8004bc6:	b90b      	cbnz	r3, 8004bcc <_vfiprintf_r+0x18>
 8004bc8:	f7ff fe34 	bl	8004834 <__sinit>
 8004bcc:	4b7c      	ldr	r3, [pc, #496]	; (8004dc0 <_vfiprintf_r+0x20c>)
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	d158      	bne.n	8004c84 <_vfiprintf_r+0xd0>
 8004bd2:	6874      	ldr	r4, [r6, #4]
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	0718      	lsls	r0, r3, #28
 8004bd8:	d55e      	bpl.n	8004c98 <_vfiprintf_r+0xe4>
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d05b      	beq.n	8004c98 <_vfiprintf_r+0xe4>
 8004be0:	2300      	movs	r3, #0
 8004be2:	9309      	str	r3, [sp, #36]	; 0x24
 8004be4:	2320      	movs	r3, #32
 8004be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bea:	2330      	movs	r3, #48	; 0x30
 8004bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bf0:	9503      	str	r5, [sp, #12]
 8004bf2:	f04f 0b01 	mov.w	fp, #1
 8004bf6:	46b8      	mov	r8, r7
 8004bf8:	4645      	mov	r5, r8
 8004bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bfe:	b10b      	cbz	r3, 8004c04 <_vfiprintf_r+0x50>
 8004c00:	2b25      	cmp	r3, #37	; 0x25
 8004c02:	d154      	bne.n	8004cae <_vfiprintf_r+0xfa>
 8004c04:	ebb8 0a07 	subs.w	sl, r8, r7
 8004c08:	d00b      	beq.n	8004c22 <_vfiprintf_r+0x6e>
 8004c0a:	4653      	mov	r3, sl
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7ff ffbc 	bl	8004b8e <__sfputs_r>
 8004c16:	3001      	adds	r0, #1
 8004c18:	f000 80c2 	beq.w	8004da0 <_vfiprintf_r+0x1ec>
 8004c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1e:	4453      	add	r3, sl
 8004c20:	9309      	str	r3, [sp, #36]	; 0x24
 8004c22:	f898 3000 	ldrb.w	r3, [r8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80ba 	beq.w	8004da0 <_vfiprintf_r+0x1ec>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c36:	9304      	str	r3, [sp, #16]
 8004c38:	9307      	str	r3, [sp, #28]
 8004c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c40:	46a8      	mov	r8, r5
 8004c42:	2205      	movs	r2, #5
 8004c44:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004c48:	485e      	ldr	r0, [pc, #376]	; (8004dc4 <_vfiprintf_r+0x210>)
 8004c4a:	f7fb fac1 	bl	80001d0 <memchr>
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	bb78      	cbnz	r0, 8004cb2 <_vfiprintf_r+0xfe>
 8004c52:	06d9      	lsls	r1, r3, #27
 8004c54:	bf44      	itt	mi
 8004c56:	2220      	movmi	r2, #32
 8004c58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c5c:	071a      	lsls	r2, r3, #28
 8004c5e:	bf44      	itt	mi
 8004c60:	222b      	movmi	r2, #43	; 0x2b
 8004c62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c66:	782a      	ldrb	r2, [r5, #0]
 8004c68:	2a2a      	cmp	r2, #42	; 0x2a
 8004c6a:	d02a      	beq.n	8004cc2 <_vfiprintf_r+0x10e>
 8004c6c:	9a07      	ldr	r2, [sp, #28]
 8004c6e:	46a8      	mov	r8, r5
 8004c70:	2000      	movs	r0, #0
 8004c72:	250a      	movs	r5, #10
 8004c74:	4641      	mov	r1, r8
 8004c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c7a:	3b30      	subs	r3, #48	; 0x30
 8004c7c:	2b09      	cmp	r3, #9
 8004c7e:	d969      	bls.n	8004d54 <_vfiprintf_r+0x1a0>
 8004c80:	b360      	cbz	r0, 8004cdc <_vfiprintf_r+0x128>
 8004c82:	e024      	b.n	8004cce <_vfiprintf_r+0x11a>
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <_vfiprintf_r+0x214>)
 8004c86:	429c      	cmp	r4, r3
 8004c88:	d101      	bne.n	8004c8e <_vfiprintf_r+0xda>
 8004c8a:	68b4      	ldr	r4, [r6, #8]
 8004c8c:	e7a2      	b.n	8004bd4 <_vfiprintf_r+0x20>
 8004c8e:	4b4f      	ldr	r3, [pc, #316]	; (8004dcc <_vfiprintf_r+0x218>)
 8004c90:	429c      	cmp	r4, r3
 8004c92:	bf08      	it	eq
 8004c94:	68f4      	ldreq	r4, [r6, #12]
 8004c96:	e79d      	b.n	8004bd4 <_vfiprintf_r+0x20>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7ff fc6c 	bl	8004578 <__swsetup_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d09d      	beq.n	8004be0 <_vfiprintf_r+0x2c>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	b01d      	add	sp, #116	; 0x74
 8004caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cae:	46a8      	mov	r8, r5
 8004cb0:	e7a2      	b.n	8004bf8 <_vfiprintf_r+0x44>
 8004cb2:	4a44      	ldr	r2, [pc, #272]	; (8004dc4 <_vfiprintf_r+0x210>)
 8004cb4:	1a80      	subs	r0, r0, r2
 8004cb6:	fa0b f000 	lsl.w	r0, fp, r0
 8004cba:	4318      	orrs	r0, r3
 8004cbc:	9004      	str	r0, [sp, #16]
 8004cbe:	4645      	mov	r5, r8
 8004cc0:	e7be      	b.n	8004c40 <_vfiprintf_r+0x8c>
 8004cc2:	9a03      	ldr	r2, [sp, #12]
 8004cc4:	1d11      	adds	r1, r2, #4
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	9103      	str	r1, [sp, #12]
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	db01      	blt.n	8004cd2 <_vfiprintf_r+0x11e>
 8004cce:	9207      	str	r2, [sp, #28]
 8004cd0:	e004      	b.n	8004cdc <_vfiprintf_r+0x128>
 8004cd2:	4252      	negs	r2, r2
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	9207      	str	r2, [sp, #28]
 8004cda:	9304      	str	r3, [sp, #16]
 8004cdc:	f898 3000 	ldrb.w	r3, [r8]
 8004ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce2:	d10e      	bne.n	8004d02 <_vfiprintf_r+0x14e>
 8004ce4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cea:	d138      	bne.n	8004d5e <_vfiprintf_r+0x1aa>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	9203      	str	r2, [sp, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfb8      	it	lt
 8004cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cfc:	f108 0802 	add.w	r8, r8, #2
 8004d00:	9305      	str	r3, [sp, #20]
 8004d02:	4d33      	ldr	r5, [pc, #204]	; (8004dd0 <_vfiprintf_r+0x21c>)
 8004d04:	f898 1000 	ldrb.w	r1, [r8]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7fb fa60 	bl	80001d0 <memchr>
 8004d10:	b140      	cbz	r0, 8004d24 <_vfiprintf_r+0x170>
 8004d12:	2340      	movs	r3, #64	; 0x40
 8004d14:	1b40      	subs	r0, r0, r5
 8004d16:	fa03 f000 	lsl.w	r0, r3, r0
 8004d1a:	9b04      	ldr	r3, [sp, #16]
 8004d1c:	4303      	orrs	r3, r0
 8004d1e:	f108 0801 	add.w	r8, r8, #1
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	f898 1000 	ldrb.w	r1, [r8]
 8004d28:	482a      	ldr	r0, [pc, #168]	; (8004dd4 <_vfiprintf_r+0x220>)
 8004d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d2e:	2206      	movs	r2, #6
 8004d30:	f108 0701 	add.w	r7, r8, #1
 8004d34:	f7fb fa4c 	bl	80001d0 <memchr>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d037      	beq.n	8004dac <_vfiprintf_r+0x1f8>
 8004d3c:	4b26      	ldr	r3, [pc, #152]	; (8004dd8 <_vfiprintf_r+0x224>)
 8004d3e:	bb1b      	cbnz	r3, 8004d88 <_vfiprintf_r+0x1d4>
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	3307      	adds	r3, #7
 8004d44:	f023 0307 	bic.w	r3, r3, #7
 8004d48:	3308      	adds	r3, #8
 8004d4a:	9303      	str	r3, [sp, #12]
 8004d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4e:	444b      	add	r3, r9
 8004d50:	9309      	str	r3, [sp, #36]	; 0x24
 8004d52:	e750      	b.n	8004bf6 <_vfiprintf_r+0x42>
 8004d54:	fb05 3202 	mla	r2, r5, r2, r3
 8004d58:	2001      	movs	r0, #1
 8004d5a:	4688      	mov	r8, r1
 8004d5c:	e78a      	b.n	8004c74 <_vfiprintf_r+0xc0>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f108 0801 	add.w	r8, r8, #1
 8004d64:	9305      	str	r3, [sp, #20]
 8004d66:	4619      	mov	r1, r3
 8004d68:	250a      	movs	r5, #10
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d70:	3a30      	subs	r2, #48	; 0x30
 8004d72:	2a09      	cmp	r2, #9
 8004d74:	d903      	bls.n	8004d7e <_vfiprintf_r+0x1ca>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0c3      	beq.n	8004d02 <_vfiprintf_r+0x14e>
 8004d7a:	9105      	str	r1, [sp, #20]
 8004d7c:	e7c1      	b.n	8004d02 <_vfiprintf_r+0x14e>
 8004d7e:	fb05 2101 	mla	r1, r5, r1, r2
 8004d82:	2301      	movs	r3, #1
 8004d84:	4680      	mov	r8, r0
 8004d86:	e7f0      	b.n	8004d6a <_vfiprintf_r+0x1b6>
 8004d88:	ab03      	add	r3, sp, #12
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <_vfiprintf_r+0x228>)
 8004d90:	a904      	add	r1, sp, #16
 8004d92:	4630      	mov	r0, r6
 8004d94:	f3af 8000 	nop.w
 8004d98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d9c:	4681      	mov	r9, r0
 8004d9e:	d1d5      	bne.n	8004d4c <_vfiprintf_r+0x198>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	065b      	lsls	r3, r3, #25
 8004da4:	f53f af7e 	bmi.w	8004ca4 <_vfiprintf_r+0xf0>
 8004da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004daa:	e77d      	b.n	8004ca8 <_vfiprintf_r+0xf4>
 8004dac:	ab03      	add	r3, sp, #12
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4622      	mov	r2, r4
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <_vfiprintf_r+0x228>)
 8004db4:	a904      	add	r1, sp, #16
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 f888 	bl	8004ecc <_printf_i>
 8004dbc:	e7ec      	b.n	8004d98 <_vfiprintf_r+0x1e4>
 8004dbe:	bf00      	nop
 8004dc0:	08005e60 	.word	0x08005e60
 8004dc4:	08005ea0 	.word	0x08005ea0
 8004dc8:	08005e80 	.word	0x08005e80
 8004dcc:	08005e40 	.word	0x08005e40
 8004dd0:	08005ea6 	.word	0x08005ea6
 8004dd4:	08005eaa 	.word	0x08005eaa
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	08004b8f 	.word	0x08004b8f

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4691      	mov	r9, r2
 8004de6:	461f      	mov	r7, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfb8      	it	lt
 8004df4:	4613      	movlt	r3, r2
 8004df6:	f8c9 3000 	str.w	r3, [r9]
 8004dfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dfe:	4606      	mov	r6, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	b112      	cbz	r2, 8004e0a <_printf_common+0x2a>
 8004e04:	3301      	adds	r3, #1
 8004e06:	f8c9 3000 	str.w	r3, [r9]
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	0699      	lsls	r1, r3, #26
 8004e0e:	bf42      	ittt	mi
 8004e10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e14:	3302      	addmi	r3, #2
 8004e16:	f8c9 3000 	strmi.w	r3, [r9]
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	f015 0506 	ands.w	r5, r5, #6
 8004e20:	d107      	bne.n	8004e32 <_printf_common+0x52>
 8004e22:	f104 0a19 	add.w	sl, r4, #25
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	f8d9 2000 	ldr.w	r2, [r9]
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	42ab      	cmp	r3, r5
 8004e30:	dc28      	bgt.n	8004e84 <_printf_common+0xa4>
 8004e32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	3300      	adds	r3, #0
 8004e3a:	bf18      	it	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	0692      	lsls	r2, r2, #26
 8004e40:	d42d      	bmi.n	8004e9e <_printf_common+0xbe>
 8004e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e46:	4639      	mov	r1, r7
 8004e48:	4630      	mov	r0, r6
 8004e4a:	47c0      	blx	r8
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d020      	beq.n	8004e92 <_printf_common+0xb2>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	68e5      	ldr	r5, [r4, #12]
 8004e54:	f8d9 2000 	ldr.w	r2, [r9]
 8004e58:	f003 0306 	and.w	r3, r3, #6
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	bf08      	it	eq
 8004e60:	1aad      	subeq	r5, r5, r2
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	bf0c      	ite	eq
 8004e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e6c:	2500      	movne	r5, #0
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	bfc4      	itt	gt
 8004e72:	1a9b      	subgt	r3, r3, r2
 8004e74:	18ed      	addgt	r5, r5, r3
 8004e76:	f04f 0900 	mov.w	r9, #0
 8004e7a:	341a      	adds	r4, #26
 8004e7c:	454d      	cmp	r5, r9
 8004e7e:	d11a      	bne.n	8004eb6 <_printf_common+0xd6>
 8004e80:	2000      	movs	r0, #0
 8004e82:	e008      	b.n	8004e96 <_printf_common+0xb6>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4652      	mov	r2, sl
 8004e88:	4639      	mov	r1, r7
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	47c0      	blx	r8
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d103      	bne.n	8004e9a <_printf_common+0xba>
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295
 8004e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9a:	3501      	adds	r5, #1
 8004e9c:	e7c3      	b.n	8004e26 <_printf_common+0x46>
 8004e9e:	18e1      	adds	r1, r4, r3
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	2030      	movs	r0, #48	; 0x30
 8004ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea8:	4422      	add	r2, r4
 8004eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	e7c5      	b.n	8004e42 <_printf_common+0x62>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4639      	mov	r1, r7
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	47c0      	blx	r8
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d0e6      	beq.n	8004e92 <_printf_common+0xb2>
 8004ec4:	f109 0901 	add.w	r9, r9, #1
 8004ec8:	e7d8      	b.n	8004e7c <_printf_common+0x9c>
	...

08004ecc <_printf_i>:
 8004ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	7e09      	ldrb	r1, [r1, #24]
 8004ed8:	b085      	sub	sp, #20
 8004eda:	296e      	cmp	r1, #110	; 0x6e
 8004edc:	4617      	mov	r7, r2
 8004ede:	4606      	mov	r6, r0
 8004ee0:	4698      	mov	r8, r3
 8004ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ee4:	f000 80b3 	beq.w	800504e <_printf_i+0x182>
 8004ee8:	d822      	bhi.n	8004f30 <_printf_i+0x64>
 8004eea:	2963      	cmp	r1, #99	; 0x63
 8004eec:	d036      	beq.n	8004f5c <_printf_i+0x90>
 8004eee:	d80a      	bhi.n	8004f06 <_printf_i+0x3a>
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	f000 80b9 	beq.w	8005068 <_printf_i+0x19c>
 8004ef6:	2958      	cmp	r1, #88	; 0x58
 8004ef8:	f000 8083 	beq.w	8005002 <_printf_i+0x136>
 8004efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f04:	e032      	b.n	8004f6c <_printf_i+0xa0>
 8004f06:	2964      	cmp	r1, #100	; 0x64
 8004f08:	d001      	beq.n	8004f0e <_printf_i+0x42>
 8004f0a:	2969      	cmp	r1, #105	; 0x69
 8004f0c:	d1f6      	bne.n	8004efc <_printf_i+0x30>
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	6813      	ldr	r3, [r2, #0]
 8004f12:	0605      	lsls	r5, r0, #24
 8004f14:	f103 0104 	add.w	r1, r3, #4
 8004f18:	d52a      	bpl.n	8004f70 <_printf_i+0xa4>
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da03      	bge.n	8004f2a <_printf_i+0x5e>
 8004f22:	222d      	movs	r2, #45	; 0x2d
 8004f24:	425b      	negs	r3, r3
 8004f26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f2a:	486f      	ldr	r0, [pc, #444]	; (80050e8 <_printf_i+0x21c>)
 8004f2c:	220a      	movs	r2, #10
 8004f2e:	e039      	b.n	8004fa4 <_printf_i+0xd8>
 8004f30:	2973      	cmp	r1, #115	; 0x73
 8004f32:	f000 809d 	beq.w	8005070 <_printf_i+0x1a4>
 8004f36:	d808      	bhi.n	8004f4a <_printf_i+0x7e>
 8004f38:	296f      	cmp	r1, #111	; 0x6f
 8004f3a:	d020      	beq.n	8004f7e <_printf_i+0xb2>
 8004f3c:	2970      	cmp	r1, #112	; 0x70
 8004f3e:	d1dd      	bne.n	8004efc <_printf_i+0x30>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	f043 0320 	orr.w	r3, r3, #32
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	e003      	b.n	8004f52 <_printf_i+0x86>
 8004f4a:	2975      	cmp	r1, #117	; 0x75
 8004f4c:	d017      	beq.n	8004f7e <_printf_i+0xb2>
 8004f4e:	2978      	cmp	r1, #120	; 0x78
 8004f50:	d1d4      	bne.n	8004efc <_printf_i+0x30>
 8004f52:	2378      	movs	r3, #120	; 0x78
 8004f54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f58:	4864      	ldr	r0, [pc, #400]	; (80050ec <_printf_i+0x220>)
 8004f5a:	e055      	b.n	8005008 <_printf_i+0x13c>
 8004f5c:	6813      	ldr	r3, [r2, #0]
 8004f5e:	1d19      	adds	r1, r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6011      	str	r1, [r2, #0]
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e08c      	b.n	800508a <_printf_i+0x1be>
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6011      	str	r1, [r2, #0]
 8004f74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f78:	bf18      	it	ne
 8004f7a:	b21b      	sxthne	r3, r3
 8004f7c:	e7cf      	b.n	8004f1e <_printf_i+0x52>
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	6825      	ldr	r5, [r4, #0]
 8004f82:	1d18      	adds	r0, r3, #4
 8004f84:	6010      	str	r0, [r2, #0]
 8004f86:	0628      	lsls	r0, r5, #24
 8004f88:	d501      	bpl.n	8004f8e <_printf_i+0xc2>
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	e002      	b.n	8004f94 <_printf_i+0xc8>
 8004f8e:	0668      	lsls	r0, r5, #25
 8004f90:	d5fb      	bpl.n	8004f8a <_printf_i+0xbe>
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	4854      	ldr	r0, [pc, #336]	; (80050e8 <_printf_i+0x21c>)
 8004f96:	296f      	cmp	r1, #111	; 0x6f
 8004f98:	bf14      	ite	ne
 8004f9a:	220a      	movne	r2, #10
 8004f9c:	2208      	moveq	r2, #8
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa4:	6865      	ldr	r5, [r4, #4]
 8004fa6:	60a5      	str	r5, [r4, #8]
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	f2c0 8095 	blt.w	80050d8 <_printf_i+0x20c>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	f021 0104 	bic.w	r1, r1, #4
 8004fb4:	6021      	str	r1, [r4, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13d      	bne.n	8005036 <_printf_i+0x16a>
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	f040 808e 	bne.w	80050dc <_printf_i+0x210>
 8004fc0:	4665      	mov	r5, ip
 8004fc2:	2a08      	cmp	r2, #8
 8004fc4:	d10b      	bne.n	8004fde <_printf_i+0x112>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	07db      	lsls	r3, r3, #31
 8004fca:	d508      	bpl.n	8004fde <_printf_i+0x112>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bfde      	ittt	le
 8004fd4:	2330      	movle	r3, #48	; 0x30
 8004fd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fde:	ebac 0305 	sub.w	r3, ip, r5
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	f8cd 8000 	str.w	r8, [sp]
 8004fe8:	463b      	mov	r3, r7
 8004fea:	aa03      	add	r2, sp, #12
 8004fec:	4621      	mov	r1, r4
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f7ff fef6 	bl	8004de0 <_printf_common>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d14d      	bne.n	8005094 <_printf_i+0x1c8>
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	b005      	add	sp, #20
 8004ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005002:	4839      	ldr	r0, [pc, #228]	; (80050e8 <_printf_i+0x21c>)
 8005004:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005008:	6813      	ldr	r3, [r2, #0]
 800500a:	6821      	ldr	r1, [r4, #0]
 800500c:	1d1d      	adds	r5, r3, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6015      	str	r5, [r2, #0]
 8005012:	060a      	lsls	r2, r1, #24
 8005014:	d50b      	bpl.n	800502e <_printf_i+0x162>
 8005016:	07ca      	lsls	r2, r1, #31
 8005018:	bf44      	itt	mi
 800501a:	f041 0120 	orrmi.w	r1, r1, #32
 800501e:	6021      	strmi	r1, [r4, #0]
 8005020:	b91b      	cbnz	r3, 800502a <_printf_i+0x15e>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	f022 0220 	bic.w	r2, r2, #32
 8005028:	6022      	str	r2, [r4, #0]
 800502a:	2210      	movs	r2, #16
 800502c:	e7b7      	b.n	8004f9e <_printf_i+0xd2>
 800502e:	064d      	lsls	r5, r1, #25
 8005030:	bf48      	it	mi
 8005032:	b29b      	uxthmi	r3, r3
 8005034:	e7ef      	b.n	8005016 <_printf_i+0x14a>
 8005036:	4665      	mov	r5, ip
 8005038:	fbb3 f1f2 	udiv	r1, r3, r2
 800503c:	fb02 3311 	mls	r3, r2, r1, r3
 8005040:	5cc3      	ldrb	r3, [r0, r3]
 8005042:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005046:	460b      	mov	r3, r1
 8005048:	2900      	cmp	r1, #0
 800504a:	d1f5      	bne.n	8005038 <_printf_i+0x16c>
 800504c:	e7b9      	b.n	8004fc2 <_printf_i+0xf6>
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	6825      	ldr	r5, [r4, #0]
 8005052:	6961      	ldr	r1, [r4, #20]
 8005054:	1d18      	adds	r0, r3, #4
 8005056:	6010      	str	r0, [r2, #0]
 8005058:	0628      	lsls	r0, r5, #24
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	d501      	bpl.n	8005062 <_printf_i+0x196>
 800505e:	6019      	str	r1, [r3, #0]
 8005060:	e002      	b.n	8005068 <_printf_i+0x19c>
 8005062:	066a      	lsls	r2, r5, #25
 8005064:	d5fb      	bpl.n	800505e <_printf_i+0x192>
 8005066:	8019      	strh	r1, [r3, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	4665      	mov	r5, ip
 800506e:	e7b9      	b.n	8004fe4 <_printf_i+0x118>
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	1d19      	adds	r1, r3, #4
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	681d      	ldr	r5, [r3, #0]
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	2100      	movs	r1, #0
 800507c:	4628      	mov	r0, r5
 800507e:	f7fb f8a7 	bl	80001d0 <memchr>
 8005082:	b108      	cbz	r0, 8005088 <_printf_i+0x1bc>
 8005084:	1b40      	subs	r0, r0, r5
 8005086:	6060      	str	r0, [r4, #4]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	2300      	movs	r3, #0
 800508e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005092:	e7a7      	b.n	8004fe4 <_printf_i+0x118>
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	462a      	mov	r2, r5
 8005098:	4639      	mov	r1, r7
 800509a:	4630      	mov	r0, r6
 800509c:	47c0      	blx	r8
 800509e:	3001      	adds	r0, #1
 80050a0:	d0aa      	beq.n	8004ff8 <_printf_i+0x12c>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	079b      	lsls	r3, r3, #30
 80050a6:	d413      	bmi.n	80050d0 <_printf_i+0x204>
 80050a8:	68e0      	ldr	r0, [r4, #12]
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	4298      	cmp	r0, r3
 80050ae:	bfb8      	it	lt
 80050b0:	4618      	movlt	r0, r3
 80050b2:	e7a3      	b.n	8004ffc <_printf_i+0x130>
 80050b4:	2301      	movs	r3, #1
 80050b6:	464a      	mov	r2, r9
 80050b8:	4639      	mov	r1, r7
 80050ba:	4630      	mov	r0, r6
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d09a      	beq.n	8004ff8 <_printf_i+0x12c>
 80050c2:	3501      	adds	r5, #1
 80050c4:	68e3      	ldr	r3, [r4, #12]
 80050c6:	9a03      	ldr	r2, [sp, #12]
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	42ab      	cmp	r3, r5
 80050cc:	dcf2      	bgt.n	80050b4 <_printf_i+0x1e8>
 80050ce:	e7eb      	b.n	80050a8 <_printf_i+0x1dc>
 80050d0:	2500      	movs	r5, #0
 80050d2:	f104 0919 	add.w	r9, r4, #25
 80050d6:	e7f5      	b.n	80050c4 <_printf_i+0x1f8>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ac      	bne.n	8005036 <_printf_i+0x16a>
 80050dc:	7803      	ldrb	r3, [r0, #0]
 80050de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e6:	e76c      	b.n	8004fc2 <_printf_i+0xf6>
 80050e8:	08005eb1 	.word	0x08005eb1
 80050ec:	08005ec2 	.word	0x08005ec2

080050f0 <_sbrk_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4c06      	ldr	r4, [pc, #24]	; (800510c <_sbrk_r+0x1c>)
 80050f4:	2300      	movs	r3, #0
 80050f6:	4605      	mov	r5, r0
 80050f8:	4608      	mov	r0, r1
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	f7fe fe02 	bl	8003d04 <_sbrk>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_sbrk_r+0x1a>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	b103      	cbz	r3, 800510a <_sbrk_r+0x1a>
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	200001a4 	.word	0x200001a4

08005110 <__sread>:
 8005110:	b510      	push	{r4, lr}
 8005112:	460c      	mov	r4, r1
 8005114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005118:	f000 f896 	bl	8005248 <_read_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	bfab      	itete	ge
 8005120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005122:	89a3      	ldrhlt	r3, [r4, #12]
 8005124:	181b      	addge	r3, r3, r0
 8005126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800512a:	bfac      	ite	ge
 800512c:	6563      	strge	r3, [r4, #84]	; 0x54
 800512e:	81a3      	strhlt	r3, [r4, #12]
 8005130:	bd10      	pop	{r4, pc}

08005132 <__swrite>:
 8005132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005136:	461f      	mov	r7, r3
 8005138:	898b      	ldrh	r3, [r1, #12]
 800513a:	05db      	lsls	r3, r3, #23
 800513c:	4605      	mov	r5, r0
 800513e:	460c      	mov	r4, r1
 8005140:	4616      	mov	r6, r2
 8005142:	d505      	bpl.n	8005150 <__swrite+0x1e>
 8005144:	2302      	movs	r3, #2
 8005146:	2200      	movs	r2, #0
 8005148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514c:	f000 f868 	bl	8005220 <_lseek_r>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	4632      	mov	r2, r6
 800515e:	463b      	mov	r3, r7
 8005160:	4628      	mov	r0, r5
 8005162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005166:	f000 b817 	b.w	8005198 <_write_r>

0800516a <__sseek>:
 800516a:	b510      	push	{r4, lr}
 800516c:	460c      	mov	r4, r1
 800516e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005172:	f000 f855 	bl	8005220 <_lseek_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	bf15      	itete	ne
 800517c:	6560      	strne	r0, [r4, #84]	; 0x54
 800517e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005186:	81a3      	strheq	r3, [r4, #12]
 8005188:	bf18      	it	ne
 800518a:	81a3      	strhne	r3, [r4, #12]
 800518c:	bd10      	pop	{r4, pc}

0800518e <__sclose>:
 800518e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005192:	f000 b813 	b.w	80051bc <_close_r>
	...

08005198 <_write_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4c07      	ldr	r4, [pc, #28]	; (80051b8 <_write_r+0x20>)
 800519c:	4605      	mov	r5, r0
 800519e:	4608      	mov	r0, r1
 80051a0:	4611      	mov	r1, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	6022      	str	r2, [r4, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f7fe fa10 	bl	80035cc <_write>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_write_r+0x1e>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_write_r+0x1e>
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	200001a4 	.word	0x200001a4

080051bc <_close_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4c06      	ldr	r4, [pc, #24]	; (80051d8 <_close_r+0x1c>)
 80051c0:	2300      	movs	r3, #0
 80051c2:	4605      	mov	r5, r0
 80051c4:	4608      	mov	r0, r1
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	f7fe fd67 	bl	8003c9a <_close>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_close_r+0x1a>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_close_r+0x1a>
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	200001a4 	.word	0x200001a4

080051dc <_fstat_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4c07      	ldr	r4, [pc, #28]	; (80051fc <_fstat_r+0x20>)
 80051e0:	2300      	movs	r3, #0
 80051e2:	4605      	mov	r5, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	f7fe fd62 	bl	8003cb2 <_fstat>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d102      	bne.n	80051f8 <_fstat_r+0x1c>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	b103      	cbz	r3, 80051f8 <_fstat_r+0x1c>
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	bd38      	pop	{r3, r4, r5, pc}
 80051fa:	bf00      	nop
 80051fc:	200001a4 	.word	0x200001a4

08005200 <_isatty_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4c06      	ldr	r4, [pc, #24]	; (800521c <_isatty_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4605      	mov	r5, r0
 8005208:	4608      	mov	r0, r1
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	f7fe fd61 	bl	8003cd2 <_isatty>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_isatty_r+0x1a>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	b103      	cbz	r3, 800521a <_isatty_r+0x1a>
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	200001a4 	.word	0x200001a4

08005220 <_lseek_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4c07      	ldr	r4, [pc, #28]	; (8005240 <_lseek_r+0x20>)
 8005224:	4605      	mov	r5, r0
 8005226:	4608      	mov	r0, r1
 8005228:	4611      	mov	r1, r2
 800522a:	2200      	movs	r2, #0
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f7fe fd5a 	bl	8003ce8 <_lseek>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_lseek_r+0x1e>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	b103      	cbz	r3, 800523e <_lseek_r+0x1e>
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	200001a4 	.word	0x200001a4

08005244 <__malloc_lock>:
 8005244:	4770      	bx	lr

08005246 <__malloc_unlock>:
 8005246:	4770      	bx	lr

08005248 <_read_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4c07      	ldr	r4, [pc, #28]	; (8005268 <_read_r+0x20>)
 800524c:	4605      	mov	r5, r0
 800524e:	4608      	mov	r0, r1
 8005250:	4611      	mov	r1, r2
 8005252:	2200      	movs	r2, #0
 8005254:	6022      	str	r2, [r4, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f7fe fd02 	bl	8003c60 <_read>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_read_r+0x1e>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	b103      	cbz	r3, 8005266 <_read_r+0x1e>
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	200001a4 	.word	0x200001a4

0800526c <powf>:
 800526c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8005270:	ed2d 8b04 	vpush	{d8-d9}
 8005274:	4ca7      	ldr	r4, [pc, #668]	; (8005514 <powf+0x2a8>)
 8005276:	b08a      	sub	sp, #40	; 0x28
 8005278:	eef0 8a40 	vmov.f32	s17, s0
 800527c:	eeb0 8a60 	vmov.f32	s16, s1
 8005280:	f000 f958 	bl	8005534 <__ieee754_powf>
 8005284:	f994 5000 	ldrsb.w	r5, [r4]
 8005288:	1c6b      	adds	r3, r5, #1
 800528a:	eeb0 9a40 	vmov.f32	s18, s0
 800528e:	4626      	mov	r6, r4
 8005290:	d05f      	beq.n	8005352 <powf+0xe6>
 8005292:	eeb4 8a48 	vcmp.f32	s16, s16
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	d65a      	bvs.n	8005352 <powf+0xe6>
 800529c:	eef4 8a68 	vcmp.f32	s17, s17
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d721      	bvc.n	80052ea <powf+0x7e>
 80052a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	d150      	bne.n	8005352 <powf+0xe6>
 80052b0:	2301      	movs	r3, #1
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4b98      	ldr	r3, [pc, #608]	; (8005518 <powf+0x2ac>)
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	ee18 0a90 	vmov	r0, s17
 80052bc:	2300      	movs	r3, #0
 80052be:	9308      	str	r3, [sp, #32]
 80052c0:	f7fb f93a 	bl	8000538 <__aeabi_f2d>
 80052c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052c8:	ee18 0a10 	vmov	r0, s16
 80052cc:	f7fb f934 	bl	8000538 <__aeabi_f2d>
 80052d0:	4b92      	ldr	r3, [pc, #584]	; (800551c <powf+0x2b0>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	2d02      	cmp	r5, #2
 80052d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80052de:	d032      	beq.n	8005346 <powf+0xda>
 80052e0:	4668      	mov	r0, sp
 80052e2:	f000 fbea 	bl	8005aba <matherr>
 80052e6:	bb40      	cbnz	r0, 800533a <powf+0xce>
 80052e8:	e065      	b.n	80053b6 <powf+0x14a>
 80052ea:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8005520 <powf+0x2b4>
 80052ee:	eef4 8a69 	vcmp.f32	s17, s19
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	d163      	bne.n	80053c0 <powf+0x154>
 80052f8:	eeb4 8a69 	vcmp.f32	s16, s19
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d12e      	bne.n	8005360 <powf+0xf4>
 8005302:	2301      	movs	r3, #1
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	4b84      	ldr	r3, [pc, #528]	; (8005518 <powf+0x2ac>)
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	ee18 0a90 	vmov	r0, s17
 800530e:	2300      	movs	r3, #0
 8005310:	9308      	str	r3, [sp, #32]
 8005312:	f7fb f911 	bl	8000538 <__aeabi_f2d>
 8005316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800531a:	ee18 0a10 	vmov	r0, s16
 800531e:	f7fb f90b 	bl	8000538 <__aeabi_f2d>
 8005322:	2200      	movs	r2, #0
 8005324:	2300      	movs	r3, #0
 8005326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800532a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800532e:	2d00      	cmp	r5, #0
 8005330:	d0d6      	beq.n	80052e0 <powf+0x74>
 8005332:	4b7a      	ldr	r3, [pc, #488]	; (800551c <powf+0x2b0>)
 8005334:	2200      	movs	r2, #0
 8005336:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800533a:	9b08      	ldr	r3, [sp, #32]
 800533c:	b11b      	cbz	r3, 8005346 <powf+0xda>
 800533e:	f7ff f81b 	bl	8004378 <__errno>
 8005342:	9b08      	ldr	r3, [sp, #32]
 8005344:	6003      	str	r3, [r0, #0]
 8005346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800534a:	f7fb f94d 	bl	80005e8 <__aeabi_d2f>
 800534e:	ee09 0a10 	vmov	s18, r0
 8005352:	eeb0 0a49 	vmov.f32	s0, s18
 8005356:	b00a      	add	sp, #40	; 0x28
 8005358:	ecbd 8b04 	vpop	{d8-d9}
 800535c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005360:	eeb0 0a48 	vmov.f32	s0, s16
 8005364:	f000 fbb2 	bl	8005acc <finitef>
 8005368:	2800      	cmp	r0, #0
 800536a:	d0f2      	beq.n	8005352 <powf+0xe6>
 800536c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	d5ed      	bpl.n	8005352 <powf+0xe6>
 8005376:	2301      	movs	r3, #1
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4b67      	ldr	r3, [pc, #412]	; (8005518 <powf+0x2ac>)
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	ee18 0a90 	vmov	r0, s17
 8005382:	2300      	movs	r3, #0
 8005384:	9308      	str	r3, [sp, #32]
 8005386:	f7fb f8d7 	bl	8000538 <__aeabi_f2d>
 800538a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800538e:	ee18 0a10 	vmov	r0, s16
 8005392:	f7fb f8d1 	bl	8000538 <__aeabi_f2d>
 8005396:	f994 3000 	ldrsb.w	r3, [r4]
 800539a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800539e:	b923      	cbnz	r3, 80053aa <powf+0x13e>
 80053a0:	2200      	movs	r2, #0
 80053a2:	2300      	movs	r3, #0
 80053a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053a8:	e79a      	b.n	80052e0 <powf+0x74>
 80053aa:	495e      	ldr	r1, [pc, #376]	; (8005524 <powf+0x2b8>)
 80053ac:	2000      	movs	r0, #0
 80053ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d194      	bne.n	80052e0 <powf+0x74>
 80053b6:	f7fe ffdf 	bl	8004378 <__errno>
 80053ba:	2321      	movs	r3, #33	; 0x21
 80053bc:	6003      	str	r3, [r0, #0]
 80053be:	e7bc      	b.n	800533a <powf+0xce>
 80053c0:	f000 fb84 	bl	8005acc <finitef>
 80053c4:	4605      	mov	r5, r0
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d173      	bne.n	80054b2 <powf+0x246>
 80053ca:	eeb0 0a68 	vmov.f32	s0, s17
 80053ce:	f000 fb7d 	bl	8005acc <finitef>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d06d      	beq.n	80054b2 <powf+0x246>
 80053d6:	eeb0 0a48 	vmov.f32	s0, s16
 80053da:	f000 fb77 	bl	8005acc <finitef>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d067      	beq.n	80054b2 <powf+0x246>
 80053e2:	ee18 0a90 	vmov	r0, s17
 80053e6:	f7fb f8a7 	bl	8000538 <__aeabi_f2d>
 80053ea:	4680      	mov	r8, r0
 80053ec:	ee18 0a10 	vmov	r0, s16
 80053f0:	4689      	mov	r9, r1
 80053f2:	f7fb f8a1 	bl	8000538 <__aeabi_f2d>
 80053f6:	eeb4 9a49 	vcmp.f32	s18, s18
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	f994 4000 	ldrsb.w	r4, [r4]
 8005402:	4b45      	ldr	r3, [pc, #276]	; (8005518 <powf+0x2ac>)
 8005404:	d713      	bvc.n	800542e <powf+0x1c2>
 8005406:	2201      	movs	r2, #1
 8005408:	e9cd 2300 	strd	r2, r3, [sp]
 800540c:	9508      	str	r5, [sp, #32]
 800540e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005412:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005416:	2c00      	cmp	r4, #0
 8005418:	d0c2      	beq.n	80053a0 <powf+0x134>
 800541a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800541e:	ee17 0a90 	vmov	r0, s15
 8005422:	f7fb f889 	bl	8000538 <__aeabi_f2d>
 8005426:	2c02      	cmp	r4, #2
 8005428:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800542c:	e7c2      	b.n	80053b4 <powf+0x148>
 800542e:	2203      	movs	r2, #3
 8005430:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005434:	e9cd 2300 	strd	r2, r3, [sp]
 8005438:	9508      	str	r5, [sp, #32]
 800543a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800543e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005442:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005446:	b9fc      	cbnz	r4, 8005488 <powf+0x21c>
 8005448:	4b37      	ldr	r3, [pc, #220]	; (8005528 <powf+0x2bc>)
 800544a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800544e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800545a:	d553      	bpl.n	8005504 <powf+0x298>
 800545c:	eeb0 0a48 	vmov.f32	s0, s16
 8005460:	f000 fb44 	bl	8005aec <rintf>
 8005464:	eeb4 0a48 	vcmp.f32	s0, s16
 8005468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546c:	d004      	beq.n	8005478 <powf+0x20c>
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <powf+0x2c0>)
 8005470:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005474:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005478:	f996 3000 	ldrsb.w	r3, [r6]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d141      	bne.n	8005504 <powf+0x298>
 8005480:	f7fe ff7a 	bl	8004378 <__errno>
 8005484:	2322      	movs	r3, #34	; 0x22
 8005486:	e799      	b.n	80053bc <powf+0x150>
 8005488:	4b29      	ldr	r3, [pc, #164]	; (8005530 <powf+0x2c4>)
 800548a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800548e:	2200      	movs	r2, #0
 8005490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005494:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005498:	d5ee      	bpl.n	8005478 <powf+0x20c>
 800549a:	eeb0 0a48 	vmov.f32	s0, s16
 800549e:	f000 fb25 	bl	8005aec <rintf>
 80054a2:	eeb4 0a48 	vcmp.f32	s0, s16
 80054a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054aa:	d0e5      	beq.n	8005478 <powf+0x20c>
 80054ac:	2200      	movs	r2, #0
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <powf+0x2b8>)
 80054b0:	e7e0      	b.n	8005474 <powf+0x208>
 80054b2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80054b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ba:	f47f af4a 	bne.w	8005352 <powf+0xe6>
 80054be:	eeb0 0a68 	vmov.f32	s0, s17
 80054c2:	f000 fb03 	bl	8005acc <finitef>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f af43 	beq.w	8005352 <powf+0xe6>
 80054cc:	eeb0 0a48 	vmov.f32	s0, s16
 80054d0:	f000 fafc 	bl	8005acc <finitef>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f43f af3c 	beq.w	8005352 <powf+0xe6>
 80054da:	2304      	movs	r3, #4
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <powf+0x2ac>)
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	ee18 0a90 	vmov	r0, s17
 80054e6:	2300      	movs	r3, #0
 80054e8:	9308      	str	r3, [sp, #32]
 80054ea:	f7fb f825 	bl	8000538 <__aeabi_f2d>
 80054ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f2:	ee18 0a10 	vmov	r0, s16
 80054f6:	f7fb f81f 	bl	8000538 <__aeabi_f2d>
 80054fa:	2200      	movs	r2, #0
 80054fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005500:	2300      	movs	r3, #0
 8005502:	e7b7      	b.n	8005474 <powf+0x208>
 8005504:	4668      	mov	r0, sp
 8005506:	f000 fad8 	bl	8005aba <matherr>
 800550a:	2800      	cmp	r0, #0
 800550c:	f47f af15 	bne.w	800533a <powf+0xce>
 8005510:	e7b6      	b.n	8005480 <powf+0x214>
 8005512:	bf00      	nop
 8005514:	20000070 	.word	0x20000070
 8005518:	08005ed3 	.word	0x08005ed3
 800551c:	3ff00000 	.word	0x3ff00000
 8005520:	00000000 	.word	0x00000000
 8005524:	fff00000 	.word	0xfff00000
 8005528:	47efffff 	.word	0x47efffff
 800552c:	c7efffff 	.word	0xc7efffff
 8005530:	7ff00000 	.word	0x7ff00000

08005534 <__ieee754_powf>:
 8005534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005538:	ee10 5a90 	vmov	r5, s1
 800553c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005540:	ed2d 8b02 	vpush	{d8}
 8005544:	eeb0 8a40 	vmov.f32	s16, s0
 8005548:	eef0 8a60 	vmov.f32	s17, s1
 800554c:	f000 8293 	beq.w	8005a76 <__ieee754_powf+0x542>
 8005550:	ee10 8a10 	vmov	r8, s0
 8005554:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005558:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800555c:	dc06      	bgt.n	800556c <__ieee754_powf+0x38>
 800555e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005562:	dd0a      	ble.n	800557a <__ieee754_powf+0x46>
 8005564:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005568:	f000 8285 	beq.w	8005a76 <__ieee754_powf+0x542>
 800556c:	ecbd 8b02 	vpop	{d8}
 8005570:	48d9      	ldr	r0, [pc, #868]	; (80058d8 <__ieee754_powf+0x3a4>)
 8005572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	f000 bab3 	b.w	8005ae0 <nanf>
 800557a:	f1b8 0f00 	cmp.w	r8, #0
 800557e:	da1d      	bge.n	80055bc <__ieee754_powf+0x88>
 8005580:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8005584:	da2c      	bge.n	80055e0 <__ieee754_powf+0xac>
 8005586:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800558a:	db30      	blt.n	80055ee <__ieee754_powf+0xba>
 800558c:	15fb      	asrs	r3, r7, #23
 800558e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005592:	fa47 f603 	asr.w	r6, r7, r3
 8005596:	fa06 f303 	lsl.w	r3, r6, r3
 800559a:	42bb      	cmp	r3, r7
 800559c:	d127      	bne.n	80055ee <__ieee754_powf+0xba>
 800559e:	f006 0601 	and.w	r6, r6, #1
 80055a2:	f1c6 0602 	rsb	r6, r6, #2
 80055a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80055aa:	d122      	bne.n	80055f2 <__ieee754_powf+0xbe>
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	f280 8268 	bge.w	8005a82 <__ieee754_powf+0x54e>
 80055b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80055b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80055ba:	e00d      	b.n	80055d8 <__ieee754_powf+0xa4>
 80055bc:	2600      	movs	r6, #0
 80055be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80055c2:	d1f0      	bne.n	80055a6 <__ieee754_powf+0x72>
 80055c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80055c8:	f000 8255 	beq.w	8005a76 <__ieee754_powf+0x542>
 80055cc:	dd0a      	ble.n	80055e4 <__ieee754_powf+0xb0>
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	f280 8254 	bge.w	8005a7c <__ieee754_powf+0x548>
 80055d4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80058dc <__ieee754_powf+0x3a8>
 80055d8:	ecbd 8b02 	vpop	{d8}
 80055dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e0:	2602      	movs	r6, #2
 80055e2:	e7ec      	b.n	80055be <__ieee754_powf+0x8a>
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	daf5      	bge.n	80055d4 <__ieee754_powf+0xa0>
 80055e8:	eeb1 0a68 	vneg.f32	s0, s17
 80055ec:	e7f4      	b.n	80055d8 <__ieee754_powf+0xa4>
 80055ee:	2600      	movs	r6, #0
 80055f0:	e7d9      	b.n	80055a6 <__ieee754_powf+0x72>
 80055f2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80055f6:	d102      	bne.n	80055fe <__ieee754_powf+0xca>
 80055f8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80055fc:	e7ec      	b.n	80055d8 <__ieee754_powf+0xa4>
 80055fe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005602:	eeb0 0a48 	vmov.f32	s0, s16
 8005606:	d108      	bne.n	800561a <__ieee754_powf+0xe6>
 8005608:	f1b8 0f00 	cmp.w	r8, #0
 800560c:	db05      	blt.n	800561a <__ieee754_powf+0xe6>
 800560e:	ecbd 8b02 	vpop	{d8}
 8005612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	f000 ba4d 	b.w	8005ab4 <__ieee754_sqrtf>
 800561a:	f000 fa50 	bl	8005abe <fabsf>
 800561e:	b124      	cbz	r4, 800562a <__ieee754_powf+0xf6>
 8005620:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005624:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005628:	d117      	bne.n	800565a <__ieee754_powf+0x126>
 800562a:	2d00      	cmp	r5, #0
 800562c:	bfbc      	itt	lt
 800562e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005632:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005636:	f1b8 0f00 	cmp.w	r8, #0
 800563a:	dacd      	bge.n	80055d8 <__ieee754_powf+0xa4>
 800563c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005640:	ea54 0306 	orrs.w	r3, r4, r6
 8005644:	d104      	bne.n	8005650 <__ieee754_powf+0x11c>
 8005646:	ee70 7a40 	vsub.f32	s15, s0, s0
 800564a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800564e:	e7c3      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005650:	2e01      	cmp	r6, #1
 8005652:	d1c1      	bne.n	80055d8 <__ieee754_powf+0xa4>
 8005654:	eeb1 0a40 	vneg.f32	s0, s0
 8005658:	e7be      	b.n	80055d8 <__ieee754_powf+0xa4>
 800565a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800565e:	3801      	subs	r0, #1
 8005660:	ea56 0300 	orrs.w	r3, r6, r0
 8005664:	d104      	bne.n	8005670 <__ieee754_powf+0x13c>
 8005666:	ee38 8a48 	vsub.f32	s16, s16, s16
 800566a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800566e:	e7b3      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005670:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8005674:	dd6d      	ble.n	8005752 <__ieee754_powf+0x21e>
 8005676:	4b9a      	ldr	r3, [pc, #616]	; (80058e0 <__ieee754_powf+0x3ac>)
 8005678:	429c      	cmp	r4, r3
 800567a:	dc06      	bgt.n	800568a <__ieee754_powf+0x156>
 800567c:	2d00      	cmp	r5, #0
 800567e:	daa9      	bge.n	80055d4 <__ieee754_powf+0xa0>
 8005680:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80058e4 <__ieee754_powf+0x3b0>
 8005684:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005688:	e7a6      	b.n	80055d8 <__ieee754_powf+0xa4>
 800568a:	4b97      	ldr	r3, [pc, #604]	; (80058e8 <__ieee754_powf+0x3b4>)
 800568c:	429c      	cmp	r4, r3
 800568e:	dd02      	ble.n	8005696 <__ieee754_powf+0x162>
 8005690:	2d00      	cmp	r5, #0
 8005692:	dcf5      	bgt.n	8005680 <__ieee754_powf+0x14c>
 8005694:	e79e      	b.n	80055d4 <__ieee754_powf+0xa0>
 8005696:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800569a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800569e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80058ec <__ieee754_powf+0x3b8>
 80056a2:	eef1 6a40 	vneg.f32	s13, s0
 80056a6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80056aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80056b2:	eee7 7a40 	vfms.f32	s15, s14, s0
 80056b6:	ee60 0a00 	vmul.f32	s1, s0, s0
 80056ba:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80058f0 <__ieee754_powf+0x3bc>
 80056be:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80056c2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80058f4 <__ieee754_powf+0x3c0>
 80056c6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80056ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80056ce:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80058f8 <__ieee754_powf+0x3c4>
 80056d2:	eeb0 6a67 	vmov.f32	s12, s15
 80056d6:	eea0 6a07 	vfma.f32	s12, s0, s14
 80056da:	ee16 3a10 	vmov	r3, s12
 80056de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80056e2:	f023 030f 	bic.w	r3, r3, #15
 80056e6:	ee00 3a90 	vmov	s1, r3
 80056ea:	eee6 0a87 	vfma.f32	s1, s13, s14
 80056ee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80056f2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80056f6:	f025 050f 	bic.w	r5, r5, #15
 80056fa:	ee07 5a10 	vmov	s14, r5
 80056fe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005702:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800570e:	3e01      	subs	r6, #1
 8005710:	ea56 0200 	orrs.w	r2, r6, r0
 8005714:	ee07 5a10 	vmov	s14, r5
 8005718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800571c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005720:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005724:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005728:	ee17 4a10 	vmov	r4, s14
 800572c:	bf08      	it	eq
 800572e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005732:	2c00      	cmp	r4, #0
 8005734:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005738:	f340 8184 	ble.w	8005a44 <__ieee754_powf+0x510>
 800573c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005740:	f340 80fc 	ble.w	800593c <__ieee754_powf+0x408>
 8005744:	eddf 7a67 	vldr	s15, [pc, #412]	; 80058e4 <__ieee754_powf+0x3b0>
 8005748:	ee28 0a27 	vmul.f32	s0, s16, s15
 800574c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005750:	e742      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005752:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8005756:	bfbf      	itttt	lt
 8005758:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80058fc <__ieee754_powf+0x3c8>
 800575c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005760:	f06f 0217 	mvnlt.w	r2, #23
 8005764:	ee17 4a90 	vmovlt	r4, s15
 8005768:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800576c:	bfa8      	it	ge
 800576e:	2200      	movge	r2, #0
 8005770:	3b7f      	subs	r3, #127	; 0x7f
 8005772:	4413      	add	r3, r2
 8005774:	4a62      	ldr	r2, [pc, #392]	; (8005900 <__ieee754_powf+0x3cc>)
 8005776:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800577a:	4294      	cmp	r4, r2
 800577c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005780:	dd06      	ble.n	8005790 <__ieee754_powf+0x25c>
 8005782:	4a60      	ldr	r2, [pc, #384]	; (8005904 <__ieee754_powf+0x3d0>)
 8005784:	4294      	cmp	r4, r2
 8005786:	f340 80a5 	ble.w	80058d4 <__ieee754_powf+0x3a0>
 800578a:	3301      	adds	r3, #1
 800578c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005790:	2400      	movs	r4, #0
 8005792:	4a5d      	ldr	r2, [pc, #372]	; (8005908 <__ieee754_powf+0x3d4>)
 8005794:	00a7      	lsls	r7, r4, #2
 8005796:	443a      	add	r2, r7
 8005798:	ee07 1a90 	vmov	s15, r1
 800579c:	ed92 7a00 	vldr	s14, [r2]
 80057a0:	4a5a      	ldr	r2, [pc, #360]	; (800590c <__ieee754_powf+0x3d8>)
 80057a2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80057a6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80057aa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80057ae:	1049      	asrs	r1, r1, #1
 80057b0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80057b4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80057b8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80057bc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80057c0:	ee06 1a10 	vmov	s12, r1
 80057c4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80057c8:	ee14 ca90 	vmov	ip, s9
 80057cc:	ea02 0c0c 	and.w	ip, r2, ip
 80057d0:	ee05 ca10 	vmov	s10, ip
 80057d4:	eeb1 4a45 	vneg.f32	s8, s10
 80057d8:	eee4 5a06 	vfma.f32	s11, s8, s12
 80057dc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80057e0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005910 <__ieee754_powf+0x3dc>
 80057e4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80057e8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80057ec:	eee4 5a06 	vfma.f32	s11, s8, s12
 80057f0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80057f4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80057f8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8005914 <__ieee754_powf+0x3e0>
 80057fc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005800:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005918 <__ieee754_powf+0x3e4>
 8005804:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005808:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80058ec <__ieee754_powf+0x3b8>
 800580c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005810:	eddf 5a42 	vldr	s11, [pc, #264]	; 800591c <__ieee754_powf+0x3e8>
 8005814:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005818:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005920 <__ieee754_powf+0x3ec>
 800581c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8005820:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005824:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005828:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800582c:	eef0 7a65 	vmov.f32	s15, s11
 8005830:	eee3 6a87 	vfma.f32	s13, s7, s14
 8005834:	eee5 7a05 	vfma.f32	s15, s10, s10
 8005838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583c:	ee17 1a90 	vmov	r1, s15
 8005840:	4011      	ands	r1, r2
 8005842:	ee07 1a90 	vmov	s15, r1
 8005846:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800584a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8005924 <__ieee754_powf+0x3f0>
 800584e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8005852:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005856:	ee27 7a24 	vmul.f32	s14, s14, s9
 800585a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800585e:	eeb0 6a47 	vmov.f32	s12, s14
 8005862:	eea5 6a27 	vfma.f32	s12, s10, s15
 8005866:	ee16 1a10 	vmov	r1, s12
 800586a:	4011      	ands	r1, r2
 800586c:	ee06 1a90 	vmov	s13, r1
 8005870:	eee4 6a27 	vfma.f32	s13, s8, s15
 8005874:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005928 <__ieee754_powf+0x3f4>
 8005878:	ee37 7a66 	vsub.f32	s14, s14, s13
 800587c:	ee06 1a10 	vmov	s12, r1
 8005880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005884:	eddf 7a29 	vldr	s15, [pc, #164]	; 800592c <__ieee754_powf+0x3f8>
 8005888:	4929      	ldr	r1, [pc, #164]	; (8005930 <__ieee754_powf+0x3fc>)
 800588a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800588e:	4439      	add	r1, r7
 8005890:	edd1 7a00 	vldr	s15, [r1]
 8005894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eef0 0a47 	vmov.f32	s1, s14
 80058a0:	4b24      	ldr	r3, [pc, #144]	; (8005934 <__ieee754_powf+0x400>)
 80058a2:	eee6 0a25 	vfma.f32	s1, s12, s11
 80058a6:	443b      	add	r3, r7
 80058a8:	ed93 5a00 	vldr	s10, [r3]
 80058ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058b0:	ee70 0a85 	vadd.f32	s1, s1, s10
 80058b4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80058b8:	ee17 3a90 	vmov	r3, s15
 80058bc:	4013      	ands	r3, r2
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058c6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80058ca:	eee6 7a65 	vfms.f32	s15, s12, s11
 80058ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d2:	e70e      	b.n	80056f2 <__ieee754_powf+0x1be>
 80058d4:	2401      	movs	r4, #1
 80058d6:	e75c      	b.n	8005792 <__ieee754_powf+0x25e>
 80058d8:	08005ea5 	.word	0x08005ea5
 80058dc:	00000000 	.word	0x00000000
 80058e0:	3f7ffff7 	.word	0x3f7ffff7
 80058e4:	7149f2ca 	.word	0x7149f2ca
 80058e8:	3f800007 	.word	0x3f800007
 80058ec:	3eaaaaab 	.word	0x3eaaaaab
 80058f0:	36eca570 	.word	0x36eca570
 80058f4:	3fb8aa3b 	.word	0x3fb8aa3b
 80058f8:	3fb8aa00 	.word	0x3fb8aa00
 80058fc:	4b800000 	.word	0x4b800000
 8005900:	001cc471 	.word	0x001cc471
 8005904:	005db3d6 	.word	0x005db3d6
 8005908:	08005ed8 	.word	0x08005ed8
 800590c:	fffff000 	.word	0xfffff000
 8005910:	3e6c3255 	.word	0x3e6c3255
 8005914:	3e53f142 	.word	0x3e53f142
 8005918:	3e8ba305 	.word	0x3e8ba305
 800591c:	3edb6db7 	.word	0x3edb6db7
 8005920:	3f19999a 	.word	0x3f19999a
 8005924:	3f763800 	.word	0x3f763800
 8005928:	3f76384f 	.word	0x3f76384f
 800592c:	369dc3a0 	.word	0x369dc3a0
 8005930:	08005ee8 	.word	0x08005ee8
 8005934:	08005ee0 	.word	0x08005ee0
 8005938:	3338aa3c 	.word	0x3338aa3c
 800593c:	f040 8092 	bne.w	8005a64 <__ieee754_powf+0x530>
 8005940:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005938 <__ieee754_powf+0x404>
 8005944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005948:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800594c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	f73f aef6 	bgt.w	8005744 <__ieee754_powf+0x210>
 8005958:	15db      	asrs	r3, r3, #23
 800595a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800595e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005962:	4103      	asrs	r3, r0
 8005964:	4423      	add	r3, r4
 8005966:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800596a:	4947      	ldr	r1, [pc, #284]	; (8005a88 <__ieee754_powf+0x554>)
 800596c:	3a7f      	subs	r2, #127	; 0x7f
 800596e:	4111      	asrs	r1, r2
 8005970:	ea23 0101 	bic.w	r1, r3, r1
 8005974:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8005978:	ee07 1a10 	vmov	s14, r1
 800597c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005980:	f1c2 0217 	rsb	r2, r2, #23
 8005984:	4110      	asrs	r0, r2
 8005986:	2c00      	cmp	r4, #0
 8005988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800598c:	bfb8      	it	lt
 800598e:	4240      	neglt	r0, r0
 8005990:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005994:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a8c <__ieee754_powf+0x558>
 8005998:	ee17 3a10 	vmov	r3, s14
 800599c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80059a0:	f023 030f 	bic.w	r3, r3, #15
 80059a4:	ee07 3a10 	vmov	s14, r3
 80059a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80059b0:	eddf 7a37 	vldr	s15, [pc, #220]	; 8005a90 <__ieee754_powf+0x55c>
 80059b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80059bc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8005a94 <__ieee754_powf+0x560>
 80059c0:	eeb0 0a67 	vmov.f32	s0, s15
 80059c4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80059c8:	eeb0 6a40 	vmov.f32	s12, s0
 80059cc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80059d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80059d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059d8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005a98 <__ieee754_powf+0x564>
 80059dc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8005a9c <__ieee754_powf+0x568>
 80059e0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80059e4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005aa0 <__ieee754_powf+0x56c>
 80059e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80059ec:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8005aa4 <__ieee754_powf+0x570>
 80059f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80059f4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8005aa8 <__ieee754_powf+0x574>
 80059f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80059fc:	eeb0 6a40 	vmov.f32	s12, s0
 8005a00:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005a04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a08:	eeb0 7a46 	vmov.f32	s14, s12
 8005a0c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005a10:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005a14:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005a18:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005a24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005a28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005a2c:	ee10 3a10 	vmov	r3, s0
 8005a30:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a38:	da1a      	bge.n	8005a70 <__ieee754_powf+0x53c>
 8005a3a:	f000 f8b1 	bl	8005ba0 <scalbnf>
 8005a3e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005a42:	e5c9      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <__ieee754_powf+0x578>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	dd02      	ble.n	8005a50 <__ieee754_powf+0x51c>
 8005a4a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005ab0 <__ieee754_powf+0x57c>
 8005a4e:	e67b      	b.n	8005748 <__ieee754_powf+0x214>
 8005a50:	d108      	bne.n	8005a64 <__ieee754_powf+0x530>
 8005a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a56:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	f6ff af7b 	blt.w	8005958 <__ieee754_powf+0x424>
 8005a62:	e7f2      	b.n	8005a4a <__ieee754_powf+0x516>
 8005a64:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005a68:	f73f af76 	bgt.w	8005958 <__ieee754_powf+0x424>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	e78f      	b.n	8005990 <__ieee754_powf+0x45c>
 8005a70:	ee00 3a10 	vmov	s0, r3
 8005a74:	e7e3      	b.n	8005a3e <__ieee754_powf+0x50a>
 8005a76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a7a:	e5ad      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005a7c:	eeb0 0a68 	vmov.f32	s0, s17
 8005a80:	e5aa      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005a82:	eeb0 0a48 	vmov.f32	s0, s16
 8005a86:	e5a7      	b.n	80055d8 <__ieee754_powf+0xa4>
 8005a88:	007fffff 	.word	0x007fffff
 8005a8c:	3f317218 	.word	0x3f317218
 8005a90:	35bfbe8c 	.word	0x35bfbe8c
 8005a94:	3f317200 	.word	0x3f317200
 8005a98:	3331bb4c 	.word	0x3331bb4c
 8005a9c:	b5ddea0e 	.word	0xb5ddea0e
 8005aa0:	388ab355 	.word	0x388ab355
 8005aa4:	bb360b61 	.word	0xbb360b61
 8005aa8:	3e2aaaab 	.word	0x3e2aaaab
 8005aac:	43160000 	.word	0x43160000
 8005ab0:	0da24260 	.word	0x0da24260

08005ab4 <__ieee754_sqrtf>:
 8005ab4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005ab8:	4770      	bx	lr

08005aba <matherr>:
 8005aba:	2000      	movs	r0, #0
 8005abc:	4770      	bx	lr

08005abe <fabsf>:
 8005abe:	ee10 3a10 	vmov	r3, s0
 8005ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ac6:	ee00 3a10 	vmov	s0, r3
 8005aca:	4770      	bx	lr

08005acc <finitef>:
 8005acc:	ee10 3a10 	vmov	r3, s0
 8005ad0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005ad4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005ad8:	bfac      	ite	ge
 8005ada:	2000      	movge	r0, #0
 8005adc:	2001      	movlt	r0, #1
 8005ade:	4770      	bx	lr

08005ae0 <nanf>:
 8005ae0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ae8 <nanf+0x8>
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	7fc00000 	.word	0x7fc00000

08005aec <rintf>:
 8005aec:	b513      	push	{r0, r1, r4, lr}
 8005aee:	ee10 1a10 	vmov	r1, s0
 8005af2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005af6:	0ddc      	lsrs	r4, r3, #23
 8005af8:	3c7f      	subs	r4, #127	; 0x7f
 8005afa:	2c16      	cmp	r4, #22
 8005afc:	dc46      	bgt.n	8005b8c <rintf+0xa0>
 8005afe:	b32b      	cbz	r3, 8005b4c <rintf+0x60>
 8005b00:	2c00      	cmp	r4, #0
 8005b02:	ee10 2a10 	vmov	r2, s0
 8005b06:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8005b0a:	da21      	bge.n	8005b50 <rintf+0x64>
 8005b0c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8005b10:	425b      	negs	r3, r3
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <rintf+0xac>)
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	0d09      	lsrs	r1, r1, #20
 8005b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1c:	0509      	lsls	r1, r1, #20
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	edd2 6a00 	vldr	s13, [r2]
 8005b2c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8005b30:	ed8d 7a01 	vstr	s14, [sp, #4]
 8005b34:	eddd 7a01 	vldr	s15, [sp, #4]
 8005b38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b3c:	ee17 3a90 	vmov	r3, s15
 8005b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b44:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005b48:	ee00 3a10 	vmov	s0, r3
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd10      	pop	{r4, pc}
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <rintf+0xb0>)
 8005b52:	4123      	asrs	r3, r4
 8005b54:	4219      	tst	r1, r3
 8005b56:	d0f9      	beq.n	8005b4c <rintf+0x60>
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	4219      	tst	r1, r3
 8005b5c:	d006      	beq.n	8005b6c <rintf+0x80>
 8005b5e:	ea21 0203 	bic.w	r2, r1, r3
 8005b62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b66:	fa43 f404 	asr.w	r4, r3, r4
 8005b6a:	4322      	orrs	r2, r4
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <rintf+0xac>)
 8005b6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b72:	ed90 7a00 	vldr	s14, [r0]
 8005b76:	ee07 2a90 	vmov	s15, r2
 8005b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b7e:	edcd 7a01 	vstr	s15, [sp, #4]
 8005b82:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005b86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005b8a:	e7df      	b.n	8005b4c <rintf+0x60>
 8005b8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005b90:	d3dc      	bcc.n	8005b4c <rintf+0x60>
 8005b92:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005b96:	e7d9      	b.n	8005b4c <rintf+0x60>
 8005b98:	08005ef0 	.word	0x08005ef0
 8005b9c:	007fffff 	.word	0x007fffff

08005ba0 <scalbnf>:
 8005ba0:	b508      	push	{r3, lr}
 8005ba2:	ee10 2a10 	vmov	r2, s0
 8005ba6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005baa:	ed2d 8b02 	vpush	{d8}
 8005bae:	eef0 0a40 	vmov.f32	s1, s0
 8005bb2:	d004      	beq.n	8005bbe <scalbnf+0x1e>
 8005bb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005bb8:	d306      	bcc.n	8005bc8 <scalbnf+0x28>
 8005bba:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005bbe:	ecbd 8b02 	vpop	{d8}
 8005bc2:	eeb0 0a60 	vmov.f32	s0, s1
 8005bc6:	bd08      	pop	{r3, pc}
 8005bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bcc:	d21c      	bcs.n	8005c08 <scalbnf+0x68>
 8005bce:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <scalbnf+0xac>)
 8005bd0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005c50 <scalbnf+0xb0>
 8005bd4:	4298      	cmp	r0, r3
 8005bd6:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005bda:	db10      	blt.n	8005bfe <scalbnf+0x5e>
 8005bdc:	ee10 2a90 	vmov	r2, s1
 8005be0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005be4:	3b19      	subs	r3, #25
 8005be6:	4403      	add	r3, r0
 8005be8:	2bfe      	cmp	r3, #254	; 0xfe
 8005bea:	dd0f      	ble.n	8005c0c <scalbnf+0x6c>
 8005bec:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005c54 <scalbnf+0xb4>
 8005bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8005bf4:	f000 f834 	bl	8005c60 <copysignf>
 8005bf8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005bfc:	e7df      	b.n	8005bbe <scalbnf+0x1e>
 8005bfe:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005c58 <scalbnf+0xb8>
 8005c02:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005c06:	e7da      	b.n	8005bbe <scalbnf+0x1e>
 8005c08:	0ddb      	lsrs	r3, r3, #23
 8005c0a:	e7ec      	b.n	8005be6 <scalbnf+0x46>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dd06      	ble.n	8005c1e <scalbnf+0x7e>
 8005c10:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005c14:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005c18:	ee00 3a90 	vmov	s1, r3
 8005c1c:	e7cf      	b.n	8005bbe <scalbnf+0x1e>
 8005c1e:	f113 0f16 	cmn.w	r3, #22
 8005c22:	da06      	bge.n	8005c32 <scalbnf+0x92>
 8005c24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c28:	4298      	cmp	r0, r3
 8005c2a:	dcdf      	bgt.n	8005bec <scalbnf+0x4c>
 8005c2c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005c58 <scalbnf+0xb8>
 8005c30:	e7de      	b.n	8005bf0 <scalbnf+0x50>
 8005c32:	3319      	adds	r3, #25
 8005c34:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005c38:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005c3c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005c5c <scalbnf+0xbc>
 8005c40:	ee07 3a10 	vmov	s14, r3
 8005c44:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005c48:	e7b9      	b.n	8005bbe <scalbnf+0x1e>
 8005c4a:	bf00      	nop
 8005c4c:	ffff3cb0 	.word	0xffff3cb0
 8005c50:	4c000000 	.word	0x4c000000
 8005c54:	7149f2ca 	.word	0x7149f2ca
 8005c58:	0da24260 	.word	0x0da24260
 8005c5c:	33000000 	.word	0x33000000

08005c60 <copysignf>:
 8005c60:	ee10 3a10 	vmov	r3, s0
 8005c64:	ee10 2a90 	vmov	r2, s1
 8005c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c70:	4313      	orrs	r3, r2
 8005c72:	ee00 3a10 	vmov	s0, r3
 8005c76:	4770      	bx	lr

08005c78 <_init>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr

08005c84 <_fini>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr
