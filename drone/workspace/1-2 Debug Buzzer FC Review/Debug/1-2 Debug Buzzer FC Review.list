
1-2 Debug Buzzer FC Review.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fec  08001fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ff4  08001ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002008  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005724  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000123a  00000000  00000000  00025760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  000269a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00026f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e846  00000000  00000000  00027498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c74  00000000  00000000  00045cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd32e  00000000  00000000  0004b952  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000164c  00000000  00000000  00108cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fb4 	.word	0x08001fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001fb4 	.word	0x08001fb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92f 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 fb0a 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f939 	bl	80007a2 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90f 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e22d      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d075      	beq.n	80008c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007da:	4ba3      	ldr	r3, [pc, #652]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	f003 030c 	and.w	r3, r3, #12
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d00c      	beq.n	8000800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007e6:	4ba0      	ldr	r3, [pc, #640]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007ee:	2b08      	cmp	r3, #8
 80007f0:	d112      	bne.n	8000818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007f2:	4b9d      	ldr	r3, [pc, #628]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007fe:	d10b      	bne.n	8000818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000800:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d05b      	beq.n	80008c4 <HAL_RCC_OscConfig+0x108>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d157      	bne.n	80008c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	e208      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000820:	d106      	bne.n	8000830 <HAL_RCC_OscConfig+0x74>
 8000822:	4b91      	ldr	r3, [pc, #580]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a90      	ldr	r2, [pc, #576]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e01d      	b.n	800086c <HAL_RCC_OscConfig+0xb0>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000838:	d10c      	bne.n	8000854 <HAL_RCC_OscConfig+0x98>
 800083a:	4b8b      	ldr	r3, [pc, #556]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a8a      	ldr	r2, [pc, #552]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b88      	ldr	r3, [pc, #544]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a87      	ldr	r2, [pc, #540]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 800084c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e00b      	b.n	800086c <HAL_RCC_OscConfig+0xb0>
 8000854:	4b84      	ldr	r3, [pc, #528]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a83      	ldr	r2, [pc, #524]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 800085a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a80      	ldr	r2, [pc, #512]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800086a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d013      	beq.n	800089c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000874:	f7ff fe8e 	bl	8000594 <HAL_GetTick>
 8000878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087a:	e008      	b.n	800088e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087c:	f7ff fe8a 	bl	8000594 <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b64      	cmp	r3, #100	; 0x64
 8000888:	d901      	bls.n	800088e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e1cd      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088e:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f0      	beq.n	800087c <HAL_RCC_OscConfig+0xc0>
 800089a:	e014      	b.n	80008c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089c:	f7ff fe7a 	bl	8000594 <HAL_GetTick>
 80008a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a2:	e008      	b.n	80008b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a4:	f7ff fe76 	bl	8000594 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b64      	cmp	r3, #100	; 0x64
 80008b0:	d901      	bls.n	80008b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e1b9      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b6:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f0      	bne.n	80008a4 <HAL_RCC_OscConfig+0xe8>
 80008c2:	e000      	b.n	80008c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d063      	beq.n	800099a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008d2:	4b65      	ldr	r3, [pc, #404]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f003 030c 	and.w	r3, r3, #12
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00b      	beq.n	80008f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008de:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	d11c      	bne.n	8000924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ea:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d116      	bne.n	8000924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f6:	4b5c      	ldr	r3, [pc, #368]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <HAL_RCC_OscConfig+0x152>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d001      	beq.n	800090e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e18d      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090e:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4952      	ldr	r1, [pc, #328]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 800091e:	4313      	orrs	r3, r2
 8000920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000922:	e03a      	b.n	800099a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d020      	beq.n	800096e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800092c:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <HAL_RCC_OscConfig+0x2b0>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000932:	f7ff fe2f 	bl	8000594 <HAL_GetTick>
 8000936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	e008      	b.n	800094c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093a:	f7ff fe2b 	bl	8000594 <HAL_GetTick>
 800093e:	4602      	mov	r2, r0
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	2b02      	cmp	r3, #2
 8000946:	d901      	bls.n	800094c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000948:	2303      	movs	r3, #3
 800094a:	e16e      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094c:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f0      	beq.n	800093a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000958:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	4940      	ldr	r1, [pc, #256]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000968:	4313      	orrs	r3, r2
 800096a:	600b      	str	r3, [r1, #0]
 800096c:	e015      	b.n	800099a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <HAL_RCC_OscConfig+0x2b0>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000974:	f7ff fe0e 	bl	8000594 <HAL_GetTick>
 8000978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097a:	e008      	b.n	800098e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800097c:	f7ff fe0a 	bl	8000594 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d901      	bls.n	800098e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e14d      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f0      	bne.n	800097c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d030      	beq.n	8000a08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d016      	beq.n	80009dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <HAL_RCC_OscConfig+0x2b4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009b4:	f7ff fdee 	bl	8000594 <HAL_GetTick>
 80009b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009bc:	f7ff fdea 	bl	8000594 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e12d      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80009d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f0      	beq.n	80009bc <HAL_RCC_OscConfig+0x200>
 80009da:	e015      	b.n	8000a08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <HAL_RCC_OscConfig+0x2b4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009e2:	f7ff fdd7 	bl	8000594 <HAL_GetTick>
 80009e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e8:	e008      	b.n	80009fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ea:	f7ff fdd3 	bl	8000594 <HAL_GetTick>
 80009ee:	4602      	mov	r2, r0
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d901      	bls.n	80009fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e116      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 80009fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f0      	bne.n	80009ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80a0 	beq.w	8000b56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10f      	bne.n	8000a46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_RCC_OscConfig+0x2ac>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a42:	2301      	movs	r3, #1
 8000a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_RCC_OscConfig+0x2b8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d121      	bne.n	8000a96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_RCC_OscConfig+0x2b8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_RCC_OscConfig+0x2b8>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fd99 	bl	8000594 <HAL_GetTick>
 8000a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a64:	e011      	b.n	8000a8a <HAL_RCC_OscConfig+0x2ce>
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	42470000 	.word	0x42470000
 8000a70:	42470e80 	.word	0x42470e80
 8000a74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a78:	f7ff fd8c 	bl	8000594 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d901      	bls.n	8000a8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000a86:	2303      	movs	r3, #3
 8000a88:	e0cf      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <HAL_RCC_OscConfig+0x478>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f0      	beq.n	8000a78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d106      	bne.n	8000aac <HAL_RCC_OscConfig+0x2f0>
 8000a9e:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aa2:	4a65      	ldr	r2, [pc, #404]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8000aaa:	e01c      	b.n	8000ae6 <HAL_RCC_OscConfig+0x32a>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d10c      	bne.n	8000ace <HAL_RCC_OscConfig+0x312>
 8000ab4:	4b60      	ldr	r3, [pc, #384]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ab8:	4a5f      	ldr	r2, [pc, #380]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6713      	str	r3, [r2, #112]	; 0x70
 8000ac0:	4b5d      	ldr	r3, [pc, #372]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ac4:	4a5c      	ldr	r2, [pc, #368]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6713      	str	r3, [r2, #112]	; 0x70
 8000acc:	e00b      	b.n	8000ae6 <HAL_RCC_OscConfig+0x32a>
 8000ace:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ad2:	4a59      	ldr	r2, [pc, #356]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8000ada:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000ae0:	f023 0304 	bic.w	r3, r3, #4
 8000ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d015      	beq.n	8000b1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000aee:	f7ff fd51 	bl	8000594 <HAL_GetTick>
 8000af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af4:	e00a      	b.n	8000b0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af6:	f7ff fd4d 	bl	8000594 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e08e      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0ee      	beq.n	8000af6 <HAL_RCC_OscConfig+0x33a>
 8000b18:	e014      	b.n	8000b44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b1a:	f7ff fd3b 	bl	8000594 <HAL_GetTick>
 8000b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b20:	e00a      	b.n	8000b38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd37 	bl	8000594 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d901      	bls.n	8000b38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000b34:	2303      	movs	r3, #3
 8000b36:	e078      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b38:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1ee      	bne.n	8000b22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d105      	bne.n	8000b56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a3a      	ldr	r2, [pc, #232]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d064      	beq.n	8000c28 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d05c      	beq.n	8000c24 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d141      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <HAL_RCC_OscConfig+0x480>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fd0c 	bl	8000594 <HAL_GetTick>
 8000b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b80:	f7ff fd08 	bl	8000594 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e04b      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f0      	bne.n	8000b80 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	061b      	lsls	r3, r3, #24
 8000bc2:	491d      	ldr	r1, [pc, #116]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_RCC_OscConfig+0x480>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bce:	f7ff fce1 	bl	8000594 <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd4:	e008      	b.n	8000be8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd6:	f7ff fcdd 	bl	8000594 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e020      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f0      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x41a>
 8000bf4:	e018      	b.n	8000c28 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_RCC_OscConfig+0x480>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fcca 	bl	8000594 <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c04:	f7ff fcc6 	bl	8000594 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e009      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_RCC_OscConfig+0x47c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f0      	bne.n	8000c04 <HAL_RCC_OscConfig+0x448>
 8000c22:	e001      	b.n	8000c28 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40007000 	.word	0x40007000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	42470060 	.word	0x42470060

08000c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0ca      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c54:	4b67      	ldr	r3, [pc, #412]	; (8000df4 <HAL_RCC_ClockConfig+0x1b4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d90c      	bls.n	8000c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c62:	4b64      	ldr	r3, [pc, #400]	; (8000df4 <HAL_RCC_ClockConfig+0x1b4>)
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6a:	4b62      	ldr	r3, [pc, #392]	; (8000df4 <HAL_RCC_ClockConfig+0x1b4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d001      	beq.n	8000c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e0b6      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d020      	beq.n	8000cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d005      	beq.n	8000cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cac:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb8:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	494c      	ldr	r1, [pc, #304]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d044      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d107      	bne.n	8000cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d119      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e07d      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d003      	beq.n	8000cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d109      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e06d      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e065      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f023 0203 	bic.w	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4933      	ldr	r1, [pc, #204]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d30:	f7ff fc30 	bl	8000594 <HAL_GetTick>
 8000d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d38:	f7ff fc2c 	bl	8000594 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e04d      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 020c 	and.w	r2, r3, #12
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d1eb      	bne.n	8000d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d20c      	bcs.n	8000d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_RCC_ClockConfig+0x1b4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d001      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e030      	b.n	8000dea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	4915      	ldr	r1, [pc, #84]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d009      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	490d      	ldr	r1, [pc, #52]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dc6:	f000 f81d 	bl	8000e04 <HAL_RCC_GetSysClockFreq>
 8000dca:	4601      	mov	r1, r0
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_RCC_ClockConfig+0x1b8>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_RCC_ClockConfig+0x1bc>)
 8000dd8:	5cd3      	ldrb	r3, [r2, r3]
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fb92 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	08001fcc 	.word	0x08001fcc
 8000e00:	20000008 	.word	0x20000008

08000e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e1a:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d007      	beq.n	8000e36 <HAL_RCC_GetSysClockFreq+0x32>
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d008      	beq.n	8000e3c <HAL_RCC_GetSysClockFreq+0x38>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 80b4 	bne.w	8000f98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e30:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8000e32:	60bb      	str	r3, [r7, #8]
       break;
 8000e34:	e0b3      	b.n	8000f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e36:	4b5e      	ldr	r3, [pc, #376]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8000e38:	60bb      	str	r3, [r7, #8]
      break;
 8000e3a:	e0b0      	b.n	8000f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e3c:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e46:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d04a      	beq.n	8000ee8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	099b      	lsrs	r3, r3, #6
 8000e58:	f04f 0400 	mov.w	r4, #0
 8000e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	ea03 0501 	and.w	r5, r3, r1
 8000e68:	ea04 0602 	and.w	r6, r4, r2
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4632      	mov	r2, r6
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	f04f 0400 	mov.w	r4, #0
 8000e78:	0154      	lsls	r4, r2, #5
 8000e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e7e:	014b      	lsls	r3, r1, #5
 8000e80:	4619      	mov	r1, r3
 8000e82:	4622      	mov	r2, r4
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	eb62 0206 	sbc.w	r2, r2, r6
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	f04f 0400 	mov.w	r4, #0
 8000e92:	0194      	lsls	r4, r2, #6
 8000e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e98:	018b      	lsls	r3, r1, #6
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8000ea0:	f04f 0100 	mov.w	r1, #0
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	00e2      	lsls	r2, r4, #3
 8000eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000eae:	00d9      	lsls	r1, r3, #3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	195b      	adds	r3, r3, r5
 8000eb6:	eb44 0406 	adc.w	r4, r4, r6
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	0262      	lsls	r2, r4, #9
 8000ec4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000ec8:	0259      	lsls	r1, r3, #9
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4614      	mov	r4, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f04f 0400 	mov.w	r4, #0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	f7ff f974 	bl	80001c8 <__aeabi_uldivmod>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460c      	mov	r4, r1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e049      	b.n	8000f7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	099b      	lsrs	r3, r3, #6
 8000eee:	f04f 0400 	mov.w	r4, #0
 8000ef2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	ea03 0501 	and.w	r5, r3, r1
 8000efe:	ea04 0602 	and.w	r6, r4, r2
 8000f02:	4629      	mov	r1, r5
 8000f04:	4632      	mov	r2, r6
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	f04f 0400 	mov.w	r4, #0
 8000f0e:	0154      	lsls	r4, r2, #5
 8000f10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f14:	014b      	lsls	r3, r1, #5
 8000f16:	4619      	mov	r1, r3
 8000f18:	4622      	mov	r2, r4
 8000f1a:	1b49      	subs	r1, r1, r5
 8000f1c:	eb62 0206 	sbc.w	r2, r2, r6
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	f04f 0400 	mov.w	r4, #0
 8000f28:	0194      	lsls	r4, r2, #6
 8000f2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f2e:	018b      	lsls	r3, r1, #6
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	eb64 0402 	sbc.w	r4, r4, r2
 8000f36:	f04f 0100 	mov.w	r1, #0
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	00e2      	lsls	r2, r4, #3
 8000f40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f44:	00d9      	lsls	r1, r3, #3
 8000f46:	460b      	mov	r3, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	195b      	adds	r3, r3, r5
 8000f4c:	eb44 0406 	adc.w	r4, r4, r6
 8000f50:	f04f 0100 	mov.w	r1, #0
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	02a2      	lsls	r2, r4, #10
 8000f5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f5e:	0299      	lsls	r1, r3, #10
 8000f60:	460b      	mov	r3, r1
 8000f62:	4614      	mov	r4, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	4621      	mov	r1, r4
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f04f 0400 	mov.w	r4, #0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4623      	mov	r3, r4
 8000f72:	f7ff f929 	bl	80001c8 <__aeabi_uldivmod>
 8000f76:	4603      	mov	r3, r0
 8000f78:	460c      	mov	r4, r1
 8000f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	3301      	adds	r3, #1
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f94:	60bb      	str	r3, [r7, #8]
      break;
 8000f96:	e002      	b.n	8000f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8000f9a:	60bb      	str	r3, [r7, #8]
      break;
 8000f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	00f42400 	.word	0x00f42400
 8000fb0:	007a1200 	.word	0x007a1200

08000fb4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2103      	movs	r1, #3
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	61bb      	str	r3, [r7, #24]
  return result;
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	431a      	orrs	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	431a      	orrs	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	605a      	str	r2, [r3, #4]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001042:	b480      	push	{r7}
 8001044:	b089      	sub	sp, #36	; 0x24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa93 f3a3 	rbit	r3, r3
 800105c:	613b      	str	r3, [r7, #16]
  return result;
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fab3 f383 	clz	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2103      	movs	r1, #3
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	401a      	ands	r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	61bb      	str	r3, [r7, #24]
  return result;
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	431a      	orrs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001094:	bf00      	nop
 8001096:	3724      	adds	r7, #36	; 0x24
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	613b      	str	r3, [r7, #16]
  return result;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2103      	movs	r1, #3
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	61bb      	str	r3, [r7, #24]
  return result;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	60da      	str	r2, [r3, #12]
}
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80010fe:	b480      	push	{r7}
 8001100:	b089      	sub	sp, #36	; 0x24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	613b      	str	r3, [r7, #16]
  return result;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	210f      	movs	r1, #15
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	401a      	ands	r2, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	61bb      	str	r3, [r7, #24]
  return result;
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001150:	bf00      	nop
 8001152:	3724      	adds	r7, #36	; 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	613b      	str	r3, [r7, #16]
  return result;
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	210f      	movs	r1, #15
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	401a      	ands	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	61bb      	str	r3, [r7, #24]
  return result;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b088      	sub	sp, #32
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	613b      	str	r3, [r7, #16]
  return result;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80011e8:	e049      	b.n	800127e <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2101      	movs	r1, #1
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03b      	beq.n	8001278 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	461a      	mov	r2, r3
 8001206:	69b9      	ldr	r1, [r7, #24]
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fed3 	bl	8000fb4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d003      	beq.n	800121e <LL_GPIO_Init+0x60>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d106      	bne.n	800122c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	461a      	mov	r2, r3
 8001224:	69b9      	ldr	r1, [r7, #24]
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff0b 	bl	8001042 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	461a      	mov	r2, r3
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff33 	bl	80010a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d11a      	bne.n	8001278 <LL_GPIO_Init+0xba>
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	60bb      	str	r3, [r7, #8]
  return result;
 800124e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001250:	fab3 f383 	clz	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b07      	cmp	r3, #7
 8001258:	d807      	bhi.n	800126a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	461a      	mov	r2, r3
 8001260:	69b9      	ldr	r1, [r7, #24]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff4b 	bl	80010fe <LL_GPIO_SetAFPin_0_7>
 8001268:	e006      	b.n	8001278 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	461a      	mov	r2, r3
 8001270:	69b9      	ldr	r1, [r7, #24]
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff72 	bl	800115c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3301      	adds	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1ae      	bne.n	80011ea <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d003      	beq.n	800129c <LL_GPIO_Init+0xde>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d107      	bne.n	80012ac <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6819      	ldr	r1, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	461a      	mov	r2, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff feb3 	bl	8001012 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	615a      	str	r2, [r3, #20]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <LL_TIM_Init+0x108>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d013      	beq.n	80013dc <LL_TIM_Init+0x40>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ba:	d00f      	beq.n	80013dc <LL_TIM_Init+0x40>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3a      	ldr	r2, [pc, #232]	; (80014a8 <LL_TIM_Init+0x10c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00b      	beq.n	80013dc <LL_TIM_Init+0x40>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a39      	ldr	r2, [pc, #228]	; (80014ac <LL_TIM_Init+0x110>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d007      	beq.n	80013dc <LL_TIM_Init+0x40>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a38      	ldr	r2, [pc, #224]	; (80014b0 <LL_TIM_Init+0x114>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d003      	beq.n	80013dc <LL_TIM_Init+0x40>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <LL_TIM_Init+0x118>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d106      	bne.n	80013ea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <LL_TIM_Init+0x108>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d02b      	beq.n	800144a <LL_TIM_Init+0xae>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d027      	beq.n	800144a <LL_TIM_Init+0xae>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <LL_TIM_Init+0x10c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d023      	beq.n	800144a <LL_TIM_Init+0xae>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a29      	ldr	r2, [pc, #164]	; (80014ac <LL_TIM_Init+0x110>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <LL_TIM_Init+0xae>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <LL_TIM_Init+0x114>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01b      	beq.n	800144a <LL_TIM_Init+0xae>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <LL_TIM_Init+0x118>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d017      	beq.n	800144a <LL_TIM_Init+0xae>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <LL_TIM_Init+0x11c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <LL_TIM_Init+0xae>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a25      	ldr	r2, [pc, #148]	; (80014bc <LL_TIM_Init+0x120>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00f      	beq.n	800144a <LL_TIM_Init+0xae>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <LL_TIM_Init+0x124>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00b      	beq.n	800144a <LL_TIM_Init+0xae>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <LL_TIM_Init+0x128>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <LL_TIM_Init+0xae>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <LL_TIM_Init+0x12c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d003      	beq.n	800144a <LL_TIM_Init+0xae>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <LL_TIM_Init+0x130>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d106      	bne.n	8001458 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff34 	bl	80012d2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff20 	bl	80012b6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <LL_TIM_Init+0x108>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d003      	beq.n	8001486 <LL_TIM_Init+0xea>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <LL_TIM_Init+0x118>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d105      	bne.n	8001492 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7c1b      	ldrb	r3, [r3, #16]
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff2e 	bl	80012ee <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff71 	bl	800137a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40000400 	.word	0x40000400
 80014ac:	40000800 	.word	0x40000800
 80014b0:	40000c00 	.word	0x40000c00
 80014b4:	40010400 	.word	0x40010400
 80014b8:	40014000 	.word	0x40014000
 80014bc:	40014400 	.word	0x40014400
 80014c0:	40014800 	.word	0x40014800
 80014c4:	40001800 	.word	0x40001800
 80014c8:	40001c00 	.word	0x40001c00
 80014cc:	40002000 	.word	0x40002000

080014d0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d012      	beq.n	800150c <LL_TIM_OC_Init+0x3c>
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d802      	bhi.n	80014f0 <LL_TIM_OC_Init+0x20>
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d007      	beq.n	80014fe <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80014ee:	e022      	b.n	8001536 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80014f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f4:	d011      	beq.n	800151a <LL_TIM_OC_Init+0x4a>
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fa:	d015      	beq.n	8001528 <LL_TIM_OC_Init+0x58>
      break;
 80014fc:	e01b      	b.n	8001536 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f81d 	bl	8001540 <OC1Config>
 8001506:	4603      	mov	r3, r0
 8001508:	75fb      	strb	r3, [r7, #23]
      break;
 800150a:	e014      	b.n	8001536 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f882 	bl	8001618 <OC2Config>
 8001514:	4603      	mov	r3, r0
 8001516:	75fb      	strb	r3, [r7, #23]
      break;
 8001518:	e00d      	b.n	8001536 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f8eb 	bl	80016f8 <OC3Config>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]
      break;
 8001526:	e006      	b.n	8001536 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f954 	bl	80017d8 <OC4Config>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]
      break;
 8001534:	bf00      	nop
  }

  return result;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	f023 0201 	bic.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f023 0202 	bic.w	r2, r3, #2
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f023 0201 	bic.w	r2, r3, #1
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <OC1Config+0xd0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d003      	beq.n	80015aa <OC1Config+0x6a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <OC1Config+0xd4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d11e      	bne.n	80015e8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f023 0208 	bic.w	r2, r3, #8
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f023 0204 	bic.w	r2, r3, #4
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4313      	orrs	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fe85 	bl	800130a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40010000 	.word	0x40010000
 8001614:	40010400 	.word	0x40010400

08001618 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	f023 0210 	bic.w	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	4313      	orrs	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f023 0220 	bic.w	r2, r3, #32
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 0210 	bic.w	r2, r3, #16
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <OC2Config+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d003      	beq.n	8001688 <OC2Config+0x70>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <OC2Config+0xdc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d11f      	bne.n	80016c8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	019b      	lsls	r3, r3, #6
 8001694:	4313      	orrs	r3, r2
 8001696:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	019b      	lsls	r3, r3, #6
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fe23 	bl	8001326 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010400 	.word	0x40010400

080016f8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <OC3Config+0xd8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d003      	beq.n	8001766 <OC3Config+0x6e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <OC3Config+0xdc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d11f      	bne.n	80017a6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	029b      	lsls	r3, r3, #10
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	029b      	lsls	r3, r3, #10
 8001782:	4313      	orrs	r3, r2
 8001784:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	015b      	lsls	r3, r3, #5
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fdc2 	bl	8001342 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010400 	.word	0x40010400

080017d8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	031b      	lsls	r3, r3, #12
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	031b      	lsls	r3, r3, #12
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <OC4Config+0xa8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d003      	beq.n	8001848 <OC4Config+0x70>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <OC4Config+0xac>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d107      	bne.n	8001858 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	019b      	lsls	r3, r3, #6
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fd77 	bl	800135e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40010000 	.word	0x40010000
 8001884:	40010400 	.word	0x40010400

08001888 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4013      	ands	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40023800 	.word	0x40023800

080018d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80018ee:	2080      	movs	r0, #128	; 0x80
 80018f0:	f7ff ffda 	bl	80018a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80018f4:	2004      	movs	r0, #4
 80018f6:	f7ff ffd7 	bl	80018a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018fa:	2002      	movs	r0, #2
 80018fc:	f7ff ffd4 	bl	80018a8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 8001900:	2107      	movs	r1, #7
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <MX_GPIO_Init+0x58>)
 8001904:	f7ff ffc0 	bl	8001888 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001908:	2307      	movs	r3, #7
 800190a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_GPIO_Init+0x58>)
 8001922:	f7ff fc4c 	bl	80011be <LL_GPIO_Init>

}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020800 	.word	0x40020800

08001934 <LL_TIM_EnableCounter>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_TIM_CC_EnableChannel>:
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	621a      	str	r2, [r3, #32]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_TIM_CC_DisableChannel>:
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	621a      	str	r2, [r3, #32]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	405a      	eors	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	615a      	str	r2, [r3, #20]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f7fe fd82 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f834 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f7ff ff86 	bl	80018d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80019cc:	f000 fa2a 	bl	8001e24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80019d0:	4815      	ldr	r0, [pc, #84]	; (8001a28 <main+0x6c>)
 80019d2:	f7ff ffaf 	bl	8001934 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80019d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <main+0x6c>)
 80019dc:	f7ff ffba 	bl	8001954 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <main+0x6c>)
 80019e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80019e8:	2064      	movs	r0, #100	; 0x64
 80019ea:	f7fe fddf 	bl	80005ac <HAL_Delay>
  TIM3->PSC = 1500;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <main+0x6c>)
 80019f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80019f6:	2064      	movs	r0, #100	; 0x64
 80019f8:	f7fe fdd8 	bl	80005ac <HAL_Delay>
  TIM3->PSC = 1000;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <main+0x6c>)
 80019fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001a04:	2064      	movs	r0, #100	; 0x64
 8001a06:	f7fe fdd1 	bl	80005ac <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <main+0x6c>)
 8001a10:	f7ff ffb1 	bl	8001976 <LL_TIM_CC_DisableChannel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8001a14:	2107      	movs	r1, #7
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <main+0x70>)
 8001a18:	f7ff ffbf 	bl	800199a <LL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a20:	f7fe fdc4 	bl	80005ac <HAL_Delay>
	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8001a24:	e7f6      	b.n	8001a14 <main+0x58>
 8001a26:	bf00      	nop
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40020800 	.word	0x40020800

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b094      	sub	sp, #80	; 0x50
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	2230      	movs	r2, #48	; 0x30
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fab0 	bl	8001fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <SystemClock_Config+0xcc>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <SystemClock_Config+0xcc>)
 8001a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <SystemClock_Config+0xcc>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <SystemClock_Config+0xd0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <SystemClock_Config+0xd0>)
 8001a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <SystemClock_Config+0xd0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	2302      	movs	r3, #2
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001aa4:	23a8      	movs	r3, #168	; 0xa8
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aac:	2304      	movs	r3, #4
 8001aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fe81 	bl	80007bc <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ac0:	f000 f820 	bl	8001b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f8ac 	bl	8000c40 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aee:	f000 f809 	bl	8001b04 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	; 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f7fe fcd8 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <SystemInit+0x60>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <SystemInit+0x60>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <SystemInit+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <SystemInit+0x64>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <SystemInit+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <SystemInit+0x64>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <SystemInit+0x64>)
 8001bec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <SystemInit+0x64>)
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <SystemInit+0x68>)
 8001bfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <SystemInit+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <SystemInit+0x64>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <SystemInit+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SystemInit+0x60>)
 8001c10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c14:	609a      	str	r2, [r3, #8]
#endif
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	24003010 	.word	0x24003010

08001c2c <LL_TIM_EnableARRPreload>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_TIM_OC_EnableFast>:
{
 8001c4c:	b4b0      	push	{r4, r5, r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d01c      	beq.n	8001c96 <LL_TIM_OC_EnableFast+0x4a>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d017      	beq.n	8001c92 <LL_TIM_OC_EnableFast+0x46>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d012      	beq.n	8001c8e <LL_TIM_OC_EnableFast+0x42>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b40      	cmp	r3, #64	; 0x40
 8001c6c:	d00d      	beq.n	8001c8a <LL_TIM_OC_EnableFast+0x3e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c74:	d007      	beq.n	8001c86 <LL_TIM_OC_EnableFast+0x3a>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7c:	d101      	bne.n	8001c82 <LL_TIM_OC_EnableFast+0x36>
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e00a      	b.n	8001c98 <LL_TIM_OC_EnableFast+0x4c>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e008      	b.n	8001c98 <LL_TIM_OC_EnableFast+0x4c>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <LL_TIM_OC_EnableFast+0x4c>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <LL_TIM_OC_EnableFast+0x4c>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <LL_TIM_OC_EnableFast+0x4c>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_TIM_OC_EnableFast+0x4c>
 8001c96:	2300      	movs	r3, #0
 8001c98:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3318      	adds	r3, #24
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <LL_TIM_OC_EnableFast+0x7c>)
 8001ca4:	5c5b      	ldrb	r3, [r3, r1]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	4629      	mov	r1, r5
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <LL_TIM_OC_EnableFast+0x80>)
 8001cb0:	5c5b      	ldrb	r3, [r3, r1]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	408b      	lsls	r3, r1
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	6023      	str	r3, [r4, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bcb0      	pop	{r4, r5, r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	08001fdc 	.word	0x08001fdc
 8001ccc:	08001fe4 	.word	0x08001fe4

08001cd0 <LL_TIM_OC_EnablePreload>:
{
 8001cd0:	b4b0      	push	{r4, r5, r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d01c      	beq.n	8001d1a <LL_TIM_OC_EnablePreload+0x4a>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d017      	beq.n	8001d16 <LL_TIM_OC_EnablePreload+0x46>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d012      	beq.n	8001d12 <LL_TIM_OC_EnablePreload+0x42>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d00d      	beq.n	8001d0e <LL_TIM_OC_EnablePreload+0x3e>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf8:	d007      	beq.n	8001d0a <LL_TIM_OC_EnablePreload+0x3a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d00:	d101      	bne.n	8001d06 <LL_TIM_OC_EnablePreload+0x36>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e00a      	b.n	8001d1c <LL_TIM_OC_EnablePreload+0x4c>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e008      	b.n	8001d1c <LL_TIM_OC_EnablePreload+0x4c>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e006      	b.n	8001d1c <LL_TIM_OC_EnablePreload+0x4c>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <LL_TIM_OC_EnablePreload+0x4c>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <LL_TIM_OC_EnablePreload+0x4c>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_TIM_OC_EnablePreload+0x4c>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3318      	adds	r3, #24
 8001d22:	461a      	mov	r2, r3
 8001d24:	4629      	mov	r1, r5
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <LL_TIM_OC_EnablePreload+0x7c>)
 8001d28:	5c5b      	ldrb	r3, [r3, r1]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	4629      	mov	r1, r5
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <LL_TIM_OC_EnablePreload+0x80>)
 8001d34:	5c5b      	ldrb	r3, [r3, r1]
 8001d36:	4619      	mov	r1, r3
 8001d38:	2308      	movs	r3, #8
 8001d3a:	408b      	lsls	r3, r1
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	6023      	str	r3, [r4, #0]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bcb0      	pop	{r4, r5, r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	08001fdc 	.word	0x08001fdc
 8001d50:	08001fe4 	.word	0x08001fe4

08001d54 <LL_TIM_SetClockSource>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d66:	f023 0307 	bic.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_TIM_SetTriggerOutput>:
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	605a      	str	r2, [r3, #4]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_TIM_DisableMasterSlaveMode>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_AHB1_GRP1_EnableClock>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40023800 	.word	0x40023800

08001df4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40023800 	.word	0x40023800

08001e24 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	; 0x50
 8001e28:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	2220      	movs	r2, #32
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f8ae 	bl	8001fa4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	611a      	str	r2, [r3, #16]
 8001e56:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7ff ffcb 	bl	8001df4 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 8001e5e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e64:	2300      	movs	r3, #0
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8001e68:	2314      	movs	r3, #20
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001e70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e74:	4619      	mov	r1, r3
 8001e76:	4822      	ldr	r0, [pc, #136]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001e78:	f7ff fa90 	bl	800139c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001e7c:	4820      	ldr	r0, [pc, #128]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001e7e:	f7ff fed5 	bl	8001c2c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001e82:	2100      	movs	r1, #0
 8001e84:	481e      	ldr	r0, [pc, #120]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001e86:	f7ff ff65 	bl	8001d54 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8e:	481c      	ldr	r0, [pc, #112]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001e90:	f7ff ff1e 	bl	8001cd0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001e94:	2360      	movs	r3, #96	; 0x60
 8001e96:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	461a      	mov	r2, r3
 8001eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb2:	4813      	ldr	r0, [pc, #76]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001eb4:	f7ff fb0c 	bl	80014d0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ebc:	4810      	ldr	r0, [pc, #64]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001ebe:	f7ff fec5 	bl	8001c4c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001ec6:	f7ff ff5a 	bl	8001d7e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001eca:	480d      	ldr	r0, [pc, #52]	; (8001f00 <MX_TIM3_Init+0xdc>)
 8001ecc:	f7ff ff6a 	bl	8001da4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7ff ff77 	bl	8001dc4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eda:	2302      	movs	r3, #2
 8001edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MX_TIM3_Init+0xe0>)
 8001ef4:	f7ff f963 	bl	80011be <LL_GPIO_Init>

}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	; 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40020400 	.word	0x40020400

08001f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f0e:	e003      	b.n	8001f18 <LoopCopyDataInit>

08001f10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f16:	3104      	adds	r1, #4

08001f18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f20:	d3f6      	bcc.n	8001f10 <CopyDataInit>
  ldr  r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f24:	e002      	b.n	8001f2c <LoopFillZerobss>

08001f26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f28:	f842 3b04 	str.w	r3, [r2], #4

08001f2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f30:	d3f9      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f32:	f7ff fe45 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f000 f811 	bl	8001f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3a:	f7ff fd3f 	bl	80019bc <main>
  bx  lr    
 8001f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f44:	08001ffc 	.word	0x08001ffc
  ldr  r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f4c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001f50:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001f54:	2000002c 	.word	0x2000002c

08001f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC_IRQHandler>
	...

08001f5c <__libc_init_array>:
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	4e0d      	ldr	r6, [pc, #52]	; (8001f94 <__libc_init_array+0x38>)
 8001f60:	4c0d      	ldr	r4, [pc, #52]	; (8001f98 <__libc_init_array+0x3c>)
 8001f62:	1ba4      	subs	r4, r4, r6
 8001f64:	10a4      	asrs	r4, r4, #2
 8001f66:	2500      	movs	r5, #0
 8001f68:	42a5      	cmp	r5, r4
 8001f6a:	d109      	bne.n	8001f80 <__libc_init_array+0x24>
 8001f6c:	4e0b      	ldr	r6, [pc, #44]	; (8001f9c <__libc_init_array+0x40>)
 8001f6e:	4c0c      	ldr	r4, [pc, #48]	; (8001fa0 <__libc_init_array+0x44>)
 8001f70:	f000 f820 	bl	8001fb4 <_init>
 8001f74:	1ba4      	subs	r4, r4, r6
 8001f76:	10a4      	asrs	r4, r4, #2
 8001f78:	2500      	movs	r5, #0
 8001f7a:	42a5      	cmp	r5, r4
 8001f7c:	d105      	bne.n	8001f8a <__libc_init_array+0x2e>
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f84:	4798      	blx	r3
 8001f86:	3501      	adds	r5, #1
 8001f88:	e7ee      	b.n	8001f68 <__libc_init_array+0xc>
 8001f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f8e:	4798      	blx	r3
 8001f90:	3501      	adds	r5, #1
 8001f92:	e7f2      	b.n	8001f7a <__libc_init_array+0x1e>
 8001f94:	08001ff4 	.word	0x08001ff4
 8001f98:	08001ff4 	.word	0x08001ff4
 8001f9c:	08001ff4 	.word	0x08001ff4
 8001fa0:	08001ff8 	.word	0x08001ff8

08001fa4 <memset>:
 8001fa4:	4402      	add	r2, r0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d100      	bne.n	8001fae <memset+0xa>
 8001fac:	4770      	bx	lr
 8001fae:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb2:	e7f9      	b.n	8001fa8 <memset+0x4>

08001fb4 <_init>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_fini>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	bf00      	nop
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr
