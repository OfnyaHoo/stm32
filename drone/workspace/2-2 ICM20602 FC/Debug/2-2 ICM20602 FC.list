
2-2 ICM20602 FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004700  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08004890  08004890  00014890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a70  08004a70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a78  08004a78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004af0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004af0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc3f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000264d  00000000  00000000  0002ccdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00030028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002366a  00000000  00000000  00030bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b216  00000000  00000000  0005425a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c833f  00000000  00000000  0005f470  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001277af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a28  00000000  00000000  0012782c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004878 	.word	0x08004878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004878 	.word	0x08004878

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f92f 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f002 fdaa 	bl	80030fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f939 	bl	800084a <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f90f 	bl	8000812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200000a0 	.word	0x200000a0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000a0 	.word	0x200000a0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c8:	d301      	bcc.n	80007ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00f      	b.n	80007ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <SysTick_Config+0x40>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d6:	210f      	movs	r1, #15
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f7ff ff8e 	bl	80006fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SysTick_Config+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SysTick_Config+0x40>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000e010 	.word	0xe000e010

080007fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff47 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff5c 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff8e 	bl	8000750 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5d 	bl	80006fc <__NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffb0 	bl	80007b8 <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d101      	bne.n	8000876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e22d      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d075      	beq.n	800096e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000882:	4ba3      	ldr	r3, [pc, #652]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	f003 030c 	and.w	r3, r3, #12
 800088a:	2b04      	cmp	r3, #4
 800088c:	d00c      	beq.n	80008a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800088e:	4ba0      	ldr	r3, [pc, #640]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000896:	2b08      	cmp	r3, #8
 8000898:	d112      	bne.n	80008c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089a:	4b9d      	ldr	r3, [pc, #628]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008a6:	d10b      	bne.n	80008c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a8:	4b99      	ldr	r3, [pc, #612]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d05b      	beq.n	800096c <HAL_RCC_OscConfig+0x108>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d157      	bne.n	800096c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	e208      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c8:	d106      	bne.n	80008d8 <HAL_RCC_OscConfig+0x74>
 80008ca:	4b91      	ldr	r3, [pc, #580]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a90      	ldr	r2, [pc, #576]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e01d      	b.n	8000914 <HAL_RCC_OscConfig+0xb0>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d10c      	bne.n	80008fc <HAL_RCC_OscConfig+0x98>
 80008e2:	4b8b      	ldr	r3, [pc, #556]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a8a      	ldr	r2, [pc, #552]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b88      	ldr	r3, [pc, #544]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a87      	ldr	r2, [pc, #540]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e00b      	b.n	8000914 <HAL_RCC_OscConfig+0xb0>
 80008fc:	4b84      	ldr	r3, [pc, #528]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a83      	ldr	r2, [pc, #524]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a80      	ldr	r2, [pc, #512]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d013      	beq.n	8000944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091c:	f7ff fe8e 	bl	800063c <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fe8a 	bl	800063c <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b64      	cmp	r3, #100	; 0x64
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e1cd      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000936:	4b76      	ldr	r3, [pc, #472]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f0      	beq.n	8000924 <HAL_RCC_OscConfig+0xc0>
 8000942:	e014      	b.n	800096e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000944:	f7ff fe7a 	bl	800063c <HAL_GetTick>
 8000948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094a:	e008      	b.n	800095e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094c:	f7ff fe76 	bl	800063c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b64      	cmp	r3, #100	; 0x64
 8000958:	d901      	bls.n	800095e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800095a:	2303      	movs	r3, #3
 800095c:	e1b9      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095e:	4b6c      	ldr	r3, [pc, #432]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f0      	bne.n	800094c <HAL_RCC_OscConfig+0xe8>
 800096a:	e000      	b.n	800096e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d063      	beq.n	8000a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800097a:	4b65      	ldr	r3, [pc, #404]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00b      	beq.n	800099e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000986:	4b62      	ldr	r3, [pc, #392]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800098e:	2b08      	cmp	r3, #8
 8000990:	d11c      	bne.n	80009cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000992:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d116      	bne.n	80009cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099e:	4b5c      	ldr	r3, [pc, #368]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <HAL_RCC_OscConfig+0x152>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d001      	beq.n	80009b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e18d      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b6:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4952      	ldr	r1, [pc, #328]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ca:	e03a      	b.n	8000a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d020      	beq.n	8000a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009d4:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009da:	f7ff fe2f 	bl	800063c <HAL_GetTick>
 80009de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	e008      	b.n	80009f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fe2b 	bl	800063c <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e16e      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f0      	beq.n	80009e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4940      	ldr	r1, [pc, #256]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	e015      	b.n	8000a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fe0e 	bl	800063c <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fe0a 	bl	800063c <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e14d      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f0      	bne.n	8000a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d030      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d016      	beq.n	8000a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_RCC_OscConfig+0x2b4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fdee 	bl	800063c <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a62:	e008      	b.n	8000a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fdea 	bl	800063c <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d901      	bls.n	8000a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e12d      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f0      	beq.n	8000a64 <HAL_RCC_OscConfig+0x200>
 8000a82:	e015      	b.n	8000ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_RCC_OscConfig+0x2b4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a8a:	f7ff fdd7 	bl	800063c <HAL_GetTick>
 8000a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	e008      	b.n	8000aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a92:	f7ff fdd3 	bl	800063c <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d901      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e116      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f0      	bne.n	8000a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f000 80a0 	beq.w	8000bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_RCC_OscConfig+0x2ac>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000aea:	2301      	movs	r3, #1
 8000aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_RCC_OscConfig+0x2b8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d121      	bne.n	8000b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_RCC_OscConfig+0x2b8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_RCC_OscConfig+0x2b8>)
 8000b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fd99 	bl	800063c <HAL_GetTick>
 8000b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b0c:	e011      	b.n	8000b32 <HAL_RCC_OscConfig+0x2ce>
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	42470000 	.word	0x42470000
 8000b18:	42470e80 	.word	0x42470e80
 8000b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b20:	f7ff fd8c 	bl	800063c <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e0cf      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b32:	4b6a      	ldr	r3, [pc, #424]	; (8000cdc <HAL_RCC_OscConfig+0x478>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f0      	beq.n	8000b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d106      	bne.n	8000b54 <HAL_RCC_OscConfig+0x2f0>
 8000b46:	4b66      	ldr	r3, [pc, #408]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b4a:	4a65      	ldr	r2, [pc, #404]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6713      	str	r3, [r2, #112]	; 0x70
 8000b52:	e01c      	b.n	8000b8e <HAL_RCC_OscConfig+0x32a>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	2b05      	cmp	r3, #5
 8000b5a:	d10c      	bne.n	8000b76 <HAL_RCC_OscConfig+0x312>
 8000b5c:	4b60      	ldr	r3, [pc, #384]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b60:	4a5f      	ldr	r2, [pc, #380]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6713      	str	r3, [r2, #112]	; 0x70
 8000b68:	4b5d      	ldr	r3, [pc, #372]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b6c:	4a5c      	ldr	r2, [pc, #368]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6713      	str	r3, [r2, #112]	; 0x70
 8000b74:	e00b      	b.n	8000b8e <HAL_RCC_OscConfig+0x32a>
 8000b76:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b7a:	4a59      	ldr	r2, [pc, #356]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
 8000b80:	6713      	str	r3, [r2, #112]	; 0x70
 8000b82:	4b57      	ldr	r3, [pc, #348]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b86:	4a56      	ldr	r2, [pc, #344]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d015      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b96:	f7ff fd51 	bl	800063c <HAL_GetTick>
 8000b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b9c:	e00a      	b.n	8000bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9e:	f7ff fd4d 	bl	800063c <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e08e      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0ee      	beq.n	8000b9e <HAL_RCC_OscConfig+0x33a>
 8000bc0:	e014      	b.n	8000bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bc2:	f7ff fd3b 	bl	800063c <HAL_GetTick>
 8000bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc8:	e00a      	b.n	8000be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bca:	f7ff fd37 	bl	800063c <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d901      	bls.n	8000be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e078      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be0:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1ee      	bne.n	8000bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d105      	bne.n	8000bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d064      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d05c      	beq.n	8000ccc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d141      	bne.n	8000c9e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c1a:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <HAL_RCC_OscConfig+0x480>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fd0c 	bl	800063c <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fd08 	bl	800063c <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e04b      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f0      	bne.n	8000c28 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69da      	ldr	r2, [r3, #28]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	085b      	lsrs	r3, r3, #1
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	041b      	lsls	r3, r3, #16
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	061b      	lsls	r3, r3, #24
 8000c6a:	491d      	ldr	r1, [pc, #116]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_RCC_OscConfig+0x480>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c76:	f7ff fce1 	bl	800063c <HAL_GetTick>
 8000c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c7c:	e008      	b.n	8000c90 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7e:	f7ff fcdd 	bl	800063c <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d901      	bls.n	8000c90 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e020      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f0      	beq.n	8000c7e <HAL_RCC_OscConfig+0x41a>
 8000c9c:	e018      	b.n	8000cd0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_RCC_OscConfig+0x480>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fcca 	bl	800063c <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cac:	f7ff fcc6 	bl	800063c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e009      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_RCC_OscConfig+0x47c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x448>
 8000cca:	e001      	b.n	8000cd0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40007000 	.word	0x40007000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	42470060 	.word	0x42470060

08000ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e0ca      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cfc:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <HAL_RCC_ClockConfig+0x1b4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d90c      	bls.n	8000d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <HAL_RCC_ClockConfig+0x1b4>)
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d12:	4b62      	ldr	r3, [pc, #392]	; (8000e9c <HAL_RCC_ClockConfig+0x1b4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d001      	beq.n	8000d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e0b6      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d020      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3c:	4b58      	ldr	r3, [pc, #352]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a57      	ldr	r2, [pc, #348]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d54:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d60:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	494c      	ldr	r1, [pc, #304]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d044      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d107      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d119      	bne.n	8000dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e07d      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d003      	beq.n	8000da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d107      	bne.n	8000db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e06d      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e065      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dc6:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f023 0203 	bic.w	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4933      	ldr	r1, [pc, #204]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dd8:	f7ff fc30 	bl	800063c <HAL_GetTick>
 8000ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dde:	e00a      	b.n	8000df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de0:	f7ff fc2c 	bl	800063c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e04d      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 020c 	and.w	r2, r3, #12
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d1eb      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_RCC_ClockConfig+0x1b4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d20c      	bcs.n	8000e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_RCC_ClockConfig+0x1b4>)
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_RCC_ClockConfig+0x1b4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d001      	beq.n	8000e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e030      	b.n	8000e92 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4915      	ldr	r1, [pc, #84]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e6e:	f000 f81d 	bl	8000eac <HAL_RCC_GetSysClockFreq>
 8000e72:	4601      	mov	r1, r0
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	fa21 f303 	lsr.w	r3, r1, r3
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fb92 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	080049b0 	.word	0x080049b0
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d007      	beq.n	8000ede <HAL_RCC_GetSysClockFreq+0x32>
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d008      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x38>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 80b4 	bne.w	8001040 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8000eda:	60bb      	str	r3, [r7, #8]
       break;
 8000edc:	e0b3      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000ede:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8000ee0:	60bb      	str	r3, [r7, #8]
      break;
 8000ee2:	e0b0      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ee4:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eee:	4b58      	ldr	r3, [pc, #352]	; (8001050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d04a      	beq.n	8000f90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efa:	4b55      	ldr	r3, [pc, #340]	; (8001050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	099b      	lsrs	r3, r3, #6
 8000f00:	f04f 0400 	mov.w	r4, #0
 8000f04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	ea03 0501 	and.w	r5, r3, r1
 8000f10:	ea04 0602 	and.w	r6, r4, r2
 8000f14:	4629      	mov	r1, r5
 8000f16:	4632      	mov	r2, r6
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f04f 0400 	mov.w	r4, #0
 8000f20:	0154      	lsls	r4, r2, #5
 8000f22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f26:	014b      	lsls	r3, r1, #5
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	eb62 0206 	sbc.w	r2, r2, r6
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	f04f 0400 	mov.w	r4, #0
 8000f3a:	0194      	lsls	r4, r2, #6
 8000f3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f40:	018b      	lsls	r3, r1, #6
 8000f42:	1a5b      	subs	r3, r3, r1
 8000f44:	eb64 0402 	sbc.w	r4, r4, r2
 8000f48:	f04f 0100 	mov.w	r1, #0
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	00e2      	lsls	r2, r4, #3
 8000f52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f56:	00d9      	lsls	r1, r3, #3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4614      	mov	r4, r2
 8000f5c:	195b      	adds	r3, r3, r5
 8000f5e:	eb44 0406 	adc.w	r4, r4, r6
 8000f62:	f04f 0100 	mov.w	r1, #0
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	0262      	lsls	r2, r4, #9
 8000f6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000f70:	0259      	lsls	r1, r3, #9
 8000f72:	460b      	mov	r3, r1
 8000f74:	4614      	mov	r4, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f04f 0400 	mov.w	r4, #0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	f7ff f974 	bl	8000270 <__aeabi_uldivmod>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e049      	b.n	8001024 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	099b      	lsrs	r3, r3, #6
 8000f96:	f04f 0400 	mov.w	r4, #0
 8000f9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	ea03 0501 	and.w	r5, r3, r1
 8000fa6:	ea04 0602 	and.w	r6, r4, r2
 8000faa:	4629      	mov	r1, r5
 8000fac:	4632      	mov	r2, r6
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	f04f 0400 	mov.w	r4, #0
 8000fb6:	0154      	lsls	r4, r2, #5
 8000fb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fbc:	014b      	lsls	r3, r1, #5
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	1b49      	subs	r1, r1, r5
 8000fc4:	eb62 0206 	sbc.w	r2, r2, r6
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	f04f 0400 	mov.w	r4, #0
 8000fd0:	0194      	lsls	r4, r2, #6
 8000fd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000fd6:	018b      	lsls	r3, r1, #6
 8000fd8:	1a5b      	subs	r3, r3, r1
 8000fda:	eb64 0402 	sbc.w	r4, r4, r2
 8000fde:	f04f 0100 	mov.w	r1, #0
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	00e2      	lsls	r2, r4, #3
 8000fe8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000fec:	00d9      	lsls	r1, r3, #3
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4614      	mov	r4, r2
 8000ff2:	195b      	adds	r3, r3, r5
 8000ff4:	eb44 0406 	adc.w	r4, r4, r6
 8000ff8:	f04f 0100 	mov.w	r1, #0
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	02a2      	lsls	r2, r4, #10
 8001002:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001006:	0299      	lsls	r1, r3, #10
 8001008:	460b      	mov	r3, r1
 800100a:	4614      	mov	r4, r2
 800100c:	4618      	mov	r0, r3
 800100e:	4621      	mov	r1, r4
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f04f 0400 	mov.w	r4, #0
 8001016:	461a      	mov	r2, r3
 8001018:	4623      	mov	r3, r4
 800101a:	f7ff f929 	bl	8000270 <__aeabi_uldivmod>
 800101e:	4603      	mov	r3, r0
 8001020:	460c      	mov	r4, r1
 8001022:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	3301      	adds	r3, #1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	60bb      	str	r3, [r7, #8]
      break;
 800103e:	e002      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001042:	60bb      	str	r3, [r7, #8]
      break;
 8001044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001046:	68bb      	ldr	r3, [r7, #8]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	00f42400 	.word	0x00f42400
 8001058:	007a1200 	.word	0x007a1200

0800105c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2103      	movs	r1, #3
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	61bb      	str	r3, [r7, #24]
  return result;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	431a      	orrs	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	431a      	orrs	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	605a      	str	r2, [r3, #4]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b089      	sub	sp, #36	; 0x24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	613b      	str	r3, [r7, #16]
  return result;
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2103      	movs	r1, #3
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	61bb      	str	r3, [r7, #24]
  return result;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	431a      	orrs	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800113c:	bf00      	nop
 800113e:	3724      	adds	r7, #36	; 0x24
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	613b      	str	r3, [r7, #16]
  return result;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	fab3 f383 	clz	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2103      	movs	r1, #3
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	401a      	ands	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	fa93 f3a3 	rbit	r3, r3
 8001182:	61bb      	str	r3, [r7, #24]
  return result;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fab3 f383 	clz	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	60da      	str	r2, [r3, #12]
}
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b089      	sub	sp, #36	; 0x24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	613b      	str	r3, [r7, #16]
  return result;
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	210f      	movs	r1, #15
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	401a      	ands	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	61bb      	str	r3, [r7, #24]
  return result;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80011f8:	bf00      	nop
 80011fa:	3724      	adds	r7, #36	; 0x24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	613b      	str	r3, [r7, #16]
  return result;
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	210f      	movs	r1, #15
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	401a      	ands	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	61bb      	str	r3, [r7, #24]
  return result;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b088      	sub	sp, #32
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	613b      	str	r3, [r7, #16]
  return result;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001290:	e049      	b.n	8001326 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2101      	movs	r1, #1
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d03b      	beq.n	8001320 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	461a      	mov	r2, r3
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fed3 	bl	800105c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d003      	beq.n	80012c6 <LL_GPIO_Init+0x60>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d106      	bne.n	80012d4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	461a      	mov	r2, r3
 80012cc:	69b9      	ldr	r1, [r7, #24]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff0b 	bl	80010ea <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	461a      	mov	r2, r3
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff33 	bl	8001148 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d11a      	bne.n	8001320 <LL_GPIO_Init+0xba>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	60bb      	str	r3, [r7, #8]
  return result;
 80012f6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b07      	cmp	r3, #7
 8001300:	d807      	bhi.n	8001312 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	461a      	mov	r2, r3
 8001308:	69b9      	ldr	r1, [r7, #24]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff4b 	bl	80011a6 <LL_GPIO_SetAFPin_0_7>
 8001310:	e006      	b.n	8001320 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	461a      	mov	r2, r3
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff72 	bl	8001204 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3301      	adds	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ae      	bne.n	8001292 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d003      	beq.n	8001344 <LL_GPIO_Init+0xde>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d107      	bne.n	8001354 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	461a      	mov	r2, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff feb3 	bl	80010ba <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <LL_RCC_GetSysClkSource+0x18>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <LL_RCC_GetAHBPrescaler+0x18>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <LL_RCC_PLL_GetMainSource+0x18>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <LL_RCC_PLL_GetN+0x18>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40023800 	.word	0x40023800

08001408 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <LL_RCC_PLL_GetP+0x18>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <LL_RCC_PLL_GetDivider+0x18>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001448:	f000 f820 	bl	800148c <RCC_GetSystemClockFreq>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f83e 	bl	80014d8 <RCC_GetHCLKClockFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f84c 	bl	8001504 <RCC_GetPCLK1ClockFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f858 	bl	800152c <RCC_GetPCLK2ClockFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60da      	str	r2, [r3, #12]
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001496:	f7ff ff63 	bl	8001360 <LL_RCC_GetSysClkSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b04      	cmp	r3, #4
 800149e:	d006      	beq.n	80014ae <RCC_GetSystemClockFreq+0x22>
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d007      	beq.n	80014b4 <RCC_GetSystemClockFreq+0x28>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10a      	bne.n	80014be <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <RCC_GetSystemClockFreq+0x44>)
 80014aa:	607b      	str	r3, [r7, #4]
      break;
 80014ac:	e00a      	b.n	80014c4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <RCC_GetSystemClockFreq+0x48>)
 80014b0:	607b      	str	r3, [r7, #4]
      break;
 80014b2:	e007      	b.n	80014c4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80014b4:	2008      	movs	r0, #8
 80014b6:	f000 f84d 	bl	8001554 <RCC_PLL_GetFreqDomain_SYS>
 80014ba:	6078      	str	r0, [r7, #4]
      break;
 80014bc:	e002      	b.n	80014c4 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <RCC_GetSystemClockFreq+0x44>)
 80014c0:	607b      	str	r3, [r7, #4]
      break;
 80014c2:	bf00      	nop
  }

  return frequency;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	00f42400 	.word	0x00f42400
 80014d4:	007a1200 	.word	0x007a1200

080014d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80014e0:	f7ff ff4c 	bl	800137c <LL_RCC_GetAHBPrescaler>
 80014e4:	4603      	mov	r3, r0
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <RCC_GetHCLKClockFreq+0x28>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	40d3      	lsrs	r3, r2
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	080049b0 	.word	0x080049b0

08001504 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800150c:	f7ff ff44 	bl	8001398 <LL_RCC_GetAPB1Prescaler>
 8001510:	4603      	mov	r3, r0
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <RCC_GetPCLK1ClockFreq+0x24>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	40d3      	lsrs	r3, r2
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	080049c0 	.word	0x080049c0

0800152c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001534:	f7ff ff3e 	bl	80013b4 <LL_RCC_GetAPB2Prescaler>
 8001538:	4603      	mov	r3, r0
 800153a:	0b5b      	lsrs	r3, r3, #13
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <RCC_GetPCLK2ClockFreq+0x24>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	40d3      	lsrs	r3, r2
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	080049c0 	.word	0x080049c0

08001554 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001568:	f7ff ff32 	bl	80013d0 <LL_RCC_PLL_GetMainSource>
 800156c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001578:	d003      	beq.n	8001582 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800157a:	e005      	b.n	8001588 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800157e:	617b      	str	r3, [r7, #20]
      break;
 8001580:	e005      	b.n	800158e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001584:	617b      	str	r3, [r7, #20]
      break;
 8001586:	e002      	b.n	800158e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800158a:	617b      	str	r3, [r7, #20]
      break;
 800158c:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d113      	bne.n	80015bc <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001594:	f7ff ff46 	bl	8001424 <LL_RCC_PLL_GetDivider>
 8001598:	4602      	mov	r2, r0
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fbb3 f4f2 	udiv	r4, r3, r2
 80015a0:	f7ff ff24 	bl	80013ec <LL_RCC_PLL_GetN>
 80015a4:	4603      	mov	r3, r0
 80015a6:	fb03 f404 	mul.w	r4, r3, r4
 80015aa:	f7ff ff2d 	bl	8001408 <LL_RCC_PLL_GetP>
 80015ae:	4603      	mov	r3, r0
 80015b0:	0c1b      	lsrs	r3, r3, #16
 80015b2:	3301      	adds	r3, #1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fbb4 f3f3 	udiv	r3, r4, r3
 80015ba:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80015bc:	693b      	ldr	r3, [r7, #16]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00f42400 	.word	0x00f42400
 80015cc:	007a1200 	.word	0x007a1200

080015d0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e0:	2b40      	cmp	r3, #64	; 0x40
 80015e2:	d101      	bne.n	80015e8 <LL_SPI_IsEnabled+0x18>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_SPI_IsEnabled+0x1a>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	611a      	str	r2, [r3, #16]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffd3 	bl	80015d0 <LL_SPI_IsEnabled>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d139      	bne.n	80016a4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001638:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	6811      	ldr	r1, [r2, #0]
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	6852      	ldr	r2, [r2, #4]
 8001644:	4311      	orrs	r1, r2
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	4311      	orrs	r1, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	68d2      	ldr	r2, [r2, #12]
 8001650:	4311      	orrs	r1, r2
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	6912      	ldr	r2, [r2, #16]
 8001656:	4311      	orrs	r1, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	6952      	ldr	r2, [r2, #20]
 800165c:	4311      	orrs	r1, r2
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	6992      	ldr	r2, [r2, #24]
 8001662:	4311      	orrs	r1, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	69d2      	ldr	r2, [r2, #28]
 8001668:	4311      	orrs	r1, r2
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	6a12      	ldr	r2, [r2, #32]
 800166e:	430a      	orrs	r2, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f023 0204 	bic.w	r2, r3, #4
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001692:	d105      	bne.n	80016a0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffab 	bl	80015f6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	61da      	str	r2, [r3, #28]
  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	615a      	str	r2, [r3, #20]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <LL_TIM_Init+0x108>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d013      	beq.n	80017e0 <LL_TIM_Init+0x40>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017be:	d00f      	beq.n	80017e0 <LL_TIM_Init+0x40>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <LL_TIM_Init+0x10c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00b      	beq.n	80017e0 <LL_TIM_Init+0x40>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <LL_TIM_Init+0x110>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <LL_TIM_Init+0x40>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a38      	ldr	r2, [pc, #224]	; (80018b4 <LL_TIM_Init+0x114>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d003      	beq.n	80017e0 <LL_TIM_Init+0x40>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a37      	ldr	r2, [pc, #220]	; (80018b8 <LL_TIM_Init+0x118>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d106      	bne.n	80017ee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <LL_TIM_Init+0x108>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <LL_TIM_Init+0xae>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fc:	d027      	beq.n	800184e <LL_TIM_Init+0xae>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <LL_TIM_Init+0x10c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d023      	beq.n	800184e <LL_TIM_Init+0xae>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <LL_TIM_Init+0x110>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01f      	beq.n	800184e <LL_TIM_Init+0xae>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <LL_TIM_Init+0x114>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01b      	beq.n	800184e <LL_TIM_Init+0xae>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <LL_TIM_Init+0x118>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d017      	beq.n	800184e <LL_TIM_Init+0xae>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <LL_TIM_Init+0x11c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <LL_TIM_Init+0xae>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <LL_TIM_Init+0x120>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00f      	beq.n	800184e <LL_TIM_Init+0xae>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <LL_TIM_Init+0x124>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00b      	beq.n	800184e <LL_TIM_Init+0xae>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <LL_TIM_Init+0x128>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <LL_TIM_Init+0xae>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <LL_TIM_Init+0x12c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d003      	beq.n	800184e <LL_TIM_Init+0xae>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <LL_TIM_Init+0x130>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d106      	bne.n	800185c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff34 	bl	80016d6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff20 	bl	80016ba <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LL_TIM_Init+0x108>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d003      	beq.n	800188a <LL_TIM_Init+0xea>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <LL_TIM_Init+0x118>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d105      	bne.n	8001896 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	7c1b      	ldrb	r3, [r3, #16]
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff2e 	bl	80016f2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff71 	bl	800177e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40000800 	.word	0x40000800
 80018b4:	40000c00 	.word	0x40000c00
 80018b8:	40010400 	.word	0x40010400
 80018bc:	40014000 	.word	0x40014000
 80018c0:	40014400 	.word	0x40014400
 80018c4:	40014800 	.word	0x40014800
 80018c8:	40001800 	.word	0x40001800
 80018cc:	40001c00 	.word	0x40001c00
 80018d0:	40002000 	.word	0x40002000

080018d4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d012      	beq.n	8001910 <LL_TIM_OC_Init+0x3c>
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d802      	bhi.n	80018f4 <LL_TIM_OC_Init+0x20>
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d007      	beq.n	8001902 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80018f2:	e022      	b.n	800193a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80018f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f8:	d011      	beq.n	800191e <LL_TIM_OC_Init+0x4a>
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	d015      	beq.n	800192c <LL_TIM_OC_Init+0x58>
      break;
 8001900:	e01b      	b.n	800193a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f81d 	bl	8001944 <OC1Config>
 800190a:	4603      	mov	r3, r0
 800190c:	75fb      	strb	r3, [r7, #23]
      break;
 800190e:	e014      	b.n	800193a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f882 	bl	8001a1c <OC2Config>
 8001918:	4603      	mov	r3, r0
 800191a:	75fb      	strb	r3, [r7, #23]
      break;
 800191c:	e00d      	b.n	800193a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f8eb 	bl	8001afc <OC3Config>
 8001926:	4603      	mov	r3, r0
 8001928:	75fb      	strb	r3, [r7, #23]
      break;
 800192a:	e006      	b.n	800193a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f954 	bl	8001bdc <OC4Config>
 8001934:	4603      	mov	r3, r0
 8001936:	75fb      	strb	r3, [r7, #23]
      break;
 8001938:	bf00      	nop
  }

  return result;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	f023 0201 	bic.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f023 0202 	bic.w	r2, r3, #2
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f023 0201 	bic.w	r2, r3, #1
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <OC1Config+0xd0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d003      	beq.n	80019ae <OC1Config+0x6a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <OC1Config+0xd4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d11e      	bne.n	80019ec <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f023 0208 	bic.w	r2, r3, #8
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4313      	orrs	r3, r2
 80019bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f023 0204 	bic.w	r2, r3, #4
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4313      	orrs	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fe85 	bl	800170e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40010400 	.word	0x40010400

08001a1c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	f023 0210 	bic.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f023 0220 	bic.w	r2, r3, #32
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f023 0210 	bic.w	r2, r3, #16
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <OC2Config+0xd8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d003      	beq.n	8001a8c <OC2Config+0x70>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <OC2Config+0xdc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d11f      	bne.n	8001acc <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	019b      	lsls	r3, r3, #6
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	019b      	lsls	r3, r3, #6
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fe23 	bl	800172a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40010400 	.word	0x40010400

08001afc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <OC3Config+0xd8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <OC3Config+0x6e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <OC3Config+0xdc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d11f      	bne.n	8001baa <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	029b      	lsls	r3, r3, #10
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	015b      	lsls	r3, r3, #5
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fdc2 	bl	8001746 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40010400 	.word	0x40010400

08001bdc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	031b      	lsls	r3, r3, #12
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	031b      	lsls	r3, r3, #12
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <OC4Config+0xa8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d003      	beq.n	8001c4c <OC4Config+0x70>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <OC4Config+0xac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d107      	bne.n	8001c5c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	019b      	lsls	r3, r3, #6
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fd77 	bl	8001762 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40010400 	.word	0x40010400

08001c8c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	615a      	str	r2, [r3, #20]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d14:	d152      	bne.n	8001dbc <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009a      	lsls	r2, r3, #2
 8001d20:	441a      	add	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	b299      	uxth	r1, r3
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	009a      	lsls	r2, r3, #2
 8001d42:	441a      	add	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	3332      	adds	r3, #50	; 0x32
 8001d60:	4a41      	ldr	r2, [pc, #260]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	440b      	add	r3, r1
 8001d76:	b299      	uxth	r1, r3
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	009a      	lsls	r2, r3, #2
 8001d82:	441a      	add	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	fb00 f303 	mul.w	r3, r0, r3
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	3332      	adds	r3, #50	; 0x32
 8001da0:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	440b      	add	r3, r1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001dba:	e04f      	b.n	8001e5c <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009a      	lsls	r2, r3, #2
 8001dc6:	441a      	add	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	b299      	uxth	r1, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009a      	lsls	r2, r3, #2
 8001de8:	441a      	add	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001df4:	fba3 0302 	umull	r0, r3, r3, r2
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	2064      	movs	r0, #100	; 0x64
 8001dfc:	fb00 f303 	mul.w	r3, r0, r3
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	3332      	adds	r3, #50	; 0x32
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	440b      	add	r3, r1
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009a      	lsls	r2, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001e30:	fba3 0302 	umull	r0, r3, r3, r2
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	2064      	movs	r0, #100	; 0x64
 8001e38:	fb00 f303 	mul.w	r3, r0, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	3332      	adds	r3, #50	; 0x32
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <LL_USART_SetBaudRate+0x168>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	440b      	add	r3, r1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	51eb851f 	.word	0x51eb851f

08001e6c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff04 	bl	8001c8c <LL_USART_IsEnabled>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d15e      	bne.n	8001f48 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e92:	f023 030c 	bic.w	r3, r3, #12
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	6851      	ldr	r1, [r2, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6912      	ldr	r2, [r2, #16]
 8001ea4:	4311      	orrs	r1, r2
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6992      	ldr	r2, [r2, #24]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fefb 	bl	8001cb4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff08 	bl	8001cda <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fab6 	bl	8001440 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <LL_USART_Init+0xe8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d102      	bne.n	8001ee2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	e021      	b.n	8001f26 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <LL_USART_Init+0xec>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d102      	bne.n	8001ef0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	e01a      	b.n	8001f26 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <LL_USART_Init+0xf0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d102      	bne.n	8001efe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e013      	b.n	8001f26 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <LL_USART_Init+0xf4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d102      	bne.n	8001f0c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e00c      	b.n	8001f26 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <LL_USART_Init+0xf8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d102      	bne.n	8001f1a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	e005      	b.n	8001f26 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <LL_USART_Init+0xfc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8001f34:	2300      	movs	r3, #0
 8001f36:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69b9      	ldr	r1, [r7, #24]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fedc 	bl	8001d00 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40011000 	.word	0x40011000
 8001f58:	40004400 	.word	0x40004400
 8001f5c:	40004800 	.word	0x40004800
 8001f60:	40011400 	.word	0x40011400
 8001f64:	40004c00 	.word	0x40004c00
 8001f68:	40005000 	.word	0x40005000

08001f6c <LL_SPI_Enable>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	601a      	str	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_SPI_SetStandard>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 0210 	bic.w	r2, r3, #16
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	605a      	str	r2, [r3, #4]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d101      	bne.n	8001ff0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	b2db      	uxtb	r3, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	330c      	adds	r3, #12
 8002028:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	4013      	ands	r3, r2
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	041a      	lsls	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4013      	ands	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40023800 	.word	0x40023800

080020d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80020e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40023800 	.word	0x40023800

08002100 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	; 0x40
 8002104:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f001 fc62 	bl	80039d8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	463b      	mov	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002124:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002128:	f7ff ffd2 	bl	80020d0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800212c:	2002      	movs	r0, #2
 800212e:	f7ff ffb7 	bl	80020a0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002132:	2004      	movs	r0, #4
 8002134:	f7ff ffb4 	bl	80020a0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff ffb1 	bl	80020a0 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800213e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002142:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002144:	2302      	movs	r3, #2
 8002146:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002154:	2305      	movs	r3, #5
 8002156:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	463b      	mov	r3, r7
 800215a:	4619      	mov	r1, r3
 800215c:	4841      	ldr	r0, [pc, #260]	; (8002264 <BNO080_GPIO_SPI_Initialization+0x164>)
 800215e:	f7ff f882 	bl	8001266 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002166:	f44f 7382 	mov.w	r3, #260	; 0x104
 800216a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002170:	2302      	movs	r3, #2
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002174:	2301      	movs	r3, #1
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800217e:	2318      	movs	r3, #24
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800218a:	230a      	movs	r3, #10
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800218e:	f107 0318 	add.w	r3, r7, #24
 8002192:	4619      	mov	r1, r3
 8002194:	4834      	ldr	r0, [pc, #208]	; (8002268 <BNO080_GPIO_SPI_Initialization+0x168>)
 8002196:	f7ff fa3e 	bl	8001616 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800219a:	2100      	movs	r1, #0
 800219c:	4832      	ldr	r0, [pc, #200]	; (8002268 <BNO080_GPIO_SPI_Initialization+0x168>)
 800219e:	f7ff fef5 	bl	8001f8c <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	4831      	ldr	r0, [pc, #196]	; (800226c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80021a8:	f7ff ff6b 	bl	8002082 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80021ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b0:	482c      	ldr	r0, [pc, #176]	; (8002264 <BNO080_GPIO_SPI_Initialization+0x164>)
 80021b2:	f7ff ff66 	bl	8002082 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80021b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ba:	482d      	ldr	r0, [pc, #180]	; (8002270 <BNO080_GPIO_SPI_Initialization+0x170>)
 80021bc:	f7ff ff61 	bl	8002082 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021c6:	2301      	movs	r3, #1
 80021c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80021d6:	463b      	mov	r3, r7
 80021d8:	4619      	mov	r1, r3
 80021da:	4822      	ldr	r0, [pc, #136]	; (8002264 <BNO080_GPIO_SPI_Initialization+0x164>)
 80021dc:	f7ff f843 	bl	8001266 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80021e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021e6:	2301      	movs	r3, #1
 80021e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80021f6:	463b      	mov	r3, r7
 80021f8:	4619      	mov	r1, r3
 80021fa:	481c      	ldr	r0, [pc, #112]	; (800226c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80021fc:	f7ff f833 	bl	8001266 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8002200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002204:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002206:	2301      	movs	r3, #1
 8002208:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8002216:	463b      	mov	r3, r7
 8002218:	4619      	mov	r1, r3
 800221a:	4815      	ldr	r0, [pc, #84]	; (8002270 <BNO080_GPIO_SPI_Initialization+0x170>)
 800221c:	f7ff f823 	bl	8001266 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800222a:	2301      	movs	r3, #1
 800222c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800222e:	463b      	mov	r3, r7
 8002230:	4619      	mov	r1, r3
 8002232:	480e      	ldr	r0, [pc, #56]	; (800226c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002234:	f7ff f817 	bl	8001266 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8002238:	480b      	ldr	r0, [pc, #44]	; (8002268 <BNO080_GPIO_SPI_Initialization+0x168>)
 800223a:	f7ff fe97 	bl	8001f6c <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800223e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002242:	4808      	ldr	r0, [pc, #32]	; (8002264 <BNO080_GPIO_SPI_Initialization+0x164>)
 8002244:	f7ff ff0f 	bl	8002066 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8002248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224c:	4808      	ldr	r0, [pc, #32]	; (8002270 <BNO080_GPIO_SPI_Initialization+0x170>)
 800224e:	f7ff ff0a 	bl	8002066 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8002252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8002258:	f7ff ff05 	bl	8002066 <LL_GPIO_SetOutputPin>
}
 800225c:	bf00      	nop
 800225e:	3740      	adds	r7, #64	; 0x40
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40020400 	.word	0x40020400
 8002268:	40003800 	.word	0x40003800
 800226c:	40020800 	.word	0x40020800
 8002270:	40020000 	.word	0x40020000

08002274 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800227a:	f7ff ff41 	bl	8002100 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800227e:	482e      	ldr	r0, [pc, #184]	; (8002338 <BNO080_Initialization+0xc4>)
 8002280:	f001 fbb2 	bl	80039e8 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8002284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002288:	482c      	ldr	r0, [pc, #176]	; (800233c <BNO080_Initialization+0xc8>)
 800228a:	f7ff feec 	bl	8002066 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800228e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002292:	482b      	ldr	r0, [pc, #172]	; (8002340 <BNO080_Initialization+0xcc>)
 8002294:	f7ff fee7 	bl	8002066 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8002298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800229c:	4829      	ldr	r0, [pc, #164]	; (8002344 <BNO080_Initialization+0xd0>)
 800229e:	f7ff fef0 	bl	8002082 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80022a2:	20c8      	movs	r0, #200	; 0xc8
 80022a4:	f7fe f9d6 	bl	8000654 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	4825      	ldr	r0, [pc, #148]	; (8002344 <BNO080_Initialization+0xd0>)
 80022ae:	f7ff feda 	bl	8002066 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80022b2:	f000 f8d7 	bl	8002464 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80022b6:	f000 f8d5 	bl	8002464 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80022ba:	f000 f8f7 	bl	80024ac <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80022be:	f000 f8d1 	bl	8002464 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80022c2:	f000 f8f3 	bl	80024ac <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <BNO080_Initialization+0xd4>)
 80022c8:	22f9      	movs	r2, #249	; 0xf9
 80022ca:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <BNO080_Initialization+0xd4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80022d2:	2102      	movs	r1, #2
 80022d4:	2002      	movs	r0, #2
 80022d6:	f000 f959 	bl	800258c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80022da:	f000 f8c3 	bl	8002464 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80022de:	f000 f8e5 	bl	80024ac <BNO080_receivePacket>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d11b      	bne.n	8002320 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <BNO080_Initialization+0xd8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <BNO080_Initialization+0xd8>)
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <BNO080_Initialization+0xd8>)
 80022f6:	789b      	ldrb	r3, [r3, #2]
 80022f8:	4618      	mov	r0, r3
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <BNO080_Initialization+0xd8>)
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4603      	mov	r3, r0
 8002302:	4813      	ldr	r0, [pc, #76]	; (8002350 <BNO080_Initialization+0xdc>)
 8002304:	f001 fb70 	bl	80039e8 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <BNO080_Initialization+0xd4>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2bf8      	cmp	r3, #248	; 0xf8
 800230e:	d107      	bne.n	8002320 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <BNO080_Initialization+0xd4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	480f      	ldr	r0, [pc, #60]	; (8002354 <BNO080_Initialization+0xe0>)
 8002318:	f001 fb66 	bl	80039e8 <iprintf>
			return (0);
 800231c:	2300      	movs	r3, #0
 800231e:	e007      	b.n	8002330 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <BNO080_Initialization+0xd4>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	22f8      	movs	r2, #248	; 0xf8
 8002326:	4619      	mov	r1, r3
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <BNO080_Initialization+0xe4>)
 800232a:	f001 fb5d 	bl	80039e8 <iprintf>
	return (1); //Something went wrong
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	08004890 	.word	0x08004890
 800233c:	40020400 	.word	0x40020400
 8002340:	40020000 	.word	0x40020000
 8002344:	40020800 	.word	0x40020800
 8002348:	200000fc 	.word	0x200000fc
 800234c:	200000a8 	.word	0x200000a8
 8002350:	080048a4 	.word	0x080048a4
 8002354:	080048bc 	.word	0x080048bc
 8002358:	080048dc 	.word	0x080048dc

0800235c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8002366:	bf00      	nop
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <SPI2_SendByte+0x40>)
 800236a:	f7ff fe35 	bl	8001fd8 <LL_SPI_IsActiveFlag_TXE>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f9      	beq.n	8002368 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <SPI2_SendByte+0x40>)
 800237a:	f7ff fe4d 	bl	8002018 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800237e:	bf00      	nop
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <SPI2_SendByte+0x40>)
 8002382:	f7ff fe16 	bl	8001fb2 <LL_SPI_IsActiveFlag_RXNE>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f9      	beq.n	8002380 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <SPI2_SendByte+0x40>)
 800238e:	f7ff fe36 	bl	8001ffe <LL_SPI_ReceiveData8>
 8002392:	4603      	mov	r3, r0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40003800 	.word	0x40003800

080023a0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2200      	movs	r2, #0
 80023ae:	4619      	mov	r1, r3
 80023b0:	2005      	movs	r0, #5
 80023b2:	f000 f805 	bl	80023c0 <BNO080_setFeatureCommand>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023d0:	22fd      	movs	r2, #253	; 0xfd
 80023d2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023f2:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 80023fc:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002406:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0e1b      	lsrs	r3, r3, #24
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002410:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002414:	2200      	movs	r2, #0
 8002416:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 800241a:	2200      	movs	r2, #0
 800241c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002420:	2200      	movs	r2, #0
 8002422:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002426:	2200      	movs	r2, #0
 8002428:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002430:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 800243a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 8002444:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <BNO080_setFeatureCommand+0xa0>)
 800244e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8002450:	2111      	movs	r1, #17
 8002452:	2002      	movs	r0, #2
 8002454:	f000 f89a 	bl	800258c <BNO080_sendPacket>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200000fc 	.word	0x200000fc

08002464 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	e00c      	b.n	800248a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8002470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <BNO080_waitForSPI+0x40>)
 8002476:	f7ff fde1 	bl	800203c <LL_GPIO_IsInputPinSet>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8002480:	2301      	movs	r3, #1
 8002482:	e00a      	b.n	800249a <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3301      	adds	r3, #1
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d1ee      	bne.n	8002470 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <BNO080_waitForSPI+0x44>)
 8002494:	f001 fb1c 	bl	8003ad0 <puts>
	return (0);
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40020800 	.word	0x40020800
 80024a8:	08004928 	.word	0x08004928

080024ac <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	4831      	ldr	r0, [pc, #196]	; (800257c <BNO080_receivePacket+0xd0>)
 80024b8:	f7ff fdc0 	bl	800203c <LL_GPIO_IsInputPinSet>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80024c2:	2300      	movs	r3, #0
 80024c4:	e056      	b.n	8002574 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80024c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ca:	482d      	ldr	r0, [pc, #180]	; (8002580 <BNO080_receivePacket+0xd4>)
 80024cc:	f7ff fdd9 	bl	8002082 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7ff ff43 	bl	800235c <SPI2_SendByte>
 80024d6:	4603      	mov	r3, r0
 80024d8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7ff ff3e 	bl	800235c <SPI2_SendByte>
 80024e0:	4603      	mov	r3, r0
 80024e2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7ff ff39 	bl	800235c <SPI2_SendByte>
 80024ea:	4603      	mov	r3, r0
 80024ec:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7ff ff34 	bl	800235c <SPI2_SendByte>
 80024f4:	4603      	mov	r3, r0
 80024f6:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <BNO080_receivePacket+0xd8>)
 80024fa:	7b7b      	ldrb	r3, [r7, #13]
 80024fc:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80024fe:	4a21      	ldr	r2, [pc, #132]	; (8002584 <BNO080_receivePacket+0xd8>)
 8002500:	7b3b      	ldrb	r3, [r7, #12]
 8002502:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <BNO080_receivePacket+0xd8>)
 8002506:	7afb      	ldrb	r3, [r7, #11]
 8002508:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800250a:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <BNO080_receivePacket+0xd8>)
 800250c:	7abb      	ldrb	r3, [r7, #10]
 800250e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8002510:	7b3b      	ldrb	r3, [r7, #12]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	7b7b      	ldrb	r3, [r7, #13]
 8002518:	b21b      	sxth	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800251e:	893b      	ldrh	r3, [r7, #8]
 8002520:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002524:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002526:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800252e:	2300      	movs	r3, #0
 8002530:	e020      	b.n	8002574 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002532:	893b      	ldrh	r3, [r7, #8]
 8002534:	3b04      	subs	r3, #4
 8002536:	b29b      	uxth	r3, r3
 8002538:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800253a:	2300      	movs	r3, #0
 800253c:	81fb      	strh	r3, [r7, #14]
 800253e:	e00e      	b.n	800255e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8002540:	20ff      	movs	r0, #255	; 0xff
 8002542:	f7ff ff0b 	bl	800235c <SPI2_SendByte>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800254a:	89fb      	ldrh	r3, [r7, #14]
 800254c:	2b7f      	cmp	r3, #127	; 0x7f
 800254e:	d803      	bhi.n	8002558 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <BNO080_receivePacket+0xdc>)
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	3301      	adds	r3, #1
 800255c:	81fb      	strh	r3, [r7, #14]
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbeb      	blt.n	8002540 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8002568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <BNO080_receivePacket+0xd4>)
 800256e:	f7ff fd7a 	bl	8002066 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40020800 	.word	0x40020800
 8002580:	40020400 	.word	0x40020400
 8002584:	200000a8 	.word	0x200000a8
 8002588:	200000fc 	.word	0x200000fc

0800258c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	3304      	adds	r3, #4
 80025a0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80025a2:	f7ff ff5f 	bl	8002464 <BNO080_waitForSPI>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80025ac:	2300      	movs	r3, #0
 80025ae:	e032      	b.n	8002616 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80025b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b4:	481a      	ldr	r0, [pc, #104]	; (8002620 <BNO080_sendPacket+0x94>)
 80025b6:	f7ff fd64 	bl	8002082 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fecd 	bl	800235c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	121b      	asrs	r3, r3, #8
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fec7 	bl	800235c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fec3 	bl	800235c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <BNO080_sendPacket+0x98>)
 80025da:	5cd2      	ldrb	r2, [r2, r3]
 80025dc:	1c51      	adds	r1, r2, #1
 80025de:	b2c8      	uxtb	r0, r1
 80025e0:	4910      	ldr	r1, [pc, #64]	; (8002624 <BNO080_sendPacket+0x98>)
 80025e2:	54c8      	strb	r0, [r1, r3]
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7ff feb9 	bl	800235c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e008      	b.n	8002602 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <BNO080_sendPacket+0x9c>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff feb0 	bl	800235c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	79bb      	ldrb	r3, [r7, #6]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3f2      	bcc.n	80025f0 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800260a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800260e:	4804      	ldr	r0, [pc, #16]	; (8002620 <BNO080_sendPacket+0x94>)
 8002610:	f7ff fd29 	bl	8002066 <LL_GPIO_SetOutputPin>

	return (1);
 8002614:	2301      	movs	r3, #1
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40020400 	.word	0x40020400
 8002624:	2000008c 	.word	0x2000008c
 8002628:	200000fc 	.word	0x200000fc

0800262c <LL_SPI_Enable>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	601a      	str	r2, [r3, #0]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_SPI_SetStandard>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 0210 	bic.w	r2, r3, #16
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	605a      	str	r2, [r3, #4]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_SPI_IsActiveFlag_TXE>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d101      	bne.n	80026b0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_SPI_ReceiveData8>:
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	b2db      	uxtb	r3, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_SPI_TransmitData8>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	330c      	adds	r3, #12
 80026e8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	701a      	strb	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_GPIO_IsInputPinSet>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	4013      	ands	r3, r2
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_GPIO_SetOutputPin>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_GPIO_ResetOutputPin>:
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	041a      	lsls	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_AHB1_GRP1_EnableClock>:
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800276a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40023800 	.word	0x40023800

08002790 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800279a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80027a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4013      	ands	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40023800 	.word	0x40023800

080027c0 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b090      	sub	sp, #64	; 0x40
 80027c4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	2228      	movs	r2, #40	; 0x28
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 f902 	bl	80039d8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	463b      	mov	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80027e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027e8:	f7ff ffd2 	bl	8002790 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff ffb7 	bl	8002760 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80027f2:	2004      	movs	r0, #4
 80027f4:	f7ff ffb4 	bl	8002760 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80027f8:	23e0      	movs	r3, #224	; 0xe0
 80027fa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027fc:	2302      	movs	r3, #2
 80027fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800280c:	2305      	movs	r3, #5
 800280e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	463b      	mov	r3, r7
 8002812:	4619      	mov	r1, r3
 8002814:	4825      	ldr	r0, [pc, #148]	; (80028ac <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002816:	f7fe fd26 	bl	8001266 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800281e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002822:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002828:	2302      	movs	r3, #2
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800282c:	2301      	movs	r3, #1
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002836:	2310      	movs	r3, #16
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002842:	230a      	movs	r3, #10
 8002844:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002846:	f107 0318 	add.w	r3, r7, #24
 800284a:	4619      	mov	r1, r3
 800284c:	4818      	ldr	r0, [pc, #96]	; (80028b0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800284e:	f7fe fee2 	bl	8001616 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002852:	2100      	movs	r1, #0
 8002854:	4816      	ldr	r0, [pc, #88]	; (80028b0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002856:	f7ff fef9 	bl	800264c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800285a:	2110      	movs	r1, #16
 800285c:	4815      	ldr	r0, [pc, #84]	; (80028b4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800285e:	f7ff ff70 	bl	8002742 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002862:	2310      	movs	r3, #16
 8002864:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002866:	2301      	movs	r3, #1
 8002868:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002876:	463b      	mov	r3, r7
 8002878:	4619      	mov	r1, r3
 800287a:	480e      	ldr	r0, [pc, #56]	; (80028b4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800287c:	f7fe fcf3 	bl	8001266 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002880:	2320      	movs	r3, #32
 8002882:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	4808      	ldr	r0, [pc, #32]	; (80028b4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002892:	f7fe fce8 	bl	8001266 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002896:	4806      	ldr	r0, [pc, #24]	; (80028b0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002898:	f7ff fec8 	bl	800262c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 800289c:	2110      	movs	r1, #16
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80028a0:	f7ff ff41 	bl	8002726 <LL_GPIO_SetOutputPin>
}
 80028a4:	bf00      	nop
 80028a6:	3740      	adds	r7, #64	; 0x40
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40013000 	.word	0x40013000
 80028b4:	40020800 	.word	0x40020800

080028b8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80028c2:	bf00      	nop
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <SPI1_SendByte+0x40>)
 80028c6:	f7ff fee7 	bl	8002698 <LL_SPI_IsActiveFlag_TXE>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f9      	beq.n	80028c4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <SPI1_SendByte+0x40>)
 80028d6:	f7ff feff 	bl	80026d8 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80028da:	bf00      	nop
 80028dc:	4806      	ldr	r0, [pc, #24]	; (80028f8 <SPI1_SendByte+0x40>)
 80028de:	f7ff fec8 	bl	8002672 <LL_SPI_IsActiveFlag_RXNE>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f9      	beq.n	80028dc <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80028e8:	4803      	ldr	r0, [pc, #12]	; (80028f8 <SPI1_SendByte+0x40>)
 80028ea:	f7ff fee8 	bl	80026be <LL_SPI_ReceiveData8>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013000 	.word	0x40013000

080028fc <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002906:	2110      	movs	r1, #16
 8002908:	480b      	ldr	r0, [pc, #44]	; (8002938 <ICM20602_Readbyte+0x3c>)
 800290a:	f7ff ff1a 	bl	8002742 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffce 	bl	80028b8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff ffcb 	bl	80028b8 <SPI1_SendByte>
 8002922:	4603      	mov	r3, r0
 8002924:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002926:	2110      	movs	r1, #16
 8002928:	4803      	ldr	r0, [pc, #12]	; (8002938 <ICM20602_Readbyte+0x3c>)
 800292a:	f7ff fefc 	bl	8002726 <LL_GPIO_SetOutputPin>
	
	return val;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40020800 	.word	0x40020800

0800293c <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	603a      	str	r2, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	460b      	mov	r3, r1
 800294a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002950:	2110      	movs	r1, #16
 8002952:	4810      	ldr	r0, [pc, #64]	; (8002994 <ICM20602_Readbytes+0x58>)
 8002954:	f7ff fef5 	bl	8002742 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffa9 	bl	80028b8 <SPI1_SendByte>
	while(i < len)
 8002966:	e009      	b.n	800297c <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	60fa      	str	r2, [r7, #12]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	18d4      	adds	r4, r2, r3
 8002972:	2000      	movs	r0, #0
 8002974:	f7ff ffa0 	bl	80028b8 <SPI1_SendByte>
 8002978:	4603      	mov	r3, r0
 800297a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3f1      	bcc.n	8002968 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002984:	2110      	movs	r1, #16
 8002986:	4803      	ldr	r0, [pc, #12]	; (8002994 <ICM20602_Readbytes+0x58>)
 8002988:	f7ff fecd 	bl	8002726 <LL_GPIO_SetOutputPin>
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	40020800 	.word	0x40020800

08002998 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	460a      	mov	r2, r1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80029a8:	2110      	movs	r1, #16
 80029aa:	480b      	ldr	r0, [pc, #44]	; (80029d8 <ICM20602_Writebyte+0x40>)
 80029ac:	f7ff fec9 	bl	8002742 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff7d 	bl	80028b8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80029be:	79bb      	ldrb	r3, [r7, #6]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff79 	bl	80028b8 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80029c6:	2110      	movs	r1, #16
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <ICM20602_Writebyte+0x40>)
 80029ca:	f7ff feac 	bl	8002726 <LL_GPIO_SetOutputPin>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020800 	.word	0x40020800

080029dc <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80029f0:	463b      	mov	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80029f8:	f7ff fee2 	bl	80027c0 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80029fc:	4833      	ldr	r0, [pc, #204]	; (8002acc <ICM20602_Initialization+0xf0>)
 80029fe:	f000 fff3 	bl	80039e8 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002a02:	2075      	movs	r0, #117	; 0x75
 8002a04:	f7ff ff7a 	bl	80028fc <ICM20602_Readbyte>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d105      	bne.n	8002a1e <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	4619      	mov	r1, r3
 8002a16:	482e      	ldr	r0, [pc, #184]	; (8002ad0 <ICM20602_Initialization+0xf4>)
 8002a18:	f000 ffe6 	bl	80039e8 <iprintf>
 8002a1c:	e012      	b.n	8002a44 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b12      	cmp	r3, #18
 8002a22:	d00f      	beq.n	8002a44 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002a24:	2075      	movs	r0, #117	; 0x75
 8002a26:	f7ff ff69 	bl	80028fc <ICM20602_Readbyte>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	d007      	beq.n	8002a44 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2212      	movs	r2, #18
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4826      	ldr	r0, [pc, #152]	; (8002ad4 <ICM20602_Initialization+0xf8>)
 8002a3c:	f000 ffd4 	bl	80039e8 <iprintf>
			return 1; //ERROR
 8002a40:	2301      	movs	r3, #1
 8002a42:	e03f      	b.n	8002ac4 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	206b      	movs	r0, #107	; 0x6b
 8002a48:	f7ff ffa6 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002a4c:	2032      	movs	r0, #50	; 0x32
 8002a4e:	f7fd fe01 	bl	8000654 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002a52:	2101      	movs	r1, #1
 8002a54:	206b      	movs	r0, #107	; 0x6b
 8002a56:	f7ff ff9f 	bl	8002998 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002a5a:	2032      	movs	r0, #50	; 0x32
 8002a5c:	f7fd fdfa 	bl	8000654 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002a60:	2138      	movs	r1, #56	; 0x38
 8002a62:	206c      	movs	r0, #108	; 0x6c
 8002a64:	f7ff ff98 	bl	8002998 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002a68:	2032      	movs	r0, #50	; 0x32
 8002a6a:	f7fd fdf3 	bl	8000654 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2019      	movs	r0, #25
 8002a72:	f7ff ff91 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002a76:	2032      	movs	r0, #50	; 0x32
 8002a78:	f7fd fdec 	bl	8000654 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002a7c:	2105      	movs	r1, #5
 8002a7e:	201a      	movs	r0, #26
 8002a80:	f7ff ff8a 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002a84:	2032      	movs	r0, #50	; 0x32
 8002a86:	f7fd fde5 	bl	8000654 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002a8a:	2118      	movs	r1, #24
 8002a8c:	201b      	movs	r0, #27
 8002a8e:	f7ff ff83 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002a92:	2032      	movs	r0, #50	; 0x32
 8002a94:	f7fd fdde 	bl	8000654 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002a98:	2118      	movs	r1, #24
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f7ff ff7c 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002aa0:	2032      	movs	r0, #50	; 0x32
 8002aa2:	f7fd fdd7 	bl	8000654 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	201d      	movs	r0, #29
 8002aaa:	f7ff ff75 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002aae:	2032      	movs	r0, #50	; 0x32
 8002ab0:	f7fd fdd0 	bl	8000654 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2038      	movs	r0, #56	; 0x38
 8002ab8:	f7ff ff6e 	bl	8002998 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002abc:	2032      	movs	r0, #50	; 0x32
 8002abe:	f7fd fdc9 	bl	8000654 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	0800493c 	.word	0x0800493c
 8002ad0:	08004954 	.word	0x08004954
 8002ad4:	08004978 	.word	0x08004978

08002ad8 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2106      	movs	r1, #6
 8002ae8:	2043      	movs	r0, #67	; 0x43
 8002aea:	f7ff ff27 	bl	800293c <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002aee:	7a3b      	ldrb	r3, [r7, #8]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	b21a      	sxth	r2, r3
 8002af4:	7a7b      	ldrb	r3, [r7, #9]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b21a      	sxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002b00:	7abb      	ldrb	r3, [r7, #10]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	b219      	sxth	r1, r3
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	b212      	sxth	r2, r2
 8002b12:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	b219      	sxth	r1, r3
 8002b1a:	7b7b      	ldrb	r3, [r7, #13]
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	430a      	orrs	r2, r1
 8002b24:	b212      	sxth	r2, r2
 8002b26:	801a      	strh	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002b34:	2120      	movs	r1, #32
 8002b36:	4803      	ldr	r0, [pc, #12]	; (8002b44 <ICM20602_DataReady+0x14>)
 8002b38:	f7ff fde0 	bl	80026fc <LL_GPIO_IsInputPinSet>
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40020800 	.word	0x40020800

08002b48 <LL_GPIO_ResetOutputPin>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <LL_AHB1_GRP1_EnableClock>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40023800 	.word	0x40023800

08002b98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
 8002bac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002bae:	2080      	movs	r0, #128	; 0x80
 8002bb0:	f7ff ffda 	bl	8002b68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	f7ff ffd7 	bl	8002b68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7ff ffd4 	bl	8002b68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f7ff ffd1 	bl	8002b68 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8002bc6:	f240 2117 	movw	r1, #535	; 0x217
 8002bca:	4826      	ldr	r0, [pc, #152]	; (8002c64 <MX_GPIO_Init+0xcc>)
 8002bcc:	f7ff ffbc 	bl	8002b48 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8002bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd4:	4824      	ldr	r0, [pc, #144]	; (8002c68 <MX_GPIO_Init+0xd0>)
 8002bd6:	f7ff ffb7 	bl	8002b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bde:	4823      	ldr	r0, [pc, #140]	; (8002c6c <MX_GPIO_Init+0xd4>)
 8002be0:	f7ff ffb2 	bl	8002b48 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8002be4:	f240 2317 	movw	r3, #535	; 0x217
 8002be8:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002bea:	2301      	movs	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4819      	ldr	r0, [pc, #100]	; (8002c64 <MX_GPIO_Init+0xcc>)
 8002c00:	f7fe fb31 	bl	8001266 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002c04:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002c08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c12:	463b      	mov	r3, r7
 8002c14:	4619      	mov	r1, r3
 8002c16:	4813      	ldr	r0, [pc, #76]	; (8002c64 <MX_GPIO_Init+0xcc>)
 8002c18:	f7fe fb25 	bl	8001266 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c20:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c22:	2301      	movs	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	463b      	mov	r3, r7
 8002c34:	4619      	mov	r1, r3
 8002c36:	480c      	ldr	r0, [pc, #48]	; (8002c68 <MX_GPIO_Init+0xd0>)
 8002c38:	f7fe fb15 	bl	8001266 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c42:	2301      	movs	r3, #1
 8002c44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	463b      	mov	r3, r7
 8002c54:	4619      	mov	r1, r3
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_GPIO_Init+0xd4>)
 8002c58:	f7fe fb05 	bl	8001266 <LL_GPIO_Init>

}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	40020000 	.word	0x40020000

08002c70 <LL_TIM_EnableCounter>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	601a      	str	r2, [r3, #0]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_TIM_CC_EnableChannel>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_TIM_CC_DisableChannel>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60da      	str	r2, [r3, #12]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	605a      	str	r2, [r3, #4]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e00d      	b.n	8002d42 <_write+0x2e>
		LL_USART_TransmitData8(USART6, ptr[i]);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4808      	ldr	r0, [pc, #32]	; (8002d54 <_write+0x40>)
 8002d32:	f7ff ffe0 	bl	8002cf6 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7fd fc8c 	bl	8000654 <HAL_Delay>
	for(int i=0; i<len; i++) {
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	dbed      	blt.n	8002d26 <_write+0x12>
	}
	return len;
 8002d4a:	687b      	ldr	r3, [r7, #4]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40011400 	.word	0x40011400

08002d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d5e:	f7fd fc07 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d62:	f000 f859 	bl	8002e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d66:	f7ff ff17 	bl	8002b98 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002d6a:	f000 fc2f 	bl	80035cc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002d6e:	f000 fd7f 	bl	8003870 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002d72:	f000 f96f 	bl	8003054 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002d76:	f000 f91b 	bl	8002fb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8002d7a:	4822      	ldr	r0, [pc, #136]	; (8002e04 <main+0xac>)
 8002d7c:	f7ff ff78 	bl	8002c70 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d84:	481f      	ldr	r0, [pc, #124]	; (8002e04 <main+0xac>)
 8002d86:	f7ff ff83 	bl	8002c90 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <main+0xac>)
 8002d8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	f7fd fc5e 	bl	8000654 <HAL_Delay>
  TIM3->PSC = 1500;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <main+0xac>)
 8002d9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002da0:	2064      	movs	r0, #100	; 0x64
 8002da2:	f7fd fc57 	bl	8000654 <HAL_Delay>
  TIM3->PSC = 1000;
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <main+0xac>)
 8002da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002dae:	2064      	movs	r0, #100	; 0x64
 8002db0:	f7fd fc50 	bl	8000654 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002db8:	4812      	ldr	r0, [pc, #72]	; (8002e04 <main+0xac>)
 8002dba:	f7ff ff7a 	bl	8002cb2 <LL_TIM_CC_DisableChannel>
  LL_USART_EnableIT_RXNE(USART6);
 8002dbe:	4812      	ldr	r0, [pc, #72]	; (8002e08 <main+0xb0>)
 8002dc0:	f7ff ff89 	bl	8002cd6 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8002dc4:	f7ff fa56 	bl	8002274 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8002dc8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002dcc:	f7ff fae8 	bl	80023a0 <BNO080_enableRotationVector>
  ICM20602_Initialization();
 8002dd0:	f7ff fe04 	bl	80029dc <ICM20602_Initialization>
//		  Quaternion_Update(&q[0]); // 35us

//		   printf("%d, %d, %d\n", (int)(BNO080_Roll), (int)(BNO080_Pitch), (int)(BNO080_Yaw));
//	   }

	  if(ICM20602_DataReady() == 1) {
 8002dd4:	f7ff feac 	bl	8002b30 <ICM20602_DataReady>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d1fa      	bne.n	8002dd4 <main+0x7c>
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8002dde:	480b      	ldr	r0, [pc, #44]	; (8002e0c <main+0xb4>)
 8002de0:	f7ff fe7a 	bl	8002ad8 <ICM20602_Get3AxisGyroRawData>

		  printf("%d, %d, %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <main+0xb8>)
 8002de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dea:	4619      	mov	r1, r3
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <main+0xb8>)
 8002dee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <main+0xb8>)
 8002df6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002dfa:	4806      	ldr	r0, [pc, #24]	; (8002e14 <main+0xbc>)
 8002dfc:	f000 fdf4 	bl	80039e8 <iprintf>
	  if(ICM20602_DataReady() == 1) {
 8002e00:	e7e8      	b.n	8002dd4 <main+0x7c>
 8002e02:	bf00      	nop
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40011400 	.word	0x40011400
 8002e0c:	200001a0 	.word	0x200001a0
 8002e10:	20000198 	.word	0x20000198
 8002e14:	080049a4 	.word	0x080049a4

08002e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b094      	sub	sp, #80	; 0x50
 8002e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1e:	f107 0320 	add.w	r3, r7, #32
 8002e22:	2230      	movs	r2, #48	; 0x30
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fdd6 	bl	80039d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <SystemClock_Config+0xcc>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <SystemClock_Config+0xcc>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <SystemClock_Config+0xcc>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <SystemClock_Config+0xd0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <SystemClock_Config+0xd0>)
 8002e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <SystemClock_Config+0xd0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e88:	2304      	movs	r3, #4
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e8c:	23a8      	movs	r3, #168	; 0xa8
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e90:	2302      	movs	r3, #2
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e94:	2304      	movs	r3, #4
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e98:	f107 0320 	add.w	r3, r7, #32
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fce1 	bl	8000864 <HAL_RCC_OscConfig>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ea8:	f000 f820 	bl	8002eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eac:	230f      	movs	r3, #15
 8002eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	2105      	movs	r1, #5
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd ff0c 	bl	8000ce8 <HAL_RCC_ClockConfig>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ed6:	f000 f809 	bl	8002eec <Error_Handler>
  }
}
 8002eda:	bf00      	nop
 8002edc:	3750      	adds	r7, #80	; 0x50
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000

08002eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_SPI_SetStandard>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 0210 	bic.w	r2, r3, #16
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	605a      	str	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_AHB1_GRP1_EnableClock>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40023800 	.word	0x40023800

08002f50 <LL_APB1_GRP1_EnableClock>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5c:	4907      	ldr	r1, [pc, #28]	; (8002f7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40023800 	.word	0x40023800

08002f80 <LL_APB2_GRP1_EnableClock>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8c:	4907      	ldr	r1, [pc, #28]	; (8002fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40023800 	.word	0x40023800

08002fb0 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b090      	sub	sp, #64	; 0x40
 8002fb4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002fb6:	f107 0318 	add.w	r3, r7, #24
 8002fba:	2228      	movs	r2, #40	; 0x28
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fd0a 	bl	80039d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002fd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fd8:	f7ff ffd2 	bl	8002f80 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f7ff ff9f 	bl	8002f20 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002fe2:	23e0      	movs	r3, #224	; 0xe0
 8002fe4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	463b      	mov	r3, r7
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4813      	ldr	r0, [pc, #76]	; (800304c <MX_SPI1_Init+0x9c>)
 8003000:	f7fe f931 	bl	8001266 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003008:	f44f 7382 	mov.w	r3, #260	; 0x104
 800300c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003012:	2302      	movs	r3, #2
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003016:	2301      	movs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800301a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003020:	2310      	movs	r3, #16
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003024:	2300      	movs	r3, #0
 8003026:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800302c:	230a      	movs	r3, #10
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003030:	f107 0318 	add.w	r3, r7, #24
 8003034:	4619      	mov	r1, r3
 8003036:	4806      	ldr	r0, [pc, #24]	; (8003050 <MX_SPI1_Init+0xa0>)
 8003038:	f7fe faed 	bl	8001616 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800303c:	2100      	movs	r1, #0
 800303e:	4804      	ldr	r0, [pc, #16]	; (8003050 <MX_SPI1_Init+0xa0>)
 8003040:	f7ff ff5b 	bl	8002efa <LL_SPI_SetStandard>

}
 8003044:	bf00      	nop
 8003046:	3740      	adds	r7, #64	; 0x40
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40020000 	.word	0x40020000
 8003050:	40013000 	.word	0x40013000

08003054 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b090      	sub	sp, #64	; 0x40
 8003058:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	2228      	movs	r2, #40	; 0x28
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fcb8 	bl	80039d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	463b      	mov	r3, r7
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003078:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800307c:	f7ff ff68 	bl	8002f50 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003080:	2002      	movs	r0, #2
 8003082:	f7ff ff4d 	bl	8002f20 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003086:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800308a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800308c:	2302      	movs	r3, #2
 800308e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800309c:	2305      	movs	r3, #5
 800309e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	463b      	mov	r3, r7
 80030a2:	4619      	mov	r1, r3
 80030a4:	4813      	ldr	r0, [pc, #76]	; (80030f4 <MX_SPI2_Init+0xa0>)
 80030a6:	f7fe f8de 	bl	8001266 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80030ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80030b2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80030b8:	2302      	movs	r3, #2
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80030bc:	2301      	movs	r3, #1
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80030c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80030c6:	2318      	movs	r3, #24
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80030d2:	230a      	movs	r3, #10
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80030d6:	f107 0318 	add.w	r3, r7, #24
 80030da:	4619      	mov	r1, r3
 80030dc:	4806      	ldr	r0, [pc, #24]	; (80030f8 <MX_SPI2_Init+0xa4>)
 80030de:	f7fe fa9a 	bl	8001616 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80030e2:	2100      	movs	r1, #0
 80030e4:	4804      	ldr	r0, [pc, #16]	; (80030f8 <MX_SPI2_Init+0xa4>)
 80030e6:	f7ff ff08 	bl	8002efa <LL_SPI_SetStandard>

}
 80030ea:	bf00      	nop
 80030ec:	3740      	adds	r7, #64	; 0x40
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40020400 	.word	0x40020400
 80030f8:	40003800 	.word	0x40003800

080030fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_MspInit+0x4c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <HAL_MspInit+0x4c>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_MspInit+0x4c>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_MspInit+0x4c>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_MspInit+0x4c>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_MspInit+0x4c>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <LL_USART_IsActiveFlag_RXNE>:
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b20      	cmp	r3, #32
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_USART_ClearFlag_RXNE>:
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f06f 0220 	mvn.w	r2, #32
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_USART_ReceiveData8>:
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	b2db      	uxtb	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_USART_TransmitData8>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	605a      	str	r2, [r3, #4]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <HardFault_Handler+0x4>

080031da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031de:	e7fe      	b.n	80031de <MemManage_Handler+0x4>

080031e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <BusFault_Handler+0x4>

080031e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <UsageFault_Handler+0x4>

080031ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321a:	f7fd f9fb 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <USART6_IRQHandler+0x3c>)
 800322a:	f7ff ff8f 	bl	800314c <LL_USART_IsActiveFlag_RXNE>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <USART6_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8003234:	480a      	ldr	r0, [pc, #40]	; (8003260 <USART6_IRQHandler+0x3c>)
 8003236:	f7ff ff9c 	bl	8003172 <LL_USART_ClearFlag_RXNE>
		usart6_rx_data = LL_USART_ReceiveData8(USART6);
 800323a:	4809      	ldr	r0, [pc, #36]	; (8003260 <USART6_IRQHandler+0x3c>)
 800323c:	f7ff ffa7 	bl	800318e <LL_USART_ReceiveData8>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <USART6_IRQHandler+0x40>)
 8003246:	701a      	strb	r2, [r3, #0]
		LL_USART_TransmitData8(USART6, usart6_rx_data);
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <USART6_IRQHandler+0x40>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	4804      	ldr	r0, [pc, #16]	; (8003260 <USART6_IRQHandler+0x3c>)
 8003250:	f7ff ffaa 	bl	80031a8 <LL_USART_TransmitData8>
		usart6_rx_flag = 1;
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <USART6_IRQHandler+0x44>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40011400 	.word	0x40011400
 8003264:	200001c0 	.word	0x200001c0
 8003268:	200001c1 	.word	0x200001c1

0800326c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e00a      	b.n	8003294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800327e:	f3af 8000 	nop.w
 8003282:	4601      	mov	r1, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	60ba      	str	r2, [r7, #8]
 800328a:	b2ca      	uxtb	r2, r1
 800328c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	dbf0      	blt.n	800327e <_read+0x12>
	}

return len;
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
	return -1;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ce:	605a      	str	r2, [r3, #4]
	return 0;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_isatty>:

int _isatty(int file)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
	return 1;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
	return 0;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <_sbrk+0x50>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x16>
		heap_end = &end;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <_sbrk+0x50>)
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <_sbrk+0x54>)
 8003324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <_sbrk+0x50>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <_sbrk+0x50>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	466a      	mov	r2, sp
 8003336:	4293      	cmp	r3, r2
 8003338:	d907      	bls.n	800334a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800333a:	f000 fb23 	bl	8003984 <__errno>
 800333e:	4602      	mov	r2, r0
 8003340:	230c      	movs	r3, #12
 8003342:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	e006      	b.n	8003358 <_sbrk+0x48>
	}

	heap_end += incr;
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <_sbrk+0x50>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a03      	ldr	r2, [pc, #12]	; (8003360 <_sbrk+0x50>)
 8003354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000094 	.word	0x20000094
 8003364:	200001c8 	.word	0x200001c8

08003368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <SystemInit+0x60>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <SystemInit+0x60>)
 8003374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <SystemInit+0x64>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <SystemInit+0x64>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <SystemInit+0x64>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <SystemInit+0x64>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <SystemInit+0x64>)
 8003394:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <SystemInit+0x64>)
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <SystemInit+0x68>)
 80033a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <SystemInit+0x64>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <SystemInit+0x64>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <SystemInit+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <SystemInit+0x60>)
 80033b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033bc:	609a      	str	r2, [r3, #8]
#endif
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00
 80033cc:	40023800 	.word	0x40023800
 80033d0:	24003010 	.word	0x24003010

080033d4 <LL_TIM_EnableARRPreload>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	601a      	str	r2, [r3, #0]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_TIM_OC_EnableFast>:
{
 80033f4:	b4b0      	push	{r4, r5, r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d01c      	beq.n	800343e <LL_TIM_OC_EnableFast+0x4a>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d017      	beq.n	800343a <LL_TIM_OC_EnableFast+0x46>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d012      	beq.n	8003436 <LL_TIM_OC_EnableFast+0x42>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d00d      	beq.n	8003432 <LL_TIM_OC_EnableFast+0x3e>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d007      	beq.n	800342e <LL_TIM_OC_EnableFast+0x3a>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d101      	bne.n	800342a <LL_TIM_OC_EnableFast+0x36>
 8003426:	2305      	movs	r3, #5
 8003428:	e00a      	b.n	8003440 <LL_TIM_OC_EnableFast+0x4c>
 800342a:	2306      	movs	r3, #6
 800342c:	e008      	b.n	8003440 <LL_TIM_OC_EnableFast+0x4c>
 800342e:	2304      	movs	r3, #4
 8003430:	e006      	b.n	8003440 <LL_TIM_OC_EnableFast+0x4c>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <LL_TIM_OC_EnableFast+0x4c>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <LL_TIM_OC_EnableFast+0x4c>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <LL_TIM_OC_EnableFast+0x4c>
 800343e:	2300      	movs	r3, #0
 8003440:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3318      	adds	r3, #24
 8003446:	461a      	mov	r2, r3
 8003448:	4629      	mov	r1, r5
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <LL_TIM_OC_EnableFast+0x7c>)
 800344c:	5c5b      	ldrb	r3, [r3, r1]
 800344e:	4413      	add	r3, r2
 8003450:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	4629      	mov	r1, r5
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <LL_TIM_OC_EnableFast+0x80>)
 8003458:	5c5b      	ldrb	r3, [r3, r1]
 800345a:	4619      	mov	r1, r3
 800345c:	2304      	movs	r3, #4
 800345e:	408b      	lsls	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	6023      	str	r3, [r4, #0]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bcb0      	pop	{r4, r5, r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	080049c8 	.word	0x080049c8
 8003474:	080049d0 	.word	0x080049d0

08003478 <LL_TIM_OC_EnablePreload>:
{
 8003478:	b4b0      	push	{r4, r5, r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d01c      	beq.n	80034c2 <LL_TIM_OC_EnablePreload+0x4a>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d017      	beq.n	80034be <LL_TIM_OC_EnablePreload+0x46>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b10      	cmp	r3, #16
 8003492:	d012      	beq.n	80034ba <LL_TIM_OC_EnablePreload+0x42>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d00d      	beq.n	80034b6 <LL_TIM_OC_EnablePreload+0x3e>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d007      	beq.n	80034b2 <LL_TIM_OC_EnablePreload+0x3a>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d101      	bne.n	80034ae <LL_TIM_OC_EnablePreload+0x36>
 80034aa:	2305      	movs	r3, #5
 80034ac:	e00a      	b.n	80034c4 <LL_TIM_OC_EnablePreload+0x4c>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e008      	b.n	80034c4 <LL_TIM_OC_EnablePreload+0x4c>
 80034b2:	2304      	movs	r3, #4
 80034b4:	e006      	b.n	80034c4 <LL_TIM_OC_EnablePreload+0x4c>
 80034b6:	2303      	movs	r3, #3
 80034b8:	e004      	b.n	80034c4 <LL_TIM_OC_EnablePreload+0x4c>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e002      	b.n	80034c4 <LL_TIM_OC_EnablePreload+0x4c>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <LL_TIM_OC_EnablePreload+0x4c>
 80034c2:	2300      	movs	r3, #0
 80034c4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3318      	adds	r3, #24
 80034ca:	461a      	mov	r2, r3
 80034cc:	4629      	mov	r1, r5
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <LL_TIM_OC_EnablePreload+0x7c>)
 80034d0:	5c5b      	ldrb	r3, [r3, r1]
 80034d2:	4413      	add	r3, r2
 80034d4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	4629      	mov	r1, r5
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <LL_TIM_OC_EnablePreload+0x80>)
 80034dc:	5c5b      	ldrb	r3, [r3, r1]
 80034de:	4619      	mov	r1, r3
 80034e0:	2308      	movs	r3, #8
 80034e2:	408b      	lsls	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	6023      	str	r3, [r4, #0]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bcb0      	pop	{r4, r5, r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	080049c8 	.word	0x080049c8
 80034f8:	080049d0 	.word	0x080049d0

080034fc <LL_TIM_SetClockSource>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350e:	f023 0307 	bic.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_TIM_SetTriggerOutput>:
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_TIM_DisableMasterSlaveMode>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_AHB1_GRP1_EnableClock>:
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	4907      	ldr	r1, [pc, #28]	; (8003598 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4313      	orrs	r3, r2
 800357e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40023800 	.word	0x40023800

0800359c <LL_APB1_GRP1_EnableClock>:
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80035a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80035b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035ba:	68fb      	ldr	r3, [r7, #12]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40023800 	.word	0x40023800

080035cc <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b094      	sub	sp, #80	; 0x50
 80035d0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80035d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	60da      	str	r2, [r3, #12]
 80035e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	2220      	movs	r2, #32
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f9f4 	bl	80039d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003600:	2002      	movs	r0, #2
 8003602:	f7ff ffcb 	bl	800359c <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 8003606:	f240 33e7 	movw	r3, #999	; 0x3e7
 800360a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800360c:	2300      	movs	r3, #0
 800360e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8003610:	2314      	movs	r3, #20
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003614:	2300      	movs	r3, #0
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003618:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800361c:	4619      	mov	r1, r3
 800361e:	4822      	ldr	r0, [pc, #136]	; (80036a8 <MX_TIM3_Init+0xdc>)
 8003620:	f7fe f8be 	bl	80017a0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003624:	4820      	ldr	r0, [pc, #128]	; (80036a8 <MX_TIM3_Init+0xdc>)
 8003626:	f7ff fed5 	bl	80033d4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800362a:	2100      	movs	r1, #0
 800362c:	481e      	ldr	r0, [pc, #120]	; (80036a8 <MX_TIM3_Init+0xdc>)
 800362e:	f7ff ff65 	bl	80034fc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003636:	481c      	ldr	r0, [pc, #112]	; (80036a8 <MX_TIM3_Init+0xdc>)
 8003638:	f7ff ff1e 	bl	8003478 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800363c:	2360      	movs	r3, #96	; 0x60
 800363e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8003648:	230a      	movs	r3, #10
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	461a      	mov	r2, r3
 8003656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800365a:	4813      	ldr	r0, [pc, #76]	; (80036a8 <MX_TIM3_Init+0xdc>)
 800365c:	f7fe f93a 	bl	80018d4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003664:	4810      	ldr	r0, [pc, #64]	; (80036a8 <MX_TIM3_Init+0xdc>)
 8003666:	f7ff fec5 	bl	80033f4 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800366a:	2100      	movs	r1, #0
 800366c:	480e      	ldr	r0, [pc, #56]	; (80036a8 <MX_TIM3_Init+0xdc>)
 800366e:	f7ff ff5a 	bl	8003526 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003672:	480d      	ldr	r0, [pc, #52]	; (80036a8 <MX_TIM3_Init+0xdc>)
 8003674:	f7ff ff6a 	bl	800354c <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003678:	2002      	movs	r0, #2
 800367a:	f7ff ff77 	bl	800356c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800367e:	2302      	movs	r3, #2
 8003680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003682:	2302      	movs	r3, #2
 8003684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003692:	2302      	movs	r3, #2
 8003694:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4804      	ldr	r0, [pc, #16]	; (80036ac <MX_TIM3_Init+0xe0>)
 800369c:	f7fd fde3 	bl	8001266 <LL_GPIO_Init>

}
 80036a0:	bf00      	nop
 80036a2:	3750      	adds	r7, #80	; 0x50
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40020400 	.word	0x40020400

080036b0 <__NVIC_GetPriorityGrouping>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4907      	ldr	r1, [pc, #28]	; (8003704 <__NVIC_EnableIRQ+0x38>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000e100 	.word	0xe000e100

08003708 <__NVIC_SetPriority>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db0a      	blt.n	8003732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	490c      	ldr	r1, [pc, #48]	; (8003754 <__NVIC_SetPriority+0x4c>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	440b      	add	r3, r1
 800372c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003730:	e00a      	b.n	8003748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <__NVIC_SetPriority+0x50>)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3b04      	subs	r3, #4
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	440b      	add	r3, r1
 8003746:	761a      	strb	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <NVIC_EncodePriority>:
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	bf28      	it	cs
 800377a:	2304      	movcs	r3, #4
 800377c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3304      	adds	r3, #4
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <NVIC_EncodePriority+0x30>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3b03      	subs	r3, #3
 800378a:	e000      	b.n	800378e <NVIC_EncodePriority+0x32>
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	401a      	ands	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a4:	f04f 31ff 	mov.w	r1, #4294967295
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	4313      	orrs	r3, r2
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_USART_Enable>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_USART_ConfigAsyncMode>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	615a      	str	r2, [r3, #20]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <LL_AHB1_GRP1_EnableClock>:
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800381a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40023800 	.word	0x40023800

08003840 <LL_APB2_GRP1_EnableClock>:
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <LL_APB2_GRP1_EnableClock+0x2c>)
 800384a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <LL_APB2_GRP1_EnableClock+0x2c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4313      	orrs	r3, r2
 8003852:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40023800 	.word	0x40023800

08003870 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	; 0x38
 8003874:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	615a      	str	r2, [r3, #20]
 8003888:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
 8003898:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800389a:	2020      	movs	r0, #32
 800389c:	f7ff ffd0 	bl	8003840 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80038a0:	2004      	movs	r0, #4
 80038a2:	f7ff ffb5 	bl	8003810 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80038a6:	23c0      	movs	r3, #192	; 0xc0
 80038a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038aa:	2302      	movs	r3, #2
 80038ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80038ae:	2303      	movs	r3, #3
 80038b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80038b6:	2301      	movs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80038ba:	2308      	movs	r3, #8
 80038bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4819      	ldr	r0, [pc, #100]	; (8003928 <MX_USART6_UART_Init+0xb8>)
 80038c4:	f7fd fccf 	bl	8001266 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80038c8:	f7ff fef2 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff42 	bl	800375c <NVIC_EncodePriority>
 80038d8:	4603      	mov	r3, r0
 80038da:	4619      	mov	r1, r3
 80038dc:	2047      	movs	r0, #71	; 0x47
 80038de:	f7ff ff13 	bl	8003708 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80038e2:	2047      	movs	r0, #71	; 0x47
 80038e4:	f7ff fef2 	bl	80036cc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 921600;
 80038e8:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80038ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80038fa:	230c      	movs	r3, #12
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80038fe:	2300      	movs	r3, #0
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003902:	2300      	movs	r3, #0
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4619      	mov	r1, r3
 800390c:	4807      	ldr	r0, [pc, #28]	; (800392c <MX_USART6_UART_Init+0xbc>)
 800390e:	f7fe faad 	bl	8001e6c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <MX_USART6_UART_Init+0xbc>)
 8003914:	f7ff ff65 	bl	80037e2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003918:	4804      	ldr	r0, [pc, #16]	; (800392c <MX_USART6_UART_Init+0xbc>)
 800391a:	f7ff ff52 	bl	80037c2 <LL_USART_Enable>

}
 800391e:	bf00      	nop
 8003920:	3738      	adds	r7, #56	; 0x38
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40020800 	.word	0x40020800
 800392c:	40011400 	.word	0x40011400

08003930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003968 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003934:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003936:	e003      	b.n	8003940 <LoopCopyDataInit>

08003938 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800393a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800393c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800393e:	3104      	adds	r1, #4

08003940 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003944:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003946:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003948:	d3f6      	bcc.n	8003938 <CopyDataInit>
  ldr  r2, =_sbss
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800394c:	e002      	b.n	8003954 <LoopFillZerobss>

0800394e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800394e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003950:	f842 3b04 	str.w	r3, [r2], #4

08003954 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003956:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003958:	d3f9      	bcc.n	800394e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800395a:	f7ff fd05 	bl	8003368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800395e:	f000 f817 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003962:	f7ff f9f9 	bl	8002d58 <main>
  bx  lr    
 8003966:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003968:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800396c:	08004a80 	.word	0x08004a80
  ldr  r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003974:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003978:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800397c:	200001c8 	.word	0x200001c8

08003980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC_IRQHandler>
	...

08003984 <__errno>:
 8003984:	4b01      	ldr	r3, [pc, #4]	; (800398c <__errno+0x8>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	2000000c 	.word	0x2000000c

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4e0d      	ldr	r6, [pc, #52]	; (80039c8 <__libc_init_array+0x38>)
 8003994:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003996:	1ba4      	subs	r4, r4, r6
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	2500      	movs	r5, #0
 800399c:	42a5      	cmp	r5, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	4e0b      	ldr	r6, [pc, #44]	; (80039d0 <__libc_init_array+0x40>)
 80039a2:	4c0c      	ldr	r4, [pc, #48]	; (80039d4 <__libc_init_array+0x44>)
 80039a4:	f000 ff68 	bl	8004878 <_init>
 80039a8:	1ba4      	subs	r4, r4, r6
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	2500      	movs	r5, #0
 80039ae:	42a5      	cmp	r5, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039b8:	4798      	blx	r3
 80039ba:	3501      	adds	r5, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039c2:	4798      	blx	r3
 80039c4:	3501      	adds	r5, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08004a78 	.word	0x08004a78
 80039cc:	08004a78 	.word	0x08004a78
 80039d0:	08004a78 	.word	0x08004a78
 80039d4:	08004a7c 	.word	0x08004a7c

080039d8 <memset>:
 80039d8:	4402      	add	r2, r0
 80039da:	4603      	mov	r3, r0
 80039dc:	4293      	cmp	r3, r2
 80039de:	d100      	bne.n	80039e2 <memset+0xa>
 80039e0:	4770      	bx	lr
 80039e2:	f803 1b01 	strb.w	r1, [r3], #1
 80039e6:	e7f9      	b.n	80039dc <memset+0x4>

080039e8 <iprintf>:
 80039e8:	b40f      	push	{r0, r1, r2, r3}
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <iprintf+0x2c>)
 80039ec:	b513      	push	{r0, r1, r4, lr}
 80039ee:	681c      	ldr	r4, [r3, #0]
 80039f0:	b124      	cbz	r4, 80039fc <iprintf+0x14>
 80039f2:	69a3      	ldr	r3, [r4, #24]
 80039f4:	b913      	cbnz	r3, 80039fc <iprintf+0x14>
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 fa22 	bl	8003e40 <__sinit>
 80039fc:	ab05      	add	r3, sp, #20
 80039fe:	9a04      	ldr	r2, [sp, #16]
 8003a00:	68a1      	ldr	r1, [r4, #8]
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 fbdb 	bl	80041c0 <_vfiprintf_r>
 8003a0a:	b002      	add	sp, #8
 8003a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a10:	b004      	add	sp, #16
 8003a12:	4770      	bx	lr
 8003a14:	2000000c 	.word	0x2000000c

08003a18 <_puts_r>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	460e      	mov	r6, r1
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	b118      	cbz	r0, 8003a28 <_puts_r+0x10>
 8003a20:	6983      	ldr	r3, [r0, #24]
 8003a22:	b90b      	cbnz	r3, 8003a28 <_puts_r+0x10>
 8003a24:	f000 fa0c 	bl	8003e40 <__sinit>
 8003a28:	69ab      	ldr	r3, [r5, #24]
 8003a2a:	68ac      	ldr	r4, [r5, #8]
 8003a2c:	b913      	cbnz	r3, 8003a34 <_puts_r+0x1c>
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 fa06 	bl	8003e40 <__sinit>
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <_puts_r+0xac>)
 8003a36:	429c      	cmp	r4, r3
 8003a38:	d117      	bne.n	8003a6a <_puts_r+0x52>
 8003a3a:	686c      	ldr	r4, [r5, #4]
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	071b      	lsls	r3, r3, #28
 8003a40:	d51d      	bpl.n	8003a7e <_puts_r+0x66>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	b1db      	cbz	r3, 8003a7e <_puts_r+0x66>
 8003a46:	3e01      	subs	r6, #1
 8003a48:	68a3      	ldr	r3, [r4, #8]
 8003a4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	60a3      	str	r3, [r4, #8]
 8003a52:	b9e9      	cbnz	r1, 8003a90 <_puts_r+0x78>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da2e      	bge.n	8003ab6 <_puts_r+0x9e>
 8003a58:	4622      	mov	r2, r4
 8003a5a:	210a      	movs	r1, #10
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f000 f83f 	bl	8003ae0 <__swbuf_r>
 8003a62:	3001      	adds	r0, #1
 8003a64:	d011      	beq.n	8003a8a <_puts_r+0x72>
 8003a66:	200a      	movs	r0, #10
 8003a68:	e011      	b.n	8003a8e <_puts_r+0x76>
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <_puts_r+0xb0>)
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	d101      	bne.n	8003a74 <_puts_r+0x5c>
 8003a70:	68ac      	ldr	r4, [r5, #8]
 8003a72:	e7e3      	b.n	8003a3c <_puts_r+0x24>
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <_puts_r+0xb4>)
 8003a76:	429c      	cmp	r4, r3
 8003a78:	bf08      	it	eq
 8003a7a:	68ec      	ldreq	r4, [r5, #12]
 8003a7c:	e7de      	b.n	8003a3c <_puts_r+0x24>
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	f000 f87f 	bl	8003b84 <__swsetup_r>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d0dd      	beq.n	8003a46 <_puts_r+0x2e>
 8003a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	da04      	bge.n	8003a9e <_puts_r+0x86>
 8003a94:	69a2      	ldr	r2, [r4, #24]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	dc06      	bgt.n	8003aa8 <_puts_r+0x90>
 8003a9a:	290a      	cmp	r1, #10
 8003a9c:	d004      	beq.n	8003aa8 <_puts_r+0x90>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	6022      	str	r2, [r4, #0]
 8003aa4:	7019      	strb	r1, [r3, #0]
 8003aa6:	e7cf      	b.n	8003a48 <_puts_r+0x30>
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 f818 	bl	8003ae0 <__swbuf_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d1c9      	bne.n	8003a48 <_puts_r+0x30>
 8003ab4:	e7e9      	b.n	8003a8a <_puts_r+0x72>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	200a      	movs	r0, #10
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	6022      	str	r2, [r4, #0]
 8003abe:	7018      	strb	r0, [r3, #0]
 8003ac0:	e7e5      	b.n	8003a8e <_puts_r+0x76>
 8003ac2:	bf00      	nop
 8003ac4:	080049fc 	.word	0x080049fc
 8003ac8:	08004a1c 	.word	0x08004a1c
 8003acc:	080049dc 	.word	0x080049dc

08003ad0 <puts>:
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <puts+0xc>)
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	f7ff bf9f 	b.w	8003a18 <_puts_r>
 8003ada:	bf00      	nop
 8003adc:	2000000c 	.word	0x2000000c

08003ae0 <__swbuf_r>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	b118      	cbz	r0, 8003af2 <__swbuf_r+0x12>
 8003aea:	6983      	ldr	r3, [r0, #24]
 8003aec:	b90b      	cbnz	r3, 8003af2 <__swbuf_r+0x12>
 8003aee:	f000 f9a7 	bl	8003e40 <__sinit>
 8003af2:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <__swbuf_r+0x98>)
 8003af4:	429c      	cmp	r4, r3
 8003af6:	d12a      	bne.n	8003b4e <__swbuf_r+0x6e>
 8003af8:	686c      	ldr	r4, [r5, #4]
 8003afa:	69a3      	ldr	r3, [r4, #24]
 8003afc:	60a3      	str	r3, [r4, #8]
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	071a      	lsls	r2, r3, #28
 8003b02:	d52e      	bpl.n	8003b62 <__swbuf_r+0x82>
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	b363      	cbz	r3, 8003b62 <__swbuf_r+0x82>
 8003b08:	6923      	ldr	r3, [r4, #16]
 8003b0a:	6820      	ldr	r0, [r4, #0]
 8003b0c:	1ac0      	subs	r0, r0, r3
 8003b0e:	6963      	ldr	r3, [r4, #20]
 8003b10:	b2f6      	uxtb	r6, r6
 8003b12:	4283      	cmp	r3, r0
 8003b14:	4637      	mov	r7, r6
 8003b16:	dc04      	bgt.n	8003b22 <__swbuf_r+0x42>
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 f926 	bl	8003d6c <_fflush_r>
 8003b20:	bb28      	cbnz	r0, 8003b6e <__swbuf_r+0x8e>
 8003b22:	68a3      	ldr	r3, [r4, #8]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	60a3      	str	r3, [r4, #8]
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	6022      	str	r2, [r4, #0]
 8003b2e:	701e      	strb	r6, [r3, #0]
 8003b30:	6963      	ldr	r3, [r4, #20]
 8003b32:	3001      	adds	r0, #1
 8003b34:	4283      	cmp	r3, r0
 8003b36:	d004      	beq.n	8003b42 <__swbuf_r+0x62>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	07db      	lsls	r3, r3, #31
 8003b3c:	d519      	bpl.n	8003b72 <__swbuf_r+0x92>
 8003b3e:	2e0a      	cmp	r6, #10
 8003b40:	d117      	bne.n	8003b72 <__swbuf_r+0x92>
 8003b42:	4621      	mov	r1, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 f911 	bl	8003d6c <_fflush_r>
 8003b4a:	b190      	cbz	r0, 8003b72 <__swbuf_r+0x92>
 8003b4c:	e00f      	b.n	8003b6e <__swbuf_r+0x8e>
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <__swbuf_r+0x9c>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	d101      	bne.n	8003b58 <__swbuf_r+0x78>
 8003b54:	68ac      	ldr	r4, [r5, #8]
 8003b56:	e7d0      	b.n	8003afa <__swbuf_r+0x1a>
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <__swbuf_r+0xa0>)
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	bf08      	it	eq
 8003b5e:	68ec      	ldreq	r4, [r5, #12]
 8003b60:	e7cb      	b.n	8003afa <__swbuf_r+0x1a>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 f80d 	bl	8003b84 <__swsetup_r>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0cc      	beq.n	8003b08 <__swbuf_r+0x28>
 8003b6e:	f04f 37ff 	mov.w	r7, #4294967295
 8003b72:	4638      	mov	r0, r7
 8003b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	080049fc 	.word	0x080049fc
 8003b7c:	08004a1c 	.word	0x08004a1c
 8003b80:	080049dc 	.word	0x080049dc

08003b84 <__swsetup_r>:
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <__swsetup_r+0xcc>)
 8003b86:	b570      	push	{r4, r5, r6, lr}
 8003b88:	681d      	ldr	r5, [r3, #0]
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	b125      	cbz	r5, 8003b9a <__swsetup_r+0x16>
 8003b90:	69ab      	ldr	r3, [r5, #24]
 8003b92:	b913      	cbnz	r3, 8003b9a <__swsetup_r+0x16>
 8003b94:	4628      	mov	r0, r5
 8003b96:	f000 f953 	bl	8003e40 <__sinit>
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <__swsetup_r+0xd0>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d10f      	bne.n	8003bc0 <__swsetup_r+0x3c>
 8003ba0:	686c      	ldr	r4, [r5, #4]
 8003ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	0715      	lsls	r5, r2, #28
 8003baa:	d42c      	bmi.n	8003c06 <__swsetup_r+0x82>
 8003bac:	06d0      	lsls	r0, r2, #27
 8003bae:	d411      	bmi.n	8003bd4 <__swsetup_r+0x50>
 8003bb0:	2209      	movs	r2, #9
 8003bb2:	6032      	str	r2, [r6, #0]
 8003bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbe:	e03e      	b.n	8003c3e <__swsetup_r+0xba>
 8003bc0:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <__swsetup_r+0xd4>)
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	d101      	bne.n	8003bca <__swsetup_r+0x46>
 8003bc6:	68ac      	ldr	r4, [r5, #8]
 8003bc8:	e7eb      	b.n	8003ba2 <__swsetup_r+0x1e>
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <__swsetup_r+0xd8>)
 8003bcc:	429c      	cmp	r4, r3
 8003bce:	bf08      	it	eq
 8003bd0:	68ec      	ldreq	r4, [r5, #12]
 8003bd2:	e7e6      	b.n	8003ba2 <__swsetup_r+0x1e>
 8003bd4:	0751      	lsls	r1, r2, #29
 8003bd6:	d512      	bpl.n	8003bfe <__swsetup_r+0x7a>
 8003bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bda:	b141      	cbz	r1, 8003bee <__swsetup_r+0x6a>
 8003bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003be0:	4299      	cmp	r1, r3
 8003be2:	d002      	beq.n	8003bea <__swsetup_r+0x66>
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 fa19 	bl	800401c <_free_r>
 8003bea:	2300      	movs	r3, #0
 8003bec:	6363      	str	r3, [r4, #52]	; 0x34
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	b94b      	cbnz	r3, 8003c1e <__swsetup_r+0x9a>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c14:	d003      	beq.n	8003c1e <__swsetup_r+0x9a>
 8003c16:	4621      	mov	r1, r4
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 f9bf 	bl	8003f9c <__smakebuf_r>
 8003c1e:	89a2      	ldrh	r2, [r4, #12]
 8003c20:	f012 0301 	ands.w	r3, r2, #1
 8003c24:	d00c      	beq.n	8003c40 <__swsetup_r+0xbc>
 8003c26:	2300      	movs	r3, #0
 8003c28:	60a3      	str	r3, [r4, #8]
 8003c2a:	6963      	ldr	r3, [r4, #20]
 8003c2c:	425b      	negs	r3, r3
 8003c2e:	61a3      	str	r3, [r4, #24]
 8003c30:	6923      	ldr	r3, [r4, #16]
 8003c32:	b953      	cbnz	r3, 8003c4a <__swsetup_r+0xc6>
 8003c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c3c:	d1ba      	bne.n	8003bb4 <__swsetup_r+0x30>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	0792      	lsls	r2, r2, #30
 8003c42:	bf58      	it	pl
 8003c44:	6963      	ldrpl	r3, [r4, #20]
 8003c46:	60a3      	str	r3, [r4, #8]
 8003c48:	e7f2      	b.n	8003c30 <__swsetup_r+0xac>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e7f7      	b.n	8003c3e <__swsetup_r+0xba>
 8003c4e:	bf00      	nop
 8003c50:	2000000c 	.word	0x2000000c
 8003c54:	080049fc 	.word	0x080049fc
 8003c58:	08004a1c 	.word	0x08004a1c
 8003c5c:	080049dc 	.word	0x080049dc

08003c60 <__sflush_r>:
 8003c60:	898a      	ldrh	r2, [r1, #12]
 8003c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c66:	4605      	mov	r5, r0
 8003c68:	0710      	lsls	r0, r2, #28
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	d458      	bmi.n	8003d20 <__sflush_r+0xc0>
 8003c6e:	684b      	ldr	r3, [r1, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	dc05      	bgt.n	8003c80 <__sflush_r+0x20>
 8003c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dc02      	bgt.n	8003c80 <__sflush_r+0x20>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	d0f9      	beq.n	8003c7a <__sflush_r+0x1a>
 8003c86:	2300      	movs	r3, #0
 8003c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c8c:	682f      	ldr	r7, [r5, #0]
 8003c8e:	6a21      	ldr	r1, [r4, #32]
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	d032      	beq.n	8003cfa <__sflush_r+0x9a>
 8003c94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	075a      	lsls	r2, r3, #29
 8003c9a:	d505      	bpl.n	8003ca8 <__sflush_r+0x48>
 8003c9c:	6863      	ldr	r3, [r4, #4]
 8003c9e:	1ac0      	subs	r0, r0, r3
 8003ca0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ca2:	b10b      	cbz	r3, 8003ca8 <__sflush_r+0x48>
 8003ca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ca6:	1ac0      	subs	r0, r0, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4602      	mov	r2, r0
 8003cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cae:	6a21      	ldr	r1, [r4, #32]
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	47b0      	blx	r6
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	d106      	bne.n	8003cc8 <__sflush_r+0x68>
 8003cba:	6829      	ldr	r1, [r5, #0]
 8003cbc:	291d      	cmp	r1, #29
 8003cbe:	d848      	bhi.n	8003d52 <__sflush_r+0xf2>
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <__sflush_r+0x108>)
 8003cc2:	40ca      	lsrs	r2, r1
 8003cc4:	07d6      	lsls	r6, r2, #31
 8003cc6:	d544      	bpl.n	8003d52 <__sflush_r+0xf2>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	6062      	str	r2, [r4, #4]
 8003ccc:	04d9      	lsls	r1, r3, #19
 8003cce:	6922      	ldr	r2, [r4, #16]
 8003cd0:	6022      	str	r2, [r4, #0]
 8003cd2:	d504      	bpl.n	8003cde <__sflush_r+0x7e>
 8003cd4:	1c42      	adds	r2, r0, #1
 8003cd6:	d101      	bne.n	8003cdc <__sflush_r+0x7c>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b903      	cbnz	r3, 8003cde <__sflush_r+0x7e>
 8003cdc:	6560      	str	r0, [r4, #84]	; 0x54
 8003cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ce0:	602f      	str	r7, [r5, #0]
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	d0c9      	beq.n	8003c7a <__sflush_r+0x1a>
 8003ce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cea:	4299      	cmp	r1, r3
 8003cec:	d002      	beq.n	8003cf4 <__sflush_r+0x94>
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 f994 	bl	800401c <_free_r>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	6360      	str	r0, [r4, #52]	; 0x34
 8003cf8:	e7c0      	b.n	8003c7c <__sflush_r+0x1c>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b0      	blx	r6
 8003d00:	1c41      	adds	r1, r0, #1
 8003d02:	d1c8      	bne.n	8003c96 <__sflush_r+0x36>
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0c5      	beq.n	8003c96 <__sflush_r+0x36>
 8003d0a:	2b1d      	cmp	r3, #29
 8003d0c:	d001      	beq.n	8003d12 <__sflush_r+0xb2>
 8003d0e:	2b16      	cmp	r3, #22
 8003d10:	d101      	bne.n	8003d16 <__sflush_r+0xb6>
 8003d12:	602f      	str	r7, [r5, #0]
 8003d14:	e7b1      	b.n	8003c7a <__sflush_r+0x1a>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	e7ad      	b.n	8003c7c <__sflush_r+0x1c>
 8003d20:	690f      	ldr	r7, [r1, #16]
 8003d22:	2f00      	cmp	r7, #0
 8003d24:	d0a9      	beq.n	8003c7a <__sflush_r+0x1a>
 8003d26:	0793      	lsls	r3, r2, #30
 8003d28:	680e      	ldr	r6, [r1, #0]
 8003d2a:	bf08      	it	eq
 8003d2c:	694b      	ldreq	r3, [r1, #20]
 8003d2e:	600f      	str	r7, [r1, #0]
 8003d30:	bf18      	it	ne
 8003d32:	2300      	movne	r3, #0
 8003d34:	eba6 0807 	sub.w	r8, r6, r7
 8003d38:	608b      	str	r3, [r1, #8]
 8003d3a:	f1b8 0f00 	cmp.w	r8, #0
 8003d3e:	dd9c      	ble.n	8003c7a <__sflush_r+0x1a>
 8003d40:	4643      	mov	r3, r8
 8003d42:	463a      	mov	r2, r7
 8003d44:	6a21      	ldr	r1, [r4, #32]
 8003d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	dc06      	bgt.n	8003d5e <__sflush_r+0xfe>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d56:	81a3      	strh	r3, [r4, #12]
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	e78e      	b.n	8003c7c <__sflush_r+0x1c>
 8003d5e:	4407      	add	r7, r0
 8003d60:	eba8 0800 	sub.w	r8, r8, r0
 8003d64:	e7e9      	b.n	8003d3a <__sflush_r+0xda>
 8003d66:	bf00      	nop
 8003d68:	20400001 	.word	0x20400001

08003d6c <_fflush_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	4605      	mov	r5, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	b1db      	cbz	r3, 8003dae <_fflush_r+0x42>
 8003d76:	b118      	cbz	r0, 8003d80 <_fflush_r+0x14>
 8003d78:	6983      	ldr	r3, [r0, #24]
 8003d7a:	b90b      	cbnz	r3, 8003d80 <_fflush_r+0x14>
 8003d7c:	f000 f860 	bl	8003e40 <__sinit>
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <_fflush_r+0x48>)
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d109      	bne.n	8003d9a <_fflush_r+0x2e>
 8003d86:	686c      	ldr	r4, [r5, #4]
 8003d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d8c:	b17b      	cbz	r3, 8003dae <_fflush_r+0x42>
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d96:	f7ff bf63 	b.w	8003c60 <__sflush_r>
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <_fflush_r+0x4c>)
 8003d9c:	429c      	cmp	r4, r3
 8003d9e:	d101      	bne.n	8003da4 <_fflush_r+0x38>
 8003da0:	68ac      	ldr	r4, [r5, #8]
 8003da2:	e7f1      	b.n	8003d88 <_fflush_r+0x1c>
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <_fflush_r+0x50>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	bf08      	it	eq
 8003daa:	68ec      	ldreq	r4, [r5, #12]
 8003dac:	e7ec      	b.n	8003d88 <_fflush_r+0x1c>
 8003dae:	2000      	movs	r0, #0
 8003db0:	bd38      	pop	{r3, r4, r5, pc}
 8003db2:	bf00      	nop
 8003db4:	080049fc 	.word	0x080049fc
 8003db8:	08004a1c 	.word	0x08004a1c
 8003dbc:	080049dc 	.word	0x080049dc

08003dc0 <std>:
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dca:	6083      	str	r3, [r0, #8]
 8003dcc:	8181      	strh	r1, [r0, #12]
 8003dce:	6643      	str	r3, [r0, #100]	; 0x64
 8003dd0:	81c2      	strh	r2, [r0, #14]
 8003dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dd6:	6183      	str	r3, [r0, #24]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2208      	movs	r2, #8
 8003ddc:	305c      	adds	r0, #92	; 0x5c
 8003dde:	f7ff fdfb 	bl	80039d8 <memset>
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <std+0x38>)
 8003de4:	6263      	str	r3, [r4, #36]	; 0x24
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <std+0x3c>)
 8003de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <std+0x40>)
 8003dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <std+0x44>)
 8003df0:	6224      	str	r4, [r4, #32]
 8003df2:	6323      	str	r3, [r4, #48]	; 0x30
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	0800471d 	.word	0x0800471d
 8003dfc:	0800473f 	.word	0x0800473f
 8003e00:	08004777 	.word	0x08004777
 8003e04:	0800479b 	.word	0x0800479b

08003e08 <_cleanup_r>:
 8003e08:	4901      	ldr	r1, [pc, #4]	; (8003e10 <_cleanup_r+0x8>)
 8003e0a:	f000 b885 	b.w	8003f18 <_fwalk_reent>
 8003e0e:	bf00      	nop
 8003e10:	08003d6d 	.word	0x08003d6d

08003e14 <__sfmoreglue>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	1e4a      	subs	r2, r1, #1
 8003e18:	2568      	movs	r5, #104	; 0x68
 8003e1a:	4355      	muls	r5, r2
 8003e1c:	460e      	mov	r6, r1
 8003e1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e22:	f000 f949 	bl	80040b8 <_malloc_r>
 8003e26:	4604      	mov	r4, r0
 8003e28:	b140      	cbz	r0, 8003e3c <__sfmoreglue+0x28>
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	e9c0 1600 	strd	r1, r6, [r0]
 8003e30:	300c      	adds	r0, #12
 8003e32:	60a0      	str	r0, [r4, #8]
 8003e34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e38:	f7ff fdce 	bl	80039d8 <memset>
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}

08003e40 <__sinit>:
 8003e40:	6983      	ldr	r3, [r0, #24]
 8003e42:	b510      	push	{r4, lr}
 8003e44:	4604      	mov	r4, r0
 8003e46:	bb33      	cbnz	r3, 8003e96 <__sinit+0x56>
 8003e48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e4c:	6503      	str	r3, [r0, #80]	; 0x50
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <__sinit+0x58>)
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <__sinit+0x5c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6282      	str	r2, [r0, #40]	; 0x28
 8003e56:	4298      	cmp	r0, r3
 8003e58:	bf04      	itt	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	6183      	streq	r3, [r0, #24]
 8003e5e:	f000 f81f 	bl	8003ea0 <__sfp>
 8003e62:	6060      	str	r0, [r4, #4]
 8003e64:	4620      	mov	r0, r4
 8003e66:	f000 f81b 	bl	8003ea0 <__sfp>
 8003e6a:	60a0      	str	r0, [r4, #8]
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 f817 	bl	8003ea0 <__sfp>
 8003e72:	2200      	movs	r2, #0
 8003e74:	60e0      	str	r0, [r4, #12]
 8003e76:	2104      	movs	r1, #4
 8003e78:	6860      	ldr	r0, [r4, #4]
 8003e7a:	f7ff ffa1 	bl	8003dc0 <std>
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2109      	movs	r1, #9
 8003e82:	68a0      	ldr	r0, [r4, #8]
 8003e84:	f7ff ff9c 	bl	8003dc0 <std>
 8003e88:	2202      	movs	r2, #2
 8003e8a:	2112      	movs	r1, #18
 8003e8c:	68e0      	ldr	r0, [r4, #12]
 8003e8e:	f7ff ff97 	bl	8003dc0 <std>
 8003e92:	2301      	movs	r3, #1
 8003e94:	61a3      	str	r3, [r4, #24]
 8003e96:	bd10      	pop	{r4, pc}
 8003e98:	080049d8 	.word	0x080049d8
 8003e9c:	08003e09 	.word	0x08003e09

08003ea0 <__sfp>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <__sfp+0x70>)
 8003ea4:	681e      	ldr	r6, [r3, #0]
 8003ea6:	69b3      	ldr	r3, [r6, #24]
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	b913      	cbnz	r3, 8003eb2 <__sfp+0x12>
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff ffc7 	bl	8003e40 <__sinit>
 8003eb2:	3648      	adds	r6, #72	; 0x48
 8003eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	d503      	bpl.n	8003ec4 <__sfp+0x24>
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	b133      	cbz	r3, 8003ece <__sfp+0x2e>
 8003ec0:	6836      	ldr	r6, [r6, #0]
 8003ec2:	e7f7      	b.n	8003eb4 <__sfp+0x14>
 8003ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ec8:	b16d      	cbz	r5, 8003ee6 <__sfp+0x46>
 8003eca:	3468      	adds	r4, #104	; 0x68
 8003ecc:	e7f4      	b.n	8003eb8 <__sfp+0x18>
 8003ece:	2104      	movs	r1, #4
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	f7ff ff9f 	bl	8003e14 <__sfmoreglue>
 8003ed6:	6030      	str	r0, [r6, #0]
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d1f1      	bne.n	8003ec0 <__sfp+0x20>
 8003edc:	230c      	movs	r3, #12
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <__sfp+0x74>)
 8003ee8:	6665      	str	r5, [r4, #100]	; 0x64
 8003eea:	e9c4 5500 	strd	r5, r5, [r4]
 8003eee:	60a5      	str	r5, [r4, #8]
 8003ef0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ef4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	4629      	mov	r1, r5
 8003efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f00:	f7ff fd6a 	bl	80039d8 <memset>
 8003f04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f0c:	e7e9      	b.n	8003ee2 <__sfp+0x42>
 8003f0e:	bf00      	nop
 8003f10:	080049d8 	.word	0x080049d8
 8003f14:	ffff0001 	.word	0xffff0001

08003f18 <_fwalk_reent>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	4689      	mov	r9, r1
 8003f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f24:	2600      	movs	r6, #0
 8003f26:	b914      	cbnz	r4, 8003f2e <_fwalk_reent+0x16>
 8003f28:	4630      	mov	r0, r6
 8003f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f32:	3f01      	subs	r7, #1
 8003f34:	d501      	bpl.n	8003f3a <_fwalk_reent+0x22>
 8003f36:	6824      	ldr	r4, [r4, #0]
 8003f38:	e7f5      	b.n	8003f26 <_fwalk_reent+0xe>
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d907      	bls.n	8003f50 <_fwalk_reent+0x38>
 8003f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f44:	3301      	adds	r3, #1
 8003f46:	d003      	beq.n	8003f50 <_fwalk_reent+0x38>
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	47c8      	blx	r9
 8003f4e:	4306      	orrs	r6, r0
 8003f50:	3568      	adds	r5, #104	; 0x68
 8003f52:	e7ee      	b.n	8003f32 <_fwalk_reent+0x1a>

08003f54 <__swhatbuf_r>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	460e      	mov	r6, r1
 8003f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	b096      	sub	sp, #88	; 0x58
 8003f60:	4614      	mov	r4, r2
 8003f62:	461d      	mov	r5, r3
 8003f64:	da07      	bge.n	8003f76 <__swhatbuf_r+0x22>
 8003f66:	2300      	movs	r3, #0
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	89b3      	ldrh	r3, [r6, #12]
 8003f6c:	061a      	lsls	r2, r3, #24
 8003f6e:	d410      	bmi.n	8003f92 <__swhatbuf_r+0x3e>
 8003f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f74:	e00e      	b.n	8003f94 <__swhatbuf_r+0x40>
 8003f76:	466a      	mov	r2, sp
 8003f78:	f000 fc36 	bl	80047e8 <_fstat_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	dbf2      	blt.n	8003f66 <__swhatbuf_r+0x12>
 8003f80:	9a01      	ldr	r2, [sp, #4]
 8003f82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f8a:	425a      	negs	r2, r3
 8003f8c:	415a      	adcs	r2, r3
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	e7ee      	b.n	8003f70 <__swhatbuf_r+0x1c>
 8003f92:	2340      	movs	r3, #64	; 0x40
 8003f94:	2000      	movs	r0, #0
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	b016      	add	sp, #88	; 0x58
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}

08003f9c <__smakebuf_r>:
 8003f9c:	898b      	ldrh	r3, [r1, #12]
 8003f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fa0:	079d      	lsls	r5, r3, #30
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	d507      	bpl.n	8003fb8 <__smakebuf_r+0x1c>
 8003fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	ab01      	add	r3, sp, #4
 8003fba:	466a      	mov	r2, sp
 8003fbc:	f7ff ffca 	bl	8003f54 <__swhatbuf_r>
 8003fc0:	9900      	ldr	r1, [sp, #0]
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 f877 	bl	80040b8 <_malloc_r>
 8003fca:	b948      	cbnz	r0, 8003fe0 <__smakebuf_r+0x44>
 8003fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd0:	059a      	lsls	r2, r3, #22
 8003fd2:	d4ef      	bmi.n	8003fb4 <__smakebuf_r+0x18>
 8003fd4:	f023 0303 	bic.w	r3, r3, #3
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e7e3      	b.n	8003fa8 <__smakebuf_r+0xc>
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <__smakebuf_r+0x7c>)
 8003fe2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	9b00      	ldr	r3, [sp, #0]
 8003ff0:	6163      	str	r3, [r4, #20]
 8003ff2:	9b01      	ldr	r3, [sp, #4]
 8003ff4:	6120      	str	r0, [r4, #16]
 8003ff6:	b15b      	cbz	r3, 8004010 <__smakebuf_r+0x74>
 8003ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 fc05 	bl	800480c <_isatty_r>
 8004002:	b128      	cbz	r0, 8004010 <__smakebuf_r+0x74>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	431d      	orrs	r5, r3
 8004014:	81a5      	strh	r5, [r4, #12]
 8004016:	e7cd      	b.n	8003fb4 <__smakebuf_r+0x18>
 8004018:	08003e09 	.word	0x08003e09

0800401c <_free_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4605      	mov	r5, r0
 8004020:	2900      	cmp	r1, #0
 8004022:	d045      	beq.n	80040b0 <_free_r+0x94>
 8004024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004028:	1f0c      	subs	r4, r1, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	bfb8      	it	lt
 800402e:	18e4      	addlt	r4, r4, r3
 8004030:	f000 fc0e 	bl	8004850 <__malloc_lock>
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <_free_r+0x98>)
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	4610      	mov	r0, r2
 800403a:	b933      	cbnz	r3, 800404a <_free_r+0x2e>
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	6014      	str	r4, [r2, #0]
 8004040:	4628      	mov	r0, r5
 8004042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004046:	f000 bc04 	b.w	8004852 <__malloc_unlock>
 800404a:	42a3      	cmp	r3, r4
 800404c:	d90c      	bls.n	8004068 <_free_r+0x4c>
 800404e:	6821      	ldr	r1, [r4, #0]
 8004050:	1862      	adds	r2, r4, r1
 8004052:	4293      	cmp	r3, r2
 8004054:	bf04      	itt	eq
 8004056:	681a      	ldreq	r2, [r3, #0]
 8004058:	685b      	ldreq	r3, [r3, #4]
 800405a:	6063      	str	r3, [r4, #4]
 800405c:	bf04      	itt	eq
 800405e:	1852      	addeq	r2, r2, r1
 8004060:	6022      	streq	r2, [r4, #0]
 8004062:	6004      	str	r4, [r0, #0]
 8004064:	e7ec      	b.n	8004040 <_free_r+0x24>
 8004066:	4613      	mov	r3, r2
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	b10a      	cbz	r2, 8004070 <_free_r+0x54>
 800406c:	42a2      	cmp	r2, r4
 800406e:	d9fa      	bls.n	8004066 <_free_r+0x4a>
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	1858      	adds	r0, r3, r1
 8004074:	42a0      	cmp	r0, r4
 8004076:	d10b      	bne.n	8004090 <_free_r+0x74>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	4401      	add	r1, r0
 800407c:	1858      	adds	r0, r3, r1
 800407e:	4282      	cmp	r2, r0
 8004080:	6019      	str	r1, [r3, #0]
 8004082:	d1dd      	bne.n	8004040 <_free_r+0x24>
 8004084:	6810      	ldr	r0, [r2, #0]
 8004086:	6852      	ldr	r2, [r2, #4]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	4401      	add	r1, r0
 800408c:	6019      	str	r1, [r3, #0]
 800408e:	e7d7      	b.n	8004040 <_free_r+0x24>
 8004090:	d902      	bls.n	8004098 <_free_r+0x7c>
 8004092:	230c      	movs	r3, #12
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	e7d3      	b.n	8004040 <_free_r+0x24>
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	1821      	adds	r1, r4, r0
 800409c:	428a      	cmp	r2, r1
 800409e:	bf04      	itt	eq
 80040a0:	6811      	ldreq	r1, [r2, #0]
 80040a2:	6852      	ldreq	r2, [r2, #4]
 80040a4:	6062      	str	r2, [r4, #4]
 80040a6:	bf04      	itt	eq
 80040a8:	1809      	addeq	r1, r1, r0
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	605c      	str	r4, [r3, #4]
 80040ae:	e7c7      	b.n	8004040 <_free_r+0x24>
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
 80040b2:	bf00      	nop
 80040b4:	20000098 	.word	0x20000098

080040b8 <_malloc_r>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	1ccd      	adds	r5, r1, #3
 80040bc:	f025 0503 	bic.w	r5, r5, #3
 80040c0:	3508      	adds	r5, #8
 80040c2:	2d0c      	cmp	r5, #12
 80040c4:	bf38      	it	cc
 80040c6:	250c      	movcc	r5, #12
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	4606      	mov	r6, r0
 80040cc:	db01      	blt.n	80040d2 <_malloc_r+0x1a>
 80040ce:	42a9      	cmp	r1, r5
 80040d0:	d903      	bls.n	80040da <_malloc_r+0x22>
 80040d2:	230c      	movs	r3, #12
 80040d4:	6033      	str	r3, [r6, #0]
 80040d6:	2000      	movs	r0, #0
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
 80040da:	f000 fbb9 	bl	8004850 <__malloc_lock>
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <_malloc_r+0xac>)
 80040e0:	6814      	ldr	r4, [r2, #0]
 80040e2:	4621      	mov	r1, r4
 80040e4:	b991      	cbnz	r1, 800410c <_malloc_r+0x54>
 80040e6:	4c20      	ldr	r4, [pc, #128]	; (8004168 <_malloc_r+0xb0>)
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	b91b      	cbnz	r3, 80040f4 <_malloc_r+0x3c>
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 fb05 	bl	80046fc <_sbrk_r>
 80040f2:	6020      	str	r0, [r4, #0]
 80040f4:	4629      	mov	r1, r5
 80040f6:	4630      	mov	r0, r6
 80040f8:	f000 fb00 	bl	80046fc <_sbrk_r>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d124      	bne.n	800414a <_malloc_r+0x92>
 8004100:	230c      	movs	r3, #12
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	4630      	mov	r0, r6
 8004106:	f000 fba4 	bl	8004852 <__malloc_unlock>
 800410a:	e7e4      	b.n	80040d6 <_malloc_r+0x1e>
 800410c:	680b      	ldr	r3, [r1, #0]
 800410e:	1b5b      	subs	r3, r3, r5
 8004110:	d418      	bmi.n	8004144 <_malloc_r+0x8c>
 8004112:	2b0b      	cmp	r3, #11
 8004114:	d90f      	bls.n	8004136 <_malloc_r+0x7e>
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	50cd      	str	r5, [r1, r3]
 800411a:	18cc      	adds	r4, r1, r3
 800411c:	4630      	mov	r0, r6
 800411e:	f000 fb98 	bl	8004852 <__malloc_unlock>
 8004122:	f104 000b 	add.w	r0, r4, #11
 8004126:	1d23      	adds	r3, r4, #4
 8004128:	f020 0007 	bic.w	r0, r0, #7
 800412c:	1ac3      	subs	r3, r0, r3
 800412e:	d0d3      	beq.n	80040d8 <_malloc_r+0x20>
 8004130:	425a      	negs	r2, r3
 8004132:	50e2      	str	r2, [r4, r3]
 8004134:	e7d0      	b.n	80040d8 <_malloc_r+0x20>
 8004136:	428c      	cmp	r4, r1
 8004138:	684b      	ldr	r3, [r1, #4]
 800413a:	bf16      	itet	ne
 800413c:	6063      	strne	r3, [r4, #4]
 800413e:	6013      	streq	r3, [r2, #0]
 8004140:	460c      	movne	r4, r1
 8004142:	e7eb      	b.n	800411c <_malloc_r+0x64>
 8004144:	460c      	mov	r4, r1
 8004146:	6849      	ldr	r1, [r1, #4]
 8004148:	e7cc      	b.n	80040e4 <_malloc_r+0x2c>
 800414a:	1cc4      	adds	r4, r0, #3
 800414c:	f024 0403 	bic.w	r4, r4, #3
 8004150:	42a0      	cmp	r0, r4
 8004152:	d005      	beq.n	8004160 <_malloc_r+0xa8>
 8004154:	1a21      	subs	r1, r4, r0
 8004156:	4630      	mov	r0, r6
 8004158:	f000 fad0 	bl	80046fc <_sbrk_r>
 800415c:	3001      	adds	r0, #1
 800415e:	d0cf      	beq.n	8004100 <_malloc_r+0x48>
 8004160:	6025      	str	r5, [r4, #0]
 8004162:	e7db      	b.n	800411c <_malloc_r+0x64>
 8004164:	20000098 	.word	0x20000098
 8004168:	2000009c 	.word	0x2000009c

0800416c <__sfputc_r>:
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	3b01      	subs	r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	b410      	push	{r4}
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	da08      	bge.n	800418a <__sfputc_r+0x1e>
 8004178:	6994      	ldr	r4, [r2, #24]
 800417a:	42a3      	cmp	r3, r4
 800417c:	db01      	blt.n	8004182 <__sfputc_r+0x16>
 800417e:	290a      	cmp	r1, #10
 8004180:	d103      	bne.n	800418a <__sfputc_r+0x1e>
 8004182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004186:	f7ff bcab 	b.w	8003ae0 <__swbuf_r>
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	1c58      	adds	r0, r3, #1
 800418e:	6010      	str	r0, [r2, #0]
 8004190:	7019      	strb	r1, [r3, #0]
 8004192:	4608      	mov	r0, r1
 8004194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004198:	4770      	bx	lr

0800419a <__sfputs_r>:
 800419a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419c:	4606      	mov	r6, r0
 800419e:	460f      	mov	r7, r1
 80041a0:	4614      	mov	r4, r2
 80041a2:	18d5      	adds	r5, r2, r3
 80041a4:	42ac      	cmp	r4, r5
 80041a6:	d101      	bne.n	80041ac <__sfputs_r+0x12>
 80041a8:	2000      	movs	r0, #0
 80041aa:	e007      	b.n	80041bc <__sfputs_r+0x22>
 80041ac:	463a      	mov	r2, r7
 80041ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b2:	4630      	mov	r0, r6
 80041b4:	f7ff ffda 	bl	800416c <__sfputc_r>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d1f3      	bne.n	80041a4 <__sfputs_r+0xa>
 80041bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041c0 <_vfiprintf_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	460c      	mov	r4, r1
 80041c6:	b09d      	sub	sp, #116	; 0x74
 80041c8:	4617      	mov	r7, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	4606      	mov	r6, r0
 80041ce:	b118      	cbz	r0, 80041d8 <_vfiprintf_r+0x18>
 80041d0:	6983      	ldr	r3, [r0, #24]
 80041d2:	b90b      	cbnz	r3, 80041d8 <_vfiprintf_r+0x18>
 80041d4:	f7ff fe34 	bl	8003e40 <__sinit>
 80041d8:	4b7c      	ldr	r3, [pc, #496]	; (80043cc <_vfiprintf_r+0x20c>)
 80041da:	429c      	cmp	r4, r3
 80041dc:	d158      	bne.n	8004290 <_vfiprintf_r+0xd0>
 80041de:	6874      	ldr	r4, [r6, #4]
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	0718      	lsls	r0, r3, #28
 80041e4:	d55e      	bpl.n	80042a4 <_vfiprintf_r+0xe4>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05b      	beq.n	80042a4 <_vfiprintf_r+0xe4>
 80041ec:	2300      	movs	r3, #0
 80041ee:	9309      	str	r3, [sp, #36]	; 0x24
 80041f0:	2320      	movs	r3, #32
 80041f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041f6:	2330      	movs	r3, #48	; 0x30
 80041f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041fc:	9503      	str	r5, [sp, #12]
 80041fe:	f04f 0b01 	mov.w	fp, #1
 8004202:	46b8      	mov	r8, r7
 8004204:	4645      	mov	r5, r8
 8004206:	f815 3b01 	ldrb.w	r3, [r5], #1
 800420a:	b10b      	cbz	r3, 8004210 <_vfiprintf_r+0x50>
 800420c:	2b25      	cmp	r3, #37	; 0x25
 800420e:	d154      	bne.n	80042ba <_vfiprintf_r+0xfa>
 8004210:	ebb8 0a07 	subs.w	sl, r8, r7
 8004214:	d00b      	beq.n	800422e <_vfiprintf_r+0x6e>
 8004216:	4653      	mov	r3, sl
 8004218:	463a      	mov	r2, r7
 800421a:	4621      	mov	r1, r4
 800421c:	4630      	mov	r0, r6
 800421e:	f7ff ffbc 	bl	800419a <__sfputs_r>
 8004222:	3001      	adds	r0, #1
 8004224:	f000 80c2 	beq.w	80043ac <_vfiprintf_r+0x1ec>
 8004228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422a:	4453      	add	r3, sl
 800422c:	9309      	str	r3, [sp, #36]	; 0x24
 800422e:	f898 3000 	ldrb.w	r3, [r8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80ba 	beq.w	80043ac <_vfiprintf_r+0x1ec>
 8004238:	2300      	movs	r3, #0
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	9307      	str	r3, [sp, #28]
 8004246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800424a:	931a      	str	r3, [sp, #104]	; 0x68
 800424c:	46a8      	mov	r8, r5
 800424e:	2205      	movs	r2, #5
 8004250:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004254:	485e      	ldr	r0, [pc, #376]	; (80043d0 <_vfiprintf_r+0x210>)
 8004256:	f7fb ffbb 	bl	80001d0 <memchr>
 800425a:	9b04      	ldr	r3, [sp, #16]
 800425c:	bb78      	cbnz	r0, 80042be <_vfiprintf_r+0xfe>
 800425e:	06d9      	lsls	r1, r3, #27
 8004260:	bf44      	itt	mi
 8004262:	2220      	movmi	r2, #32
 8004264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004268:	071a      	lsls	r2, r3, #28
 800426a:	bf44      	itt	mi
 800426c:	222b      	movmi	r2, #43	; 0x2b
 800426e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004272:	782a      	ldrb	r2, [r5, #0]
 8004274:	2a2a      	cmp	r2, #42	; 0x2a
 8004276:	d02a      	beq.n	80042ce <_vfiprintf_r+0x10e>
 8004278:	9a07      	ldr	r2, [sp, #28]
 800427a:	46a8      	mov	r8, r5
 800427c:	2000      	movs	r0, #0
 800427e:	250a      	movs	r5, #10
 8004280:	4641      	mov	r1, r8
 8004282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004286:	3b30      	subs	r3, #48	; 0x30
 8004288:	2b09      	cmp	r3, #9
 800428a:	d969      	bls.n	8004360 <_vfiprintf_r+0x1a0>
 800428c:	b360      	cbz	r0, 80042e8 <_vfiprintf_r+0x128>
 800428e:	e024      	b.n	80042da <_vfiprintf_r+0x11a>
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <_vfiprintf_r+0x214>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d101      	bne.n	800429a <_vfiprintf_r+0xda>
 8004296:	68b4      	ldr	r4, [r6, #8]
 8004298:	e7a2      	b.n	80041e0 <_vfiprintf_r+0x20>
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <_vfiprintf_r+0x218>)
 800429c:	429c      	cmp	r4, r3
 800429e:	bf08      	it	eq
 80042a0:	68f4      	ldreq	r4, [r6, #12]
 80042a2:	e79d      	b.n	80041e0 <_vfiprintf_r+0x20>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4630      	mov	r0, r6
 80042a8:	f7ff fc6c 	bl	8003b84 <__swsetup_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d09d      	beq.n	80041ec <_vfiprintf_r+0x2c>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	b01d      	add	sp, #116	; 0x74
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	46a8      	mov	r8, r5
 80042bc:	e7a2      	b.n	8004204 <_vfiprintf_r+0x44>
 80042be:	4a44      	ldr	r2, [pc, #272]	; (80043d0 <_vfiprintf_r+0x210>)
 80042c0:	1a80      	subs	r0, r0, r2
 80042c2:	fa0b f000 	lsl.w	r0, fp, r0
 80042c6:	4318      	orrs	r0, r3
 80042c8:	9004      	str	r0, [sp, #16]
 80042ca:	4645      	mov	r5, r8
 80042cc:	e7be      	b.n	800424c <_vfiprintf_r+0x8c>
 80042ce:	9a03      	ldr	r2, [sp, #12]
 80042d0:	1d11      	adds	r1, r2, #4
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	9103      	str	r1, [sp, #12]
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	db01      	blt.n	80042de <_vfiprintf_r+0x11e>
 80042da:	9207      	str	r2, [sp, #28]
 80042dc:	e004      	b.n	80042e8 <_vfiprintf_r+0x128>
 80042de:	4252      	negs	r2, r2
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	9207      	str	r2, [sp, #28]
 80042e6:	9304      	str	r3, [sp, #16]
 80042e8:	f898 3000 	ldrb.w	r3, [r8]
 80042ec:	2b2e      	cmp	r3, #46	; 0x2e
 80042ee:	d10e      	bne.n	800430e <_vfiprintf_r+0x14e>
 80042f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80042f4:	2b2a      	cmp	r3, #42	; 0x2a
 80042f6:	d138      	bne.n	800436a <_vfiprintf_r+0x1aa>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9203      	str	r2, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfb8      	it	lt
 8004304:	f04f 33ff 	movlt.w	r3, #4294967295
 8004308:	f108 0802 	add.w	r8, r8, #2
 800430c:	9305      	str	r3, [sp, #20]
 800430e:	4d33      	ldr	r5, [pc, #204]	; (80043dc <_vfiprintf_r+0x21c>)
 8004310:	f898 1000 	ldrb.w	r1, [r8]
 8004314:	2203      	movs	r2, #3
 8004316:	4628      	mov	r0, r5
 8004318:	f7fb ff5a 	bl	80001d0 <memchr>
 800431c:	b140      	cbz	r0, 8004330 <_vfiprintf_r+0x170>
 800431e:	2340      	movs	r3, #64	; 0x40
 8004320:	1b40      	subs	r0, r0, r5
 8004322:	fa03 f000 	lsl.w	r0, r3, r0
 8004326:	9b04      	ldr	r3, [sp, #16]
 8004328:	4303      	orrs	r3, r0
 800432a:	f108 0801 	add.w	r8, r8, #1
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	f898 1000 	ldrb.w	r1, [r8]
 8004334:	482a      	ldr	r0, [pc, #168]	; (80043e0 <_vfiprintf_r+0x220>)
 8004336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800433a:	2206      	movs	r2, #6
 800433c:	f108 0701 	add.w	r7, r8, #1
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	2800      	cmp	r0, #0
 8004346:	d037      	beq.n	80043b8 <_vfiprintf_r+0x1f8>
 8004348:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <_vfiprintf_r+0x224>)
 800434a:	bb1b      	cbnz	r3, 8004394 <_vfiprintf_r+0x1d4>
 800434c:	9b03      	ldr	r3, [sp, #12]
 800434e:	3307      	adds	r3, #7
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	3308      	adds	r3, #8
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	444b      	add	r3, r9
 800435c:	9309      	str	r3, [sp, #36]	; 0x24
 800435e:	e750      	b.n	8004202 <_vfiprintf_r+0x42>
 8004360:	fb05 3202 	mla	r2, r5, r2, r3
 8004364:	2001      	movs	r0, #1
 8004366:	4688      	mov	r8, r1
 8004368:	e78a      	b.n	8004280 <_vfiprintf_r+0xc0>
 800436a:	2300      	movs	r3, #0
 800436c:	f108 0801 	add.w	r8, r8, #1
 8004370:	9305      	str	r3, [sp, #20]
 8004372:	4619      	mov	r1, r3
 8004374:	250a      	movs	r5, #10
 8004376:	4640      	mov	r0, r8
 8004378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437c:	3a30      	subs	r2, #48	; 0x30
 800437e:	2a09      	cmp	r2, #9
 8004380:	d903      	bls.n	800438a <_vfiprintf_r+0x1ca>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0c3      	beq.n	800430e <_vfiprintf_r+0x14e>
 8004386:	9105      	str	r1, [sp, #20]
 8004388:	e7c1      	b.n	800430e <_vfiprintf_r+0x14e>
 800438a:	fb05 2101 	mla	r1, r5, r1, r2
 800438e:	2301      	movs	r3, #1
 8004390:	4680      	mov	r8, r0
 8004392:	e7f0      	b.n	8004376 <_vfiprintf_r+0x1b6>
 8004394:	ab03      	add	r3, sp, #12
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4622      	mov	r2, r4
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <_vfiprintf_r+0x228>)
 800439c:	a904      	add	r1, sp, #16
 800439e:	4630      	mov	r0, r6
 80043a0:	f3af 8000 	nop.w
 80043a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043a8:	4681      	mov	r9, r0
 80043aa:	d1d5      	bne.n	8004358 <_vfiprintf_r+0x198>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	065b      	lsls	r3, r3, #25
 80043b0:	f53f af7e 	bmi.w	80042b0 <_vfiprintf_r+0xf0>
 80043b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043b6:	e77d      	b.n	80042b4 <_vfiprintf_r+0xf4>
 80043b8:	ab03      	add	r3, sp, #12
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4622      	mov	r2, r4
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <_vfiprintf_r+0x228>)
 80043c0:	a904      	add	r1, sp, #16
 80043c2:	4630      	mov	r0, r6
 80043c4:	f000 f888 	bl	80044d8 <_printf_i>
 80043c8:	e7ec      	b.n	80043a4 <_vfiprintf_r+0x1e4>
 80043ca:	bf00      	nop
 80043cc:	080049fc 	.word	0x080049fc
 80043d0:	08004a3c 	.word	0x08004a3c
 80043d4:	08004a1c 	.word	0x08004a1c
 80043d8:	080049dc 	.word	0x080049dc
 80043dc:	08004a42 	.word	0x08004a42
 80043e0:	08004a46 	.word	0x08004a46
 80043e4:	00000000 	.word	0x00000000
 80043e8:	0800419b 	.word	0x0800419b

080043ec <_printf_common>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	4691      	mov	r9, r2
 80043f2:	461f      	mov	r7, r3
 80043f4:	688a      	ldr	r2, [r1, #8]
 80043f6:	690b      	ldr	r3, [r1, #16]
 80043f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bfb8      	it	lt
 8004400:	4613      	movlt	r3, r2
 8004402:	f8c9 3000 	str.w	r3, [r9]
 8004406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800440a:	4606      	mov	r6, r0
 800440c:	460c      	mov	r4, r1
 800440e:	b112      	cbz	r2, 8004416 <_printf_common+0x2a>
 8004410:	3301      	adds	r3, #1
 8004412:	f8c9 3000 	str.w	r3, [r9]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	0699      	lsls	r1, r3, #26
 800441a:	bf42      	ittt	mi
 800441c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004420:	3302      	addmi	r3, #2
 8004422:	f8c9 3000 	strmi.w	r3, [r9]
 8004426:	6825      	ldr	r5, [r4, #0]
 8004428:	f015 0506 	ands.w	r5, r5, #6
 800442c:	d107      	bne.n	800443e <_printf_common+0x52>
 800442e:	f104 0a19 	add.w	sl, r4, #25
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	f8d9 2000 	ldr.w	r2, [r9]
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	42ab      	cmp	r3, r5
 800443c:	dc28      	bgt.n	8004490 <_printf_common+0xa4>
 800443e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	3300      	adds	r3, #0
 8004446:	bf18      	it	ne
 8004448:	2301      	movne	r3, #1
 800444a:	0692      	lsls	r2, r2, #26
 800444c:	d42d      	bmi.n	80044aa <_printf_common+0xbe>
 800444e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004452:	4639      	mov	r1, r7
 8004454:	4630      	mov	r0, r6
 8004456:	47c0      	blx	r8
 8004458:	3001      	adds	r0, #1
 800445a:	d020      	beq.n	800449e <_printf_common+0xb2>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	68e5      	ldr	r5, [r4, #12]
 8004460:	f8d9 2000 	ldr.w	r2, [r9]
 8004464:	f003 0306 	and.w	r3, r3, #6
 8004468:	2b04      	cmp	r3, #4
 800446a:	bf08      	it	eq
 800446c:	1aad      	subeq	r5, r5, r2
 800446e:	68a3      	ldr	r3, [r4, #8]
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	bf0c      	ite	eq
 8004474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004478:	2500      	movne	r5, #0
 800447a:	4293      	cmp	r3, r2
 800447c:	bfc4      	itt	gt
 800447e:	1a9b      	subgt	r3, r3, r2
 8004480:	18ed      	addgt	r5, r5, r3
 8004482:	f04f 0900 	mov.w	r9, #0
 8004486:	341a      	adds	r4, #26
 8004488:	454d      	cmp	r5, r9
 800448a:	d11a      	bne.n	80044c2 <_printf_common+0xd6>
 800448c:	2000      	movs	r0, #0
 800448e:	e008      	b.n	80044a2 <_printf_common+0xb6>
 8004490:	2301      	movs	r3, #1
 8004492:	4652      	mov	r2, sl
 8004494:	4639      	mov	r1, r7
 8004496:	4630      	mov	r0, r6
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d103      	bne.n	80044a6 <_printf_common+0xba>
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a6:	3501      	adds	r5, #1
 80044a8:	e7c3      	b.n	8004432 <_printf_common+0x46>
 80044aa:	18e1      	adds	r1, r4, r3
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	2030      	movs	r0, #48	; 0x30
 80044b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b4:	4422      	add	r2, r4
 80044b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044be:	3302      	adds	r3, #2
 80044c0:	e7c5      	b.n	800444e <_printf_common+0x62>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4622      	mov	r2, r4
 80044c6:	4639      	mov	r1, r7
 80044c8:	4630      	mov	r0, r6
 80044ca:	47c0      	blx	r8
 80044cc:	3001      	adds	r0, #1
 80044ce:	d0e6      	beq.n	800449e <_printf_common+0xb2>
 80044d0:	f109 0901 	add.w	r9, r9, #1
 80044d4:	e7d8      	b.n	8004488 <_printf_common+0x9c>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044e0:	460c      	mov	r4, r1
 80044e2:	7e09      	ldrb	r1, [r1, #24]
 80044e4:	b085      	sub	sp, #20
 80044e6:	296e      	cmp	r1, #110	; 0x6e
 80044e8:	4617      	mov	r7, r2
 80044ea:	4606      	mov	r6, r0
 80044ec:	4698      	mov	r8, r3
 80044ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044f0:	f000 80b3 	beq.w	800465a <_printf_i+0x182>
 80044f4:	d822      	bhi.n	800453c <_printf_i+0x64>
 80044f6:	2963      	cmp	r1, #99	; 0x63
 80044f8:	d036      	beq.n	8004568 <_printf_i+0x90>
 80044fa:	d80a      	bhi.n	8004512 <_printf_i+0x3a>
 80044fc:	2900      	cmp	r1, #0
 80044fe:	f000 80b9 	beq.w	8004674 <_printf_i+0x19c>
 8004502:	2958      	cmp	r1, #88	; 0x58
 8004504:	f000 8083 	beq.w	800460e <_printf_i+0x136>
 8004508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800450c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004510:	e032      	b.n	8004578 <_printf_i+0xa0>
 8004512:	2964      	cmp	r1, #100	; 0x64
 8004514:	d001      	beq.n	800451a <_printf_i+0x42>
 8004516:	2969      	cmp	r1, #105	; 0x69
 8004518:	d1f6      	bne.n	8004508 <_printf_i+0x30>
 800451a:	6820      	ldr	r0, [r4, #0]
 800451c:	6813      	ldr	r3, [r2, #0]
 800451e:	0605      	lsls	r5, r0, #24
 8004520:	f103 0104 	add.w	r1, r3, #4
 8004524:	d52a      	bpl.n	800457c <_printf_i+0xa4>
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6011      	str	r1, [r2, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da03      	bge.n	8004536 <_printf_i+0x5e>
 800452e:	222d      	movs	r2, #45	; 0x2d
 8004530:	425b      	negs	r3, r3
 8004532:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004536:	486f      	ldr	r0, [pc, #444]	; (80046f4 <_printf_i+0x21c>)
 8004538:	220a      	movs	r2, #10
 800453a:	e039      	b.n	80045b0 <_printf_i+0xd8>
 800453c:	2973      	cmp	r1, #115	; 0x73
 800453e:	f000 809d 	beq.w	800467c <_printf_i+0x1a4>
 8004542:	d808      	bhi.n	8004556 <_printf_i+0x7e>
 8004544:	296f      	cmp	r1, #111	; 0x6f
 8004546:	d020      	beq.n	800458a <_printf_i+0xb2>
 8004548:	2970      	cmp	r1, #112	; 0x70
 800454a:	d1dd      	bne.n	8004508 <_printf_i+0x30>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	f043 0320 	orr.w	r3, r3, #32
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	e003      	b.n	800455e <_printf_i+0x86>
 8004556:	2975      	cmp	r1, #117	; 0x75
 8004558:	d017      	beq.n	800458a <_printf_i+0xb2>
 800455a:	2978      	cmp	r1, #120	; 0x78
 800455c:	d1d4      	bne.n	8004508 <_printf_i+0x30>
 800455e:	2378      	movs	r3, #120	; 0x78
 8004560:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004564:	4864      	ldr	r0, [pc, #400]	; (80046f8 <_printf_i+0x220>)
 8004566:	e055      	b.n	8004614 <_printf_i+0x13c>
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	1d19      	adds	r1, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6011      	str	r1, [r2, #0]
 8004570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004578:	2301      	movs	r3, #1
 800457a:	e08c      	b.n	8004696 <_printf_i+0x1be>
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6011      	str	r1, [r2, #0]
 8004580:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004584:	bf18      	it	ne
 8004586:	b21b      	sxthne	r3, r3
 8004588:	e7cf      	b.n	800452a <_printf_i+0x52>
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	6825      	ldr	r5, [r4, #0]
 800458e:	1d18      	adds	r0, r3, #4
 8004590:	6010      	str	r0, [r2, #0]
 8004592:	0628      	lsls	r0, r5, #24
 8004594:	d501      	bpl.n	800459a <_printf_i+0xc2>
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	e002      	b.n	80045a0 <_printf_i+0xc8>
 800459a:	0668      	lsls	r0, r5, #25
 800459c:	d5fb      	bpl.n	8004596 <_printf_i+0xbe>
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	4854      	ldr	r0, [pc, #336]	; (80046f4 <_printf_i+0x21c>)
 80045a2:	296f      	cmp	r1, #111	; 0x6f
 80045a4:	bf14      	ite	ne
 80045a6:	220a      	movne	r2, #10
 80045a8:	2208      	moveq	r2, #8
 80045aa:	2100      	movs	r1, #0
 80045ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b0:	6865      	ldr	r5, [r4, #4]
 80045b2:	60a5      	str	r5, [r4, #8]
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	f2c0 8095 	blt.w	80046e4 <_printf_i+0x20c>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	f021 0104 	bic.w	r1, r1, #4
 80045c0:	6021      	str	r1, [r4, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d13d      	bne.n	8004642 <_printf_i+0x16a>
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	f040 808e 	bne.w	80046e8 <_printf_i+0x210>
 80045cc:	4665      	mov	r5, ip
 80045ce:	2a08      	cmp	r2, #8
 80045d0:	d10b      	bne.n	80045ea <_printf_i+0x112>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	07db      	lsls	r3, r3, #31
 80045d6:	d508      	bpl.n	80045ea <_printf_i+0x112>
 80045d8:	6923      	ldr	r3, [r4, #16]
 80045da:	6862      	ldr	r2, [r4, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	bfde      	ittt	le
 80045e0:	2330      	movle	r3, #48	; 0x30
 80045e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045ea:	ebac 0305 	sub.w	r3, ip, r5
 80045ee:	6123      	str	r3, [r4, #16]
 80045f0:	f8cd 8000 	str.w	r8, [sp]
 80045f4:	463b      	mov	r3, r7
 80045f6:	aa03      	add	r2, sp, #12
 80045f8:	4621      	mov	r1, r4
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7ff fef6 	bl	80043ec <_printf_common>
 8004600:	3001      	adds	r0, #1
 8004602:	d14d      	bne.n	80046a0 <_printf_i+0x1c8>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	b005      	add	sp, #20
 800460a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800460e:	4839      	ldr	r0, [pc, #228]	; (80046f4 <_printf_i+0x21c>)
 8004610:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	6821      	ldr	r1, [r4, #0]
 8004618:	1d1d      	adds	r5, r3, #4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6015      	str	r5, [r2, #0]
 800461e:	060a      	lsls	r2, r1, #24
 8004620:	d50b      	bpl.n	800463a <_printf_i+0x162>
 8004622:	07ca      	lsls	r2, r1, #31
 8004624:	bf44      	itt	mi
 8004626:	f041 0120 	orrmi.w	r1, r1, #32
 800462a:	6021      	strmi	r1, [r4, #0]
 800462c:	b91b      	cbnz	r3, 8004636 <_printf_i+0x15e>
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	f022 0220 	bic.w	r2, r2, #32
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	2210      	movs	r2, #16
 8004638:	e7b7      	b.n	80045aa <_printf_i+0xd2>
 800463a:	064d      	lsls	r5, r1, #25
 800463c:	bf48      	it	mi
 800463e:	b29b      	uxthmi	r3, r3
 8004640:	e7ef      	b.n	8004622 <_printf_i+0x14a>
 8004642:	4665      	mov	r5, ip
 8004644:	fbb3 f1f2 	udiv	r1, r3, r2
 8004648:	fb02 3311 	mls	r3, r2, r1, r3
 800464c:	5cc3      	ldrb	r3, [r0, r3]
 800464e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004652:	460b      	mov	r3, r1
 8004654:	2900      	cmp	r1, #0
 8004656:	d1f5      	bne.n	8004644 <_printf_i+0x16c>
 8004658:	e7b9      	b.n	80045ce <_printf_i+0xf6>
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	6825      	ldr	r5, [r4, #0]
 800465e:	6961      	ldr	r1, [r4, #20]
 8004660:	1d18      	adds	r0, r3, #4
 8004662:	6010      	str	r0, [r2, #0]
 8004664:	0628      	lsls	r0, r5, #24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	d501      	bpl.n	800466e <_printf_i+0x196>
 800466a:	6019      	str	r1, [r3, #0]
 800466c:	e002      	b.n	8004674 <_printf_i+0x19c>
 800466e:	066a      	lsls	r2, r5, #25
 8004670:	d5fb      	bpl.n	800466a <_printf_i+0x192>
 8004672:	8019      	strh	r1, [r3, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	6123      	str	r3, [r4, #16]
 8004678:	4665      	mov	r5, ip
 800467a:	e7b9      	b.n	80045f0 <_printf_i+0x118>
 800467c:	6813      	ldr	r3, [r2, #0]
 800467e:	1d19      	adds	r1, r3, #4
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	681d      	ldr	r5, [r3, #0]
 8004684:	6862      	ldr	r2, [r4, #4]
 8004686:	2100      	movs	r1, #0
 8004688:	4628      	mov	r0, r5
 800468a:	f7fb fda1 	bl	80001d0 <memchr>
 800468e:	b108      	cbz	r0, 8004694 <_printf_i+0x1bc>
 8004690:	1b40      	subs	r0, r0, r5
 8004692:	6060      	str	r0, [r4, #4]
 8004694:	6863      	ldr	r3, [r4, #4]
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	2300      	movs	r3, #0
 800469a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469e:	e7a7      	b.n	80045f0 <_printf_i+0x118>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	462a      	mov	r2, r5
 80046a4:	4639      	mov	r1, r7
 80046a6:	4630      	mov	r0, r6
 80046a8:	47c0      	blx	r8
 80046aa:	3001      	adds	r0, #1
 80046ac:	d0aa      	beq.n	8004604 <_printf_i+0x12c>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	079b      	lsls	r3, r3, #30
 80046b2:	d413      	bmi.n	80046dc <_printf_i+0x204>
 80046b4:	68e0      	ldr	r0, [r4, #12]
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	4298      	cmp	r0, r3
 80046ba:	bfb8      	it	lt
 80046bc:	4618      	movlt	r0, r3
 80046be:	e7a3      	b.n	8004608 <_printf_i+0x130>
 80046c0:	2301      	movs	r3, #1
 80046c2:	464a      	mov	r2, r9
 80046c4:	4639      	mov	r1, r7
 80046c6:	4630      	mov	r0, r6
 80046c8:	47c0      	blx	r8
 80046ca:	3001      	adds	r0, #1
 80046cc:	d09a      	beq.n	8004604 <_printf_i+0x12c>
 80046ce:	3501      	adds	r5, #1
 80046d0:	68e3      	ldr	r3, [r4, #12]
 80046d2:	9a03      	ldr	r2, [sp, #12]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	42ab      	cmp	r3, r5
 80046d8:	dcf2      	bgt.n	80046c0 <_printf_i+0x1e8>
 80046da:	e7eb      	b.n	80046b4 <_printf_i+0x1dc>
 80046dc:	2500      	movs	r5, #0
 80046de:	f104 0919 	add.w	r9, r4, #25
 80046e2:	e7f5      	b.n	80046d0 <_printf_i+0x1f8>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ac      	bne.n	8004642 <_printf_i+0x16a>
 80046e8:	7803      	ldrb	r3, [r0, #0]
 80046ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f2:	e76c      	b.n	80045ce <_printf_i+0xf6>
 80046f4:	08004a4d 	.word	0x08004a4d
 80046f8:	08004a5e 	.word	0x08004a5e

080046fc <_sbrk_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4c06      	ldr	r4, [pc, #24]	; (8004718 <_sbrk_r+0x1c>)
 8004700:	2300      	movs	r3, #0
 8004702:	4605      	mov	r5, r0
 8004704:	4608      	mov	r0, r1
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	f7fe fe02 	bl	8003310 <_sbrk>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_sbrk_r+0x1a>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	b103      	cbz	r3, 8004716 <_sbrk_r+0x1a>
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	200001c4 	.word	0x200001c4

0800471c <__sread>:
 800471c:	b510      	push	{r4, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	f000 f896 	bl	8004854 <_read_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	bfab      	itete	ge
 800472c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800472e:	89a3      	ldrhlt	r3, [r4, #12]
 8004730:	181b      	addge	r3, r3, r0
 8004732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004736:	bfac      	ite	ge
 8004738:	6563      	strge	r3, [r4, #84]	; 0x54
 800473a:	81a3      	strhlt	r3, [r4, #12]
 800473c:	bd10      	pop	{r4, pc}

0800473e <__swrite>:
 800473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	461f      	mov	r7, r3
 8004744:	898b      	ldrh	r3, [r1, #12]
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	4605      	mov	r5, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4616      	mov	r6, r2
 800474e:	d505      	bpl.n	800475c <__swrite+0x1e>
 8004750:	2302      	movs	r3, #2
 8004752:	2200      	movs	r2, #0
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	f000 f868 	bl	800482c <_lseek_r>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	f000 b817 	b.w	80047a4 <_write_r>

08004776 <__sseek>:
 8004776:	b510      	push	{r4, lr}
 8004778:	460c      	mov	r4, r1
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	f000 f855 	bl	800482c <_lseek_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	bf15      	itete	ne
 8004788:	6560      	strne	r0, [r4, #84]	; 0x54
 800478a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800478e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004792:	81a3      	strheq	r3, [r4, #12]
 8004794:	bf18      	it	ne
 8004796:	81a3      	strhne	r3, [r4, #12]
 8004798:	bd10      	pop	{r4, pc}

0800479a <__sclose>:
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 b813 	b.w	80047c8 <_close_r>
	...

080047a4 <_write_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4c07      	ldr	r4, [pc, #28]	; (80047c4 <_write_r+0x20>)
 80047a8:	4605      	mov	r5, r0
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	2200      	movs	r2, #0
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7fe faae 	bl	8002d14 <_write>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_write_r+0x1e>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_write_r+0x1e>
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	200001c4 	.word	0x200001c4

080047c8 <_close_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4c06      	ldr	r4, [pc, #24]	; (80047e4 <_close_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4605      	mov	r5, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	f7fe fd67 	bl	80032a6 <_close>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_close_r+0x1a>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_close_r+0x1a>
 80047e0:	602b      	str	r3, [r5, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200001c4 	.word	0x200001c4

080047e8 <_fstat_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4c07      	ldr	r4, [pc, #28]	; (8004808 <_fstat_r+0x20>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4605      	mov	r5, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	f7fe fd62 	bl	80032be <_fstat>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	d102      	bne.n	8004804 <_fstat_r+0x1c>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	b103      	cbz	r3, 8004804 <_fstat_r+0x1c>
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	bf00      	nop
 8004808:	200001c4 	.word	0x200001c4

0800480c <_isatty_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4c06      	ldr	r4, [pc, #24]	; (8004828 <_isatty_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4605      	mov	r5, r0
 8004814:	4608      	mov	r0, r1
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	f7fe fd61 	bl	80032de <_isatty>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_isatty_r+0x1a>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b103      	cbz	r3, 8004826 <_isatty_r+0x1a>
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200001c4 	.word	0x200001c4

0800482c <_lseek_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4c07      	ldr	r4, [pc, #28]	; (800484c <_lseek_r+0x20>)
 8004830:	4605      	mov	r5, r0
 8004832:	4608      	mov	r0, r1
 8004834:	4611      	mov	r1, r2
 8004836:	2200      	movs	r2, #0
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fe fd5a 	bl	80032f4 <_lseek>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_lseek_r+0x1e>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	b103      	cbz	r3, 800484a <_lseek_r+0x1e>
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200001c4 	.word	0x200001c4

08004850 <__malloc_lock>:
 8004850:	4770      	bx	lr

08004852 <__malloc_unlock>:
 8004852:	4770      	bx	lr

08004854 <_read_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4c07      	ldr	r4, [pc, #28]	; (8004874 <_read_r+0x20>)
 8004858:	4605      	mov	r5, r0
 800485a:	4608      	mov	r0, r1
 800485c:	4611      	mov	r1, r2
 800485e:	2200      	movs	r2, #0
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f7fe fd02 	bl	800326c <_read>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <_read_r+0x1e>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	b103      	cbz	r3, 8004872 <_read_r+0x1e>
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	200001c4 	.word	0x200001c4

08004878 <_init>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr

08004884 <_fini>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr
