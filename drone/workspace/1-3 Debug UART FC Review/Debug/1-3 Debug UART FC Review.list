
1-3 Debug UART FC Review.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053bc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08005548  08005548  00015548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005808  08005808  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005810  08005810  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200001dc  080059f4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080059f4  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000938b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d25  00000000  00000000  00029597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  0002b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  0002bb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021dd2  00000000  00000000  0002c368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085b8  00000000  00000000  0004e13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c424d  00000000  00000000  000566f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a93f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f2c  00000000  00000000  0011a9bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800552c 	.word	0x0800552c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800552c 	.word	0x0800552c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f92f 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f001 fde4 	bl	8002a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f939 	bl	80010da <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f90f 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000004 	.word	0x20000004
 8000ec8:	20000204 	.word	0x20000204

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000204 	.word	0x20000204

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_Delay+0x40>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000004 	.word	0x20000004

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff47 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff5c 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb0 	bl	8001048 <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e22d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001112:	4ba3      	ldr	r3, [pc, #652]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d00c      	beq.n	8001138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4ba0      	ldr	r3, [pc, #640]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001126:	2b08      	cmp	r3, #8
 8001128:	d112      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001136:	d10b      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4b99      	ldr	r3, [pc, #612]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d05b      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d157      	bne.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e208      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x74>
 800115a:	4b91      	ldr	r3, [pc, #580]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a90      	ldr	r2, [pc, #576]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a8a      	ldr	r2, [pc, #552]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a87      	ldr	r2, [pc, #540]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 800118c:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a83      	ldr	r2, [pc, #524]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a80      	ldr	r2, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fe8e 	bl	8000ecc <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fe8a 	bl	8000ecc <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1cd      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fe7a 	bl	8000ecc <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fe76 	bl	8000ecc <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1b9      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e18d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4952      	ldr	r1, [pc, #328]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fe2f 	bl	8000ecc <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fe2b 	bl	8000ecc <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e16e      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4940      	ldr	r1, [pc, #256]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fe0e 	bl	8000ecc <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fe0a 	bl	8000ecc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e14d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d030      	beq.n	8001340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fdee 	bl	8000ecc <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fdea 	bl	8000ecc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e12d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x200>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fdd7 	bl	8000ecc <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fdd3 	bl	8000ecc <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e116      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a0 	beq.w	800148e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d121      	bne.n	80013ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fd99 	bl	8000ecc <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e011      	b.n	80013c2 <HAL_RCC_OscConfig+0x2ce>
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470000 	.word	0x42470000
 80013a8:	42470e80 	.word	0x42470e80
 80013ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff fd8c 	bl	8000ecc <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0cf      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x478>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
 80013d6:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6713      	str	r3, [r2, #112]	; 0x70
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x32a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x312>
 80013ec:	4b60      	ldr	r3, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a5f      	ldr	r2, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	; 0x70
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x32a>
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a59      	ldr	r2, [pc, #356]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a56      	ldr	r2, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fd51 	bl	8000ecc <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fd4d 	bl	8000ecc <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e08e      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x33a>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fd3b 	bl	8000ecc <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fd37 	bl	8000ecc <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e078      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d064      	beq.n	8001560 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d05c      	beq.n	800155c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d141      	bne.n	800152e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x480>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fd0c 	bl	8000ecc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fd08 	bl	8000ecc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e04b      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	085b      	lsrs	r3, r3, #1
 80014ee:	3b01      	subs	r3, #1
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	491d      	ldr	r1, [pc, #116]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_RCC_OscConfig+0x480>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fce1 	bl	8000ecc <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff fcdd 	bl	8000ecc <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e020      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x41a>
 800152c:	e018      	b.n	8001560 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_OscConfig+0x480>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fcca 	bl	8000ecc <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fcc6 	bl	8000ecc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e009      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x448>
 800155a:	e001      	b.n	8001560 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40007000 	.word	0x40007000
 8001570:	40023800 	.word	0x40023800
 8001574:	42470060 	.word	0x42470060

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0ca      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b6      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494c      	ldr	r1, [pc, #304]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07d      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06d      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e065      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4933      	ldr	r1, [pc, #204]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fc30 	bl	8000ecc <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fc2c 	bl	8000ecc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04d      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e030      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4915      	ldr	r1, [pc, #84]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490d      	ldr	r1, [pc, #52]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f81d 	bl	800173c <HAL_RCC_GetSysClockFreq>
 8001702:	4601      	mov	r1, r0
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	fa21 f303 	lsr.w	r3, r1, r3
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fb92 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	08005554 	.word	0x08005554
 8001738:	20000008 	.word	0x20000008

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d007      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x32>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d008      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x38>
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 80b4 	bne.w	80018d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800176a:	60bb      	str	r3, [r7, #8]
       break;
 800176c:	e0b3      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001770:	60bb      	str	r3, [r7, #8]
      break;
 8001772:	e0b0      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177e:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d04a      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178a:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	099b      	lsrs	r3, r3, #6
 8001790:	f04f 0400 	mov.w	r4, #0
 8001794:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	ea03 0501 	and.w	r5, r3, r1
 80017a0:	ea04 0602 	and.w	r6, r4, r2
 80017a4:	4629      	mov	r1, r5
 80017a6:	4632      	mov	r2, r6
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f04f 0400 	mov.w	r4, #0
 80017b0:	0154      	lsls	r4, r2, #5
 80017b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017b6:	014b      	lsls	r3, r1, #5
 80017b8:	4619      	mov	r1, r3
 80017ba:	4622      	mov	r2, r4
 80017bc:	1b49      	subs	r1, r1, r5
 80017be:	eb62 0206 	sbc.w	r2, r2, r6
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	f04f 0400 	mov.w	r4, #0
 80017ca:	0194      	lsls	r4, r2, #6
 80017cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017d0:	018b      	lsls	r3, r1, #6
 80017d2:	1a5b      	subs	r3, r3, r1
 80017d4:	eb64 0402 	sbc.w	r4, r4, r2
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	00e2      	lsls	r2, r4, #3
 80017e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017e6:	00d9      	lsls	r1, r3, #3
 80017e8:	460b      	mov	r3, r1
 80017ea:	4614      	mov	r4, r2
 80017ec:	195b      	adds	r3, r3, r5
 80017ee:	eb44 0406 	adc.w	r4, r4, r6
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	0262      	lsls	r2, r4, #9
 80017fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001800:	0259      	lsls	r1, r3, #9
 8001802:	460b      	mov	r3, r1
 8001804:	4614      	mov	r4, r2
 8001806:	4618      	mov	r0, r3
 8001808:	4621      	mov	r1, r4
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	f7ff f974 	bl	8000b00 <__aeabi_uldivmod>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e049      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	ea03 0501 	and.w	r5, r3, r1
 8001836:	ea04 0602 	and.w	r6, r4, r2
 800183a:	4629      	mov	r1, r5
 800183c:	4632      	mov	r2, r6
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	0154      	lsls	r4, r2, #5
 8001848:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800184c:	014b      	lsls	r3, r1, #5
 800184e:	4619      	mov	r1, r3
 8001850:	4622      	mov	r2, r4
 8001852:	1b49      	subs	r1, r1, r5
 8001854:	eb62 0206 	sbc.w	r2, r2, r6
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	0194      	lsls	r4, r2, #6
 8001862:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	eb64 0402 	sbc.w	r4, r4, r2
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	00e2      	lsls	r2, r4, #3
 8001878:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800187c:	00d9      	lsls	r1, r3, #3
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	195b      	adds	r3, r3, r5
 8001884:	eb44 0406 	adc.w	r4, r4, r6
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	02a2      	lsls	r2, r4, #10
 8001892:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001896:	0299      	lsls	r1, r3, #10
 8001898:	460b      	mov	r3, r1
 800189a:	4614      	mov	r4, r2
 800189c:	4618      	mov	r0, r3
 800189e:	4621      	mov	r1, r4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4623      	mov	r3, r4
 80018aa:	f7ff f929 	bl	8000b00 <__aeabi_uldivmod>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	60bb      	str	r3, [r7, #8]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018d2:	60bb      	str	r3, [r7, #8]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	68bb      	ldr	r3, [r7, #8]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	007a1200 	.word	0x007a1200

080018ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2103      	movs	r1, #3
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	61bb      	str	r3, [r7, #24]
  return result;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	431a      	orrs	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	605a      	str	r2, [r3, #4]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800197a:	b480      	push	{r7}
 800197c:	b089      	sub	sp, #36	; 0x24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	613b      	str	r3, [r7, #16]
  return result;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2103      	movs	r1, #3
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	61bb      	str	r3, [r7, #24]
  return result;
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80019cc:	bf00      	nop
 80019ce:	3724      	adds	r7, #36	; 0x24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	613b      	str	r3, [r7, #16]
  return result;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2103      	movs	r1, #3
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	61bb      	str	r3, [r7, #24]
  return result;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	60da      	str	r2, [r3, #12]
}
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b089      	sub	sp, #36	; 0x24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	613b      	str	r3, [r7, #16]
  return result;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	401a      	ands	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	61bb      	str	r3, [r7, #24]
  return result;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001a88:	bf00      	nop
 8001a8a:	3724      	adds	r7, #36	; 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	613b      	str	r3, [r7, #16]
  return result;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	210f      	movs	r1, #15
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	61bb      	str	r3, [r7, #24]
  return result;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001aea:	bf00      	nop
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	613b      	str	r3, [r7, #16]
  return result;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b20:	e049      	b.n	8001bb6 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2101      	movs	r1, #1
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03b      	beq.n	8001bb0 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fed3 	bl	80018ec <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d003      	beq.n	8001b56 <LL_GPIO_Init+0x60>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d106      	bne.n	8001b64 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	69b9      	ldr	r1, [r7, #24]
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff0b 	bl	800197a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff33 	bl	80019d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d11a      	bne.n	8001bb0 <LL_GPIO_Init+0xba>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	60bb      	str	r3, [r7, #8]
  return result;
 8001b86:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	d807      	bhi.n	8001ba2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	461a      	mov	r2, r3
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff4b 	bl	8001a36 <LL_GPIO_SetAFPin_0_7>
 8001ba0:	e006      	b.n	8001bb0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	69b9      	ldr	r1, [r7, #24]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff72 	bl	8001a94 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ae      	bne.n	8001b22 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d003      	beq.n	8001bd4 <LL_GPIO_Init+0xde>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d107      	bne.n	8001be4 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff feb3 	bl	800194a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <LL_RCC_GetSysClkSource+0x18>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <LL_RCC_GetAHBPrescaler+0x18>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <LL_RCC_PLL_GetMainSource+0x18>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <LL_RCC_PLL_GetN+0x18>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40023800 	.word	0x40023800

08001c98 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <LL_RCC_PLL_GetP+0x18>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <LL_RCC_PLL_GetDivider+0x18>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001cd8:	f000 f820 	bl	8001d1c <RCC_GetSystemClockFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f83e 	bl	8001d68 <RCC_GetHCLKClockFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f84c 	bl	8001d94 <RCC_GetPCLK1ClockFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f858 	bl	8001dbc <RCC_GetPCLK2ClockFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001d26:	f7ff ff63 	bl	8001bf0 <LL_RCC_GetSysClkSource>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d006      	beq.n	8001d3e <RCC_GetSystemClockFreq+0x22>
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d007      	beq.n	8001d44 <RCC_GetSystemClockFreq+0x28>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <RCC_GetSystemClockFreq+0x44>)
 8001d3a:	607b      	str	r3, [r7, #4]
      break;
 8001d3c:	e00a      	b.n	8001d54 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <RCC_GetSystemClockFreq+0x48>)
 8001d40:	607b      	str	r3, [r7, #4]
      break;
 8001d42:	e007      	b.n	8001d54 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001d44:	2008      	movs	r0, #8
 8001d46:	f000 f84d 	bl	8001de4 <RCC_PLL_GetFreqDomain_SYS>
 8001d4a:	6078      	str	r0, [r7, #4]
      break;
 8001d4c:	e002      	b.n	8001d54 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <RCC_GetSystemClockFreq+0x44>)
 8001d50:	607b      	str	r3, [r7, #4]
      break;
 8001d52:	bf00      	nop
  }

  return frequency;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d70:	f7ff ff4c 	bl	8001c0c <LL_RCC_GetAHBPrescaler>
 8001d74:	4603      	mov	r3, r0
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <RCC_GetHCLKClockFreq+0x28>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	40d3      	lsrs	r3, r2
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08005554 	.word	0x08005554

08001d94 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d9c:	f7ff ff44 	bl	8001c28 <LL_RCC_GetAPB1Prescaler>
 8001da0:	4603      	mov	r3, r0
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <RCC_GetPCLK1ClockFreq+0x24>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	40d3      	lsrs	r3, r2
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08005564 	.word	0x08005564

08001dbc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001dc4:	f7ff ff3e 	bl	8001c44 <LL_RCC_GetAPB2Prescaler>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	0b5b      	lsrs	r3, r3, #13
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <RCC_GetPCLK2ClockFreq+0x24>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	40d3      	lsrs	r3, r2
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	08005564 	.word	0x08005564

08001de4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001df8:	f7ff ff32 	bl	8001c60 <LL_RCC_PLL_GetMainSource>
 8001dfc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e08:	d003      	beq.n	8001e12 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001e0a:	e005      	b.n	8001e18 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001e0e:	617b      	str	r3, [r7, #20]
      break;
 8001e10:	e005      	b.n	8001e1e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001e14:	617b      	str	r3, [r7, #20]
      break;
 8001e16:	e002      	b.n	8001e1e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001e1a:	617b      	str	r3, [r7, #20]
      break;
 8001e1c:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d113      	bne.n	8001e4c <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001e24:	f7ff ff46 	bl	8001cb4 <LL_RCC_PLL_GetDivider>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fbb3 f4f2 	udiv	r4, r3, r2
 8001e30:	f7ff ff24 	bl	8001c7c <LL_RCC_PLL_GetN>
 8001e34:	4603      	mov	r3, r0
 8001e36:	fb03 f404 	mul.w	r4, r3, r4
 8001e3a:	f7ff ff2d 	bl	8001c98 <LL_RCC_PLL_GetP>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e4a:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001e4c:	693b      	ldr	r3, [r7, #16]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	615a      	str	r2, [r3, #20]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	; (800204c <LL_TIM_Init+0x108>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d013      	beq.n	8001f84 <LL_TIM_Init+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00f      	beq.n	8001f84 <LL_TIM_Init+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <LL_TIM_Init+0x10c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00b      	beq.n	8001f84 <LL_TIM_Init+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a39      	ldr	r2, [pc, #228]	; (8002054 <LL_TIM_Init+0x110>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <LL_TIM_Init+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a38      	ldr	r2, [pc, #224]	; (8002058 <LL_TIM_Init+0x114>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <LL_TIM_Init+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a37      	ldr	r2, [pc, #220]	; (800205c <LL_TIM_Init+0x118>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d106      	bne.n	8001f92 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2d      	ldr	r2, [pc, #180]	; (800204c <LL_TIM_Init+0x108>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d027      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <LL_TIM_Init+0x10c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d023      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a29      	ldr	r2, [pc, #164]	; (8002054 <LL_TIM_Init+0x110>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <LL_TIM_Init+0x114>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01b      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <LL_TIM_Init+0x118>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d017      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <LL_TIM_Init+0x11c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <LL_TIM_Init+0x120>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00f      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <LL_TIM_Init+0x124>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a23      	ldr	r2, [pc, #140]	; (800206c <LL_TIM_Init+0x128>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a22      	ldr	r2, [pc, #136]	; (8002070 <LL_TIM_Init+0x12c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <LL_TIM_Init+0xae>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a21      	ldr	r2, [pc, #132]	; (8002074 <LL_TIM_Init+0x130>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d106      	bne.n	8002000 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff35 	bl	8001e7c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff21 	bl	8001e60 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <LL_TIM_Init+0x108>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <LL_TIM_Init+0xea>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <LL_TIM_Init+0x118>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d105      	bne.n	800203a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	7c1b      	ldrb	r3, [r3, #16]
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff2f 	bl	8001e98 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff72 	bl	8001f24 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40010000 	.word	0x40010000
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800
 8002058:	40000c00 	.word	0x40000c00
 800205c:	40010400 	.word	0x40010400
 8002060:	40014000 	.word	0x40014000
 8002064:	40014400 	.word	0x40014400
 8002068:	40014800 	.word	0x40014800
 800206c:	40001800 	.word	0x40001800
 8002070:	40001c00 	.word	0x40001c00
 8002074:	40002000 	.word	0x40002000

08002078 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d012      	beq.n	80020b4 <LL_TIM_OC_Init+0x3c>
 800208e:	2b10      	cmp	r3, #16
 8002090:	d802      	bhi.n	8002098 <LL_TIM_OC_Init+0x20>
 8002092:	2b01      	cmp	r3, #1
 8002094:	d007      	beq.n	80020a6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002096:	e022      	b.n	80020de <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209c:	d011      	beq.n	80020c2 <LL_TIM_OC_Init+0x4a>
 800209e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a2:	d015      	beq.n	80020d0 <LL_TIM_OC_Init+0x58>
      break;
 80020a4:	e01b      	b.n	80020de <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f81d 	bl	80020e8 <OC1Config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	75fb      	strb	r3, [r7, #23]
      break;
 80020b2:	e014      	b.n	80020de <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f882 	bl	80021c0 <OC2Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	75fb      	strb	r3, [r7, #23]
      break;
 80020c0:	e00d      	b.n	80020de <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f8eb 	bl	80022a0 <OC3Config>
 80020ca:	4603      	mov	r3, r0
 80020cc:	75fb      	strb	r3, [r7, #23]
      break;
 80020ce:	e006      	b.n	80020de <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f954 	bl	8002380 <OC4Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	75fb      	strb	r3, [r7, #23]
      break;
 80020dc:	bf00      	nop
  }

  return result;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	f023 0201 	bic.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f023 0202 	bic.w	r2, r3, #2
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0201 	bic.w	r2, r3, #1
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <OC1Config+0xd0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <OC1Config+0x6a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <OC1Config+0xd4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d11e      	bne.n	8002190 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f023 0208 	bic.w	r2, r3, #8
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f023 0204 	bic.w	r2, r3, #4
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fe86 	bl	8001eb4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40010400 	.word	0x40010400

080021c0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f023 0210 	bic.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f023 0220 	bic.w	r2, r3, #32
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f023 0210 	bic.w	r2, r3, #16
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <OC2Config+0xd8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <OC2Config+0x70>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a1c      	ldr	r2, [pc, #112]	; (800229c <OC2Config+0xdc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d11f      	bne.n	8002270 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	019b      	lsls	r3, r3, #6
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	019b      	lsls	r3, r3, #6
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fe24 	bl	8001ed0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40010000 	.word	0x40010000
 800229c:	40010400 	.word	0x40010400

080022a0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <OC3Config+0xd8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <OC3Config+0x6e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1c      	ldr	r2, [pc, #112]	; (800237c <OC3Config+0xdc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11f      	bne.n	800234e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	015b      	lsls	r3, r3, #5
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fdc3 	bl	8001eec <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	40010400 	.word	0x40010400

08002380 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	031b      	lsls	r3, r3, #12
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	031b      	lsls	r3, r3, #12
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <OC4Config+0xa8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d003      	beq.n	80023f0 <OC4Config+0x70>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <OC4Config+0xac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d107      	bne.n	8002400 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	019b      	lsls	r3, r3, #6
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd78 	bl	8001f08 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010000 	.word	0x40010000
 800242c:	40010400 	.word	0x40010400

08002430 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	615a      	str	r2, [r3, #20]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b8:	d152      	bne.n	8002560 <LL_USART_SetBaudRate+0xbc>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	009a      	lsls	r2, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4a4f      	ldr	r2, [pc, #316]	; (800260c <LL_USART_SetBaudRate+0x168>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	b299      	uxth	r1, r3
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009a      	lsls	r2, r3, #2
 80024e6:	441a      	add	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <LL_USART_SetBaudRate+0x168>)
 80024f2:	fba3 0302 	umull	r0, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a41      	ldr	r2, [pc, #260]	; (800260c <LL_USART_SetBaudRate+0x168>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	b29b      	uxth	r3, r3
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	b29b      	uxth	r3, r3
 8002512:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002516:	b29b      	uxth	r3, r3
 8002518:	440b      	add	r3, r1
 800251a:	b299      	uxth	r1, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <LL_USART_SetBaudRate+0x168>)
 8002532:	fba3 0302 	umull	r0, r3, r3, r2
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2064      	movs	r0, #100	; 0x64
 800253a:	fb00 f303 	mul.w	r3, r0, r3
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	3332      	adds	r3, #50	; 0x32
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <LL_USART_SetBaudRate+0x168>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	b29b      	uxth	r3, r3
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	b29b      	uxth	r3, r3
 8002554:	440b      	add	r3, r1
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800255e:	e04f      	b.n	8002600 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	441a      	add	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <LL_USART_SetBaudRate+0x168>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	b29b      	uxth	r3, r3
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	b299      	uxth	r1, r3
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009a      	lsls	r2, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	fbb2 f2f3 	udiv	r2, r2, r3
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <LL_USART_SetBaudRate+0x168>)
 8002598:	fba3 0302 	umull	r0, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2064      	movs	r0, #100	; 0x64
 80025a0:	fb00 f303 	mul.w	r3, r0, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	3332      	adds	r3, #50	; 0x32
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <LL_USART_SetBaudRate+0x168>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	440b      	add	r3, r1
 80025bc:	b299      	uxth	r1, r3
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009a      	lsls	r2, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <LL_USART_SetBaudRate+0x168>)
 80025d4:	fba3 0302 	umull	r0, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	2064      	movs	r0, #100	; 0x64
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	3332      	adds	r3, #50	; 0x32
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <LL_USART_SetBaudRate+0x168>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	440b      	add	r3, r1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	51eb851f 	.word	0x51eb851f

08002610 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff04 	bl	8002430 <LL_USART_IsEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d15e      	bne.n	80026ec <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002636:	f023 030c 	bic.w	r3, r3, #12
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	6851      	ldr	r1, [r2, #4]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	4311      	orrs	r1, r2
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	6912      	ldr	r2, [r2, #16]
 8002648:	4311      	orrs	r1, r2
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	6992      	ldr	r2, [r2, #24]
 800264e:	430a      	orrs	r2, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fefb 	bl	8002458 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff08 	bl	800247e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fb2c 	bl	8001cd0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <LL_USART_Init+0xe8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d102      	bne.n	8002686 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	e021      	b.n	80026ca <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <LL_USART_Init+0xec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d102      	bne.n	8002694 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	e01a      	b.n	80026ca <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <LL_USART_Init+0xf0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e013      	b.n	80026ca <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <LL_USART_Init+0xf4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d102      	bne.n	80026b0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	e00c      	b.n	80026ca <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <LL_USART_Init+0xf8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d102      	bne.n	80026be <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e005      	b.n	80026ca <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <LL_USART_Init+0xfc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80026d8:	2300      	movs	r3, #0
 80026da:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fedc 	bl	80024a4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80026ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40004400 	.word	0x40004400
 8002700:	40004800 	.word	0x40004800
 8002704:	40011400 	.word	0x40011400
 8002708:	40004c00 	.word	0x40004c00
 800270c:	40005000 	.word	0x40005000

08002710 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40023800 	.word	0x40023800

08002760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002766:	463b      	mov	r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002776:	2080      	movs	r0, #128	; 0x80
 8002778:	f7ff ffda 	bl	8002730 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800277c:	2004      	movs	r0, #4
 800277e:	f7ff ffd7 	bl	8002730 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002782:	2002      	movs	r0, #2
 8002784:	f7ff ffd4 	bl	8002730 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 8002788:	2107      	movs	r1, #7
 800278a:	480b      	ldr	r0, [pc, #44]	; (80027b8 <MX_GPIO_Init+0x58>)
 800278c:	f7ff ffc0 	bl	8002710 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8002790:	2307      	movs	r3, #7
 8002792:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002794:	2301      	movs	r3, #1
 8002796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4803      	ldr	r0, [pc, #12]	; (80027b8 <MX_GPIO_Init+0x58>)
 80027aa:	f7ff f9a4 	bl	8001af6 <LL_GPIO_Init>

}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40020800 	.word	0x40020800

080027bc <LL_TIM_EnableCounter>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	601a      	str	r2, [r3, #0]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_TIM_CC_EnableChannel>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_TIM_CC_DisableChannel>:
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	43db      	mvns	r3, r3
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++) {
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00d      	b.n	800288e <_write+0x2e>
		LL_USART_TransmitData8(USART6, ptr[i]);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <_write+0x40>)
 800287e:	f7ff ffe0 	bl	8002842 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8002882:	2001      	movs	r0, #1
 8002884:	f7fe fb2e 	bl	8000ee4 <HAL_Delay>
	for(int i=0; i<len; i++) {
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	dbed      	blt.n	8002872 <_write+0x12>
	}
	return len;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40011400 	.word	0x40011400

080028a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a8:	f7fe faaa 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ac:	f000 f836 	bl	800291c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028b0:	f7ff ff56 	bl	8002760 <MX_GPIO_Init>
  MX_TIM3_Init();
 80028b4:	f000 fb0c 	bl	8002ed0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80028b8:	f000 fc5c 	bl	8003174 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80028bc:	4814      	ldr	r0, [pc, #80]	; (8002910 <main+0x6c>)
 80028be:	f7ff ff7d 	bl	80027bc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80028c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028c6:	4812      	ldr	r0, [pc, #72]	; (8002910 <main+0x6c>)
 80028c8:	f7ff ff88 	bl	80027dc <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <main+0x6c>)
 80028ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80028d4:	2064      	movs	r0, #100	; 0x64
 80028d6:	f7fe fb05 	bl	8000ee4 <HAL_Delay>
  TIM3->PSC = 1500;
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <main+0x6c>)
 80028dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80028e2:	2064      	movs	r0, #100	; 0x64
 80028e4:	f7fe fafe 	bl	8000ee4 <HAL_Delay>
  TIM3->PSC = 1000;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <main+0x6c>)
 80028ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	f7fe faf7 	bl	8000ee4 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80028f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <main+0x6c>)
 80028fc:	f7ff ff7f 	bl	80027fe <LL_TIM_CC_DisableChannel>
  LL_USART_EnableIT_RXNE(USART6);
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <main+0x70>)
 8002902:	f7ff ff8e 	bl	8002822 <LL_USART_EnableIT_RXNE>
//		  case '2':
//			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
//			  break;
//		  }
//	  }
	  printf("hello world\n");
 8002906:	4804      	ldr	r0, [pc, #16]	; (8002918 <main+0x74>)
 8002908:	f001 f896 	bl	8003a38 <puts>
 800290c:	e7fb      	b.n	8002906 <main+0x62>
 800290e:	bf00      	nop
 8002910:	40000400 	.word	0x40000400
 8002914:	40011400 	.word	0x40011400
 8002918:	08005548 	.word	0x08005548

0800291c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b094      	sub	sp, #80	; 0x50
 8002920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002922:	f107 0320 	add.w	r3, r7, #32
 8002926:	2230      	movs	r2, #48	; 0x30
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fcd6 	bl	80032dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <SystemClock_Config+0xcc>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <SystemClock_Config+0xcc>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	6413      	str	r3, [r2, #64]	; 0x40
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <SystemClock_Config+0xcc>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <SystemClock_Config+0xd0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a21      	ldr	r2, [pc, #132]	; (80029ec <SystemClock_Config+0xd0>)
 8002966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <SystemClock_Config+0xd0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002978:	2301      	movs	r3, #1
 800297a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800297c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002982:	2302      	movs	r3, #2
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800298c:	2304      	movs	r3, #4
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002990:	23a8      	movs	r3, #168	; 0xa8
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002994:	2302      	movs	r3, #2
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002998:	2304      	movs	r3, #4
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299c:	f107 0320 	add.w	r3, r7, #32
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fba7 	bl	80010f4 <HAL_RCC_OscConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029ac:	f000 f820 	bl	80029f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b0:	230f      	movs	r3, #15
 80029b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b4:	2302      	movs	r3, #2
 80029b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2105      	movs	r1, #5
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fdd2 	bl	8001578 <HAL_RCC_ClockConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029da:	f000 f809 	bl	80029f0 <Error_Handler>
  }
}
 80029de:	bf00      	nop
 80029e0:	3750      	adds	r7, #80	; 0x50
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40007000 	.word	0x40007000

080029f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_MspInit+0x4c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <HAL_MspInit+0x4c>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_MspInit+0x4c>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_MspInit+0x4c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_MspInit+0x4c>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_MspInit+0x4c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <LL_USART_IsActiveFlag_RXNE>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_USART_ClearFlag_RXNE>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f06f 0220 	mvn.w	r2, #32
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_USART_ReceiveData8>:
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b2db      	uxtb	r3, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_USART_TransmitData8>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	605a      	str	r2, [r3, #4]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <HardFault_Handler+0x4>

08002ade <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <MemManage_Handler+0x4>

08002ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <BusFault_Handler+0x4>

08002aea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <UsageFault_Handler+0x4>

08002af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1e:	f7fe f9c1 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <USART6_IRQHandler+0x3c>)
 8002b2e:	f7ff ff8f 	bl	8002a50 <LL_USART_IsActiveFlag_RXNE>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <USART6_IRQHandler+0x36>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8002b38:	480a      	ldr	r0, [pc, #40]	; (8002b64 <USART6_IRQHandler+0x3c>)
 8002b3a:	f7ff ff9c 	bl	8002a76 <LL_USART_ClearFlag_RXNE>
		usart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002b3e:	4809      	ldr	r0, [pc, #36]	; (8002b64 <USART6_IRQHandler+0x3c>)
 8002b40:	f7ff ffa7 	bl	8002a92 <LL_USART_ReceiveData8>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <USART6_IRQHandler+0x40>)
 8002b4a:	701a      	strb	r2, [r3, #0]
		LL_USART_TransmitData8(USART6, usart6_rx_data);
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <USART6_IRQHandler+0x40>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4804      	ldr	r0, [pc, #16]	; (8002b64 <USART6_IRQHandler+0x3c>)
 8002b54:	f7ff ffaa 	bl	8002aac <LL_USART_TransmitData8>
		usart6_rx_flag = 1;
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <USART6_IRQHandler+0x44>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40011400 	.word	0x40011400
 8002b68:	20000208 	.word	0x20000208
 8002b6c:	20000209 	.word	0x20000209

08002b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e00a      	b.n	8002b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b82:	f3af 8000 	nop.w
 8002b86:	4601      	mov	r1, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	b2ca      	uxtb	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbf0      	blt.n	8002b82 <_read+0x12>
	}

return len;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_close>:
	}
	return len;
}

int _close(int file)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_isatty>:

int _isatty(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <_sbrk+0x50>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <_sbrk+0x16>
		heap_end = &end;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <_sbrk+0x50>)
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <_sbrk+0x54>)
 8002c28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <_sbrk+0x50>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <_sbrk+0x50>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	466a      	mov	r2, sp
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d907      	bls.n	8002c4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c3e:	f000 fb23 	bl	8003288 <__errno>
 8002c42:	4602      	mov	r2, r0
 8002c44:	230c      	movs	r3, #12
 8002c46:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	e006      	b.n	8002c5c <_sbrk+0x48>
	}

	heap_end += incr;
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <_sbrk+0x50>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <_sbrk+0x50>)
 8002c58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200001f8 	.word	0x200001f8
 8002c68:	20000210 	.word	0x20000210

08002c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <SystemInit+0x60>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <SystemInit+0x60>)
 8002c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <SystemInit+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <SystemInit+0x64>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <SystemInit+0x64>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <SystemInit+0x64>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <SystemInit+0x64>)
 8002c98:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <SystemInit+0x64>)
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <SystemInit+0x68>)
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <SystemInit+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <SystemInit+0x64>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <SystemInit+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SystemInit+0x60>)
 8002cbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cc0:	609a      	str	r2, [r3, #8]
#endif
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	24003010 	.word	0x24003010

08002cd8 <LL_TIM_EnableARRPreload>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_TIM_OC_EnableFast>:
{
 8002cf8:	b4b0      	push	{r4, r5, r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d01c      	beq.n	8002d42 <LL_TIM_OC_EnableFast+0x4a>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d017      	beq.n	8002d3e <LL_TIM_OC_EnableFast+0x46>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d012      	beq.n	8002d3a <LL_TIM_OC_EnableFast+0x42>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d00d      	beq.n	8002d36 <LL_TIM_OC_EnableFast+0x3e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d007      	beq.n	8002d32 <LL_TIM_OC_EnableFast+0x3a>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d101      	bne.n	8002d2e <LL_TIM_OC_EnableFast+0x36>
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e00a      	b.n	8002d44 <LL_TIM_OC_EnableFast+0x4c>
 8002d2e:	2306      	movs	r3, #6
 8002d30:	e008      	b.n	8002d44 <LL_TIM_OC_EnableFast+0x4c>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e006      	b.n	8002d44 <LL_TIM_OC_EnableFast+0x4c>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e004      	b.n	8002d44 <LL_TIM_OC_EnableFast+0x4c>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e002      	b.n	8002d44 <LL_TIM_OC_EnableFast+0x4c>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_TIM_OC_EnableFast+0x4c>
 8002d42:	2300      	movs	r3, #0
 8002d44:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3318      	adds	r3, #24
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <LL_TIM_OC_EnableFast+0x7c>)
 8002d50:	5c5b      	ldrb	r3, [r3, r1]
 8002d52:	4413      	add	r3, r2
 8002d54:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <LL_TIM_OC_EnableFast+0x80>)
 8002d5c:	5c5b      	ldrb	r3, [r3, r1]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	2304      	movs	r3, #4
 8002d62:	408b      	lsls	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	6023      	str	r3, [r4, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bcb0      	pop	{r4, r5, r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0800556c 	.word	0x0800556c
 8002d78:	08005574 	.word	0x08005574

08002d7c <LL_TIM_OC_EnablePreload>:
{
 8002d7c:	b4b0      	push	{r4, r5, r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d01c      	beq.n	8002dc6 <LL_TIM_OC_EnablePreload+0x4a>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d017      	beq.n	8002dc2 <LL_TIM_OC_EnablePreload+0x46>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d012      	beq.n	8002dbe <LL_TIM_OC_EnablePreload+0x42>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d00d      	beq.n	8002dba <LL_TIM_OC_EnablePreload+0x3e>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da4:	d007      	beq.n	8002db6 <LL_TIM_OC_EnablePreload+0x3a>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d101      	bne.n	8002db2 <LL_TIM_OC_EnablePreload+0x36>
 8002dae:	2305      	movs	r3, #5
 8002db0:	e00a      	b.n	8002dc8 <LL_TIM_OC_EnablePreload+0x4c>
 8002db2:	2306      	movs	r3, #6
 8002db4:	e008      	b.n	8002dc8 <LL_TIM_OC_EnablePreload+0x4c>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <LL_TIM_OC_EnablePreload+0x4c>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <LL_TIM_OC_EnablePreload+0x4c>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <LL_TIM_OC_EnablePreload+0x4c>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_TIM_OC_EnablePreload+0x4c>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3318      	adds	r3, #24
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <LL_TIM_OC_EnablePreload+0x7c>)
 8002dd4:	5c5b      	ldrb	r3, [r3, r1]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	4629      	mov	r1, r5
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <LL_TIM_OC_EnablePreload+0x80>)
 8002de0:	5c5b      	ldrb	r3, [r3, r1]
 8002de2:	4619      	mov	r1, r3
 8002de4:	2308      	movs	r3, #8
 8002de6:	408b      	lsls	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	6023      	str	r3, [r4, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bcb0      	pop	{r4, r5, r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	0800556c 	.word	0x0800556c
 8002dfc:	08005574 	.word	0x08005574

08002e00 <LL_TIM_SetClockSource>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e12:	f023 0307 	bic.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_TIM_SetTriggerOutput>:
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	605a      	str	r2, [r3, #4]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_TIM_DisableMasterSlaveMode>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_AHB1_GRP1_EnableClock>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40023800 	.word	0x40023800

08002ea0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b094      	sub	sp, #80	; 0x50
 8002ed4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ed6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002ee6:	f107 031c 	add.w	r3, r7, #28
 8002eea:	2220      	movs	r2, #32
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f9f4 	bl	80032dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002f04:	2002      	movs	r0, #2
 8002f06:	f7ff ffcb 	bl	8002ea0 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 8002f0a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002f0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002f10:	2300      	movs	r3, #0
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8002f14:	2314      	movs	r3, #20
 8002f16:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002f1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f20:	4619      	mov	r1, r3
 8002f22:	4822      	ldr	r0, [pc, #136]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f24:	f7ff f80e 	bl	8001f44 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002f28:	4820      	ldr	r0, [pc, #128]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f2a:	f7ff fed5 	bl	8002cd8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002f2e:	2100      	movs	r1, #0
 8002f30:	481e      	ldr	r0, [pc, #120]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f32:	f7ff ff65 	bl	8002e00 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f3a:	481c      	ldr	r0, [pc, #112]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f3c:	f7ff ff1e 	bl	8002d7c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002f40:	2360      	movs	r3, #96	; 0x60
 8002f42:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002f4c:	230a      	movs	r3, #10
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f5e:	4813      	ldr	r0, [pc, #76]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f60:	f7ff f88a 	bl	8002078 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f68:	4810      	ldr	r0, [pc, #64]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f6a:	f7ff fec5 	bl	8002cf8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	480e      	ldr	r0, [pc, #56]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f72:	f7ff ff5a 	bl	8002e2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002f76:	480d      	ldr	r0, [pc, #52]	; (8002fac <MX_TIM3_Init+0xdc>)
 8002f78:	f7ff ff6a 	bl	8002e50 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f7ff ff77 	bl	8002e70 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002f82:	2302      	movs	r3, #2
 8002f84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f86:	2302      	movs	r3, #2
 8002f88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002f96:	2302      	movs	r3, #2
 8002f98:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <MX_TIM3_Init+0xe0>)
 8002fa0:	f7fe fda9 	bl	8001af6 <LL_GPIO_Init>

}
 8002fa4:	bf00      	nop
 8002fa6:	3750      	adds	r7, #80	; 0x50
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40020400 	.word	0x40020400

08002fb4 <__NVIC_GetPriorityGrouping>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	; (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_SetPriority>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	; (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	; (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	4313      	orrs	r3, r2
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	; 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_USART_Enable>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_USART_ConfigAsyncMode>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	615a      	str	r2, [r3, #20]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <LL_AHB1_GRP1_EnableClock>:
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800311e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003120:	4907      	ldr	r1, [pc, #28]	; (8003140 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4313      	orrs	r3, r2
 8003126:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800312a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40023800 	.word	0x40023800

08003144 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <LL_APB2_GRP1_EnableClock+0x2c>)
 800314e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4313      	orrs	r3, r2
 8003156:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <LL_APB2_GRP1_EnableClock+0x2c>)
 800315a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4013      	ands	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003162:	68fb      	ldr	r3, [r7, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40023800 	.word	0x40023800

08003174 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08e      	sub	sp, #56	; 0x38
 8003178:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	611a      	str	r2, [r3, #16]
 800318a:	615a      	str	r2, [r3, #20]
 800318c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
 800319c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800319e:	2020      	movs	r0, #32
 80031a0:	f7ff ffd0 	bl	8003144 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80031a4:	2004      	movs	r0, #4
 80031a6:	f7ff ffb5 	bl	8003114 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80031aa:	23c0      	movs	r3, #192	; 0xc0
 80031ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031ae:	2302      	movs	r3, #2
 80031b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80031be:	2308      	movs	r3, #8
 80031c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4819      	ldr	r0, [pc, #100]	; (800322c <MX_USART6_UART_Init+0xb8>)
 80031c8:	f7fe fc95 	bl	8001af6 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80031cc:	f7ff fef2 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff42 	bl	8003060 <NVIC_EncodePriority>
 80031dc:	4603      	mov	r3, r0
 80031de:	4619      	mov	r1, r3
 80031e0:	2047      	movs	r0, #71	; 0x47
 80031e2:	f7ff ff13 	bl	800300c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80031e6:	2047      	movs	r0, #71	; 0x47
 80031e8:	f7ff fef2 	bl	8002fd0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 921600;
 80031ec:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80031f0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80031fe:	230c      	movs	r3, #12
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003202:	2300      	movs	r3, #0
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	4807      	ldr	r0, [pc, #28]	; (8003230 <MX_USART6_UART_Init+0xbc>)
 8003212:	f7ff f9fd 	bl	8002610 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <MX_USART6_UART_Init+0xbc>)
 8003218:	f7ff ff65 	bl	80030e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800321c:	4804      	ldr	r0, [pc, #16]	; (8003230 <MX_USART6_UART_Init+0xbc>)
 800321e:	f7ff ff52 	bl	80030c6 <LL_USART_Enable>

}
 8003222:	bf00      	nop
 8003224:	3738      	adds	r7, #56	; 0x38
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40020800 	.word	0x40020800
 8003230:	40011400 	.word	0x40011400

08003234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800326c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800323a:	e003      	b.n	8003244 <LoopCopyDataInit>

0800323c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800323e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003242:	3104      	adds	r1, #4

08003244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003244:	480b      	ldr	r0, [pc, #44]	; (8003274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800324a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800324c:	d3f6      	bcc.n	800323c <CopyDataInit>
  ldr  r2, =_sbss
 800324e:	4a0b      	ldr	r2, [pc, #44]	; (800327c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003250:	e002      	b.n	8003258 <LoopFillZerobss>

08003252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003254:	f842 3b04 	str.w	r3, [r2], #4

08003258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800325a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800325c:	d3f9      	bcc.n	8003252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800325e:	f7ff fd05 	bl	8002c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003262:	f000 f817 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003266:	f7ff fb1d 	bl	80028a4 <main>
  bx  lr    
 800326a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800326c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003270:	08005818 	.word	0x08005818
  ldr  r0, =_sdata
 8003274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003278:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800327c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003280:	20000210 	.word	0x20000210

08003284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003284:	e7fe      	b.n	8003284 <ADC_IRQHandler>
	...

08003288 <__errno>:
 8003288:	4b01      	ldr	r3, [pc, #4]	; (8003290 <__errno+0x8>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4e0d      	ldr	r6, [pc, #52]	; (80032cc <__libc_init_array+0x38>)
 8003298:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329a:	1ba4      	subs	r4, r4, r6
 800329c:	10a4      	asrs	r4, r4, #2
 800329e:	2500      	movs	r5, #0
 80032a0:	42a5      	cmp	r5, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	4e0b      	ldr	r6, [pc, #44]	; (80032d4 <__libc_init_array+0x40>)
 80032a6:	4c0c      	ldr	r4, [pc, #48]	; (80032d8 <__libc_init_array+0x44>)
 80032a8:	f002 f940 	bl	800552c <_init>
 80032ac:	1ba4      	subs	r4, r4, r6
 80032ae:	10a4      	asrs	r4, r4, #2
 80032b0:	2500      	movs	r5, #0
 80032b2:	42a5      	cmp	r5, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032bc:	4798      	blx	r3
 80032be:	3501      	adds	r5, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032c6:	4798      	blx	r3
 80032c8:	3501      	adds	r5, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	08005810 	.word	0x08005810
 80032d0:	08005810 	.word	0x08005810
 80032d4:	08005810 	.word	0x08005810
 80032d8:	08005814 	.word	0x08005814

080032dc <memset>:
 80032dc:	4402      	add	r2, r0
 80032de:	4603      	mov	r3, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <__cvt>:
 80032ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	ec55 4b10 	vmov	r4, r5, d0
 80032f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80032f6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	460e      	mov	r6, r1
 80032fe:	4691      	mov	r9, r2
 8003300:	4619      	mov	r1, r3
 8003302:	bfb8      	it	lt
 8003304:	4622      	movlt	r2, r4
 8003306:	462b      	mov	r3, r5
 8003308:	f027 0720 	bic.w	r7, r7, #32
 800330c:	bfbb      	ittet	lt
 800330e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003312:	461d      	movlt	r5, r3
 8003314:	2300      	movge	r3, #0
 8003316:	232d      	movlt	r3, #45	; 0x2d
 8003318:	bfb8      	it	lt
 800331a:	4614      	movlt	r4, r2
 800331c:	2f46      	cmp	r7, #70	; 0x46
 800331e:	700b      	strb	r3, [r1, #0]
 8003320:	d004      	beq.n	800332c <__cvt+0x40>
 8003322:	2f45      	cmp	r7, #69	; 0x45
 8003324:	d100      	bne.n	8003328 <__cvt+0x3c>
 8003326:	3601      	adds	r6, #1
 8003328:	2102      	movs	r1, #2
 800332a:	e000      	b.n	800332e <__cvt+0x42>
 800332c:	2103      	movs	r1, #3
 800332e:	ab03      	add	r3, sp, #12
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	ab02      	add	r3, sp, #8
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4632      	mov	r2, r6
 8003338:	4653      	mov	r3, sl
 800333a:	ec45 4b10 	vmov	d0, r4, r5
 800333e:	f000 fccf 	bl	8003ce0 <_dtoa_r>
 8003342:	2f47      	cmp	r7, #71	; 0x47
 8003344:	4680      	mov	r8, r0
 8003346:	d102      	bne.n	800334e <__cvt+0x62>
 8003348:	f019 0f01 	tst.w	r9, #1
 800334c:	d026      	beq.n	800339c <__cvt+0xb0>
 800334e:	2f46      	cmp	r7, #70	; 0x46
 8003350:	eb08 0906 	add.w	r9, r8, r6
 8003354:	d111      	bne.n	800337a <__cvt+0x8e>
 8003356:	f898 3000 	ldrb.w	r3, [r8]
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d10a      	bne.n	8003374 <__cvt+0x88>
 800335e:	2200      	movs	r2, #0
 8003360:	2300      	movs	r3, #0
 8003362:	4620      	mov	r0, r4
 8003364:	4629      	mov	r1, r5
 8003366:	f7fd fb5b 	bl	8000a20 <__aeabi_dcmpeq>
 800336a:	b918      	cbnz	r0, 8003374 <__cvt+0x88>
 800336c:	f1c6 0601 	rsb	r6, r6, #1
 8003370:	f8ca 6000 	str.w	r6, [sl]
 8003374:	f8da 3000 	ldr.w	r3, [sl]
 8003378:	4499      	add	r9, r3
 800337a:	2200      	movs	r2, #0
 800337c:	2300      	movs	r3, #0
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f7fd fb4d 	bl	8000a20 <__aeabi_dcmpeq>
 8003386:	b938      	cbnz	r0, 8003398 <__cvt+0xac>
 8003388:	2230      	movs	r2, #48	; 0x30
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	454b      	cmp	r3, r9
 800338e:	d205      	bcs.n	800339c <__cvt+0xb0>
 8003390:	1c59      	adds	r1, r3, #1
 8003392:	9103      	str	r1, [sp, #12]
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e7f8      	b.n	800338a <__cvt+0x9e>
 8003398:	f8cd 900c 	str.w	r9, [sp, #12]
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033a0:	eba3 0308 	sub.w	r3, r3, r8
 80033a4:	4640      	mov	r0, r8
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	b004      	add	sp, #16
 80033aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080033ae <__exponent>:
 80033ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b0:	2900      	cmp	r1, #0
 80033b2:	4604      	mov	r4, r0
 80033b4:	bfba      	itte	lt
 80033b6:	4249      	neglt	r1, r1
 80033b8:	232d      	movlt	r3, #45	; 0x2d
 80033ba:	232b      	movge	r3, #43	; 0x2b
 80033bc:	2909      	cmp	r1, #9
 80033be:	f804 2b02 	strb.w	r2, [r4], #2
 80033c2:	7043      	strb	r3, [r0, #1]
 80033c4:	dd20      	ble.n	8003408 <__exponent+0x5a>
 80033c6:	f10d 0307 	add.w	r3, sp, #7
 80033ca:	461f      	mov	r7, r3
 80033cc:	260a      	movs	r6, #10
 80033ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80033d2:	fb06 1115 	mls	r1, r6, r5, r1
 80033d6:	3130      	adds	r1, #48	; 0x30
 80033d8:	2d09      	cmp	r5, #9
 80033da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80033de:	f103 32ff 	add.w	r2, r3, #4294967295
 80033e2:	4629      	mov	r1, r5
 80033e4:	dc09      	bgt.n	80033fa <__exponent+0x4c>
 80033e6:	3130      	adds	r1, #48	; 0x30
 80033e8:	3b02      	subs	r3, #2
 80033ea:	f802 1c01 	strb.w	r1, [r2, #-1]
 80033ee:	42bb      	cmp	r3, r7
 80033f0:	4622      	mov	r2, r4
 80033f2:	d304      	bcc.n	80033fe <__exponent+0x50>
 80033f4:	1a10      	subs	r0, r2, r0
 80033f6:	b003      	add	sp, #12
 80033f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fa:	4613      	mov	r3, r2
 80033fc:	e7e7      	b.n	80033ce <__exponent+0x20>
 80033fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003402:	f804 2b01 	strb.w	r2, [r4], #1
 8003406:	e7f2      	b.n	80033ee <__exponent+0x40>
 8003408:	2330      	movs	r3, #48	; 0x30
 800340a:	4419      	add	r1, r3
 800340c:	7083      	strb	r3, [r0, #2]
 800340e:	1d02      	adds	r2, r0, #4
 8003410:	70c1      	strb	r1, [r0, #3]
 8003412:	e7ef      	b.n	80033f4 <__exponent+0x46>

08003414 <_printf_float>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b08d      	sub	sp, #52	; 0x34
 800341a:	460c      	mov	r4, r1
 800341c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003420:	4616      	mov	r6, r2
 8003422:	461f      	mov	r7, r3
 8003424:	4605      	mov	r5, r0
 8003426:	f001 fb8d 	bl	8004b44 <_localeconv_r>
 800342a:	6803      	ldr	r3, [r0, #0]
 800342c:	9304      	str	r3, [sp, #16]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fc feca 	bl	80001c8 <strlen>
 8003434:	2300      	movs	r3, #0
 8003436:	930a      	str	r3, [sp, #40]	; 0x28
 8003438:	f8d8 3000 	ldr.w	r3, [r8]
 800343c:	9005      	str	r0, [sp, #20]
 800343e:	3307      	adds	r3, #7
 8003440:	f023 0307 	bic.w	r3, r3, #7
 8003444:	f103 0208 	add.w	r2, r3, #8
 8003448:	f894 a018 	ldrb.w	sl, [r4, #24]
 800344c:	f8d4 b000 	ldr.w	fp, [r4]
 8003450:	f8c8 2000 	str.w	r2, [r8]
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800345c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003460:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003464:	9307      	str	r3, [sp, #28]
 8003466:	f8cd 8018 	str.w	r8, [sp, #24]
 800346a:	f04f 32ff 	mov.w	r2, #4294967295
 800346e:	4ba7      	ldr	r3, [pc, #668]	; (800370c <_printf_float+0x2f8>)
 8003470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003474:	f7fd fb06 	bl	8000a84 <__aeabi_dcmpun>
 8003478:	bb70      	cbnz	r0, 80034d8 <_printf_float+0xc4>
 800347a:	f04f 32ff 	mov.w	r2, #4294967295
 800347e:	4ba3      	ldr	r3, [pc, #652]	; (800370c <_printf_float+0x2f8>)
 8003480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003484:	f7fd fae0 	bl	8000a48 <__aeabi_dcmple>
 8003488:	bb30      	cbnz	r0, 80034d8 <_printf_float+0xc4>
 800348a:	2200      	movs	r2, #0
 800348c:	2300      	movs	r3, #0
 800348e:	4640      	mov	r0, r8
 8003490:	4649      	mov	r1, r9
 8003492:	f7fd facf 	bl	8000a34 <__aeabi_dcmplt>
 8003496:	b110      	cbz	r0, 800349e <_printf_float+0x8a>
 8003498:	232d      	movs	r3, #45	; 0x2d
 800349a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800349e:	4a9c      	ldr	r2, [pc, #624]	; (8003710 <_printf_float+0x2fc>)
 80034a0:	4b9c      	ldr	r3, [pc, #624]	; (8003714 <_printf_float+0x300>)
 80034a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80034a6:	bf8c      	ite	hi
 80034a8:	4690      	movhi	r8, r2
 80034aa:	4698      	movls	r8, r3
 80034ac:	2303      	movs	r3, #3
 80034ae:	f02b 0204 	bic.w	r2, fp, #4
 80034b2:	6123      	str	r3, [r4, #16]
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	f04f 0900 	mov.w	r9, #0
 80034ba:	9700      	str	r7, [sp, #0]
 80034bc:	4633      	mov	r3, r6
 80034be:	aa0b      	add	r2, sp, #44	; 0x2c
 80034c0:	4621      	mov	r1, r4
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 f9e6 	bl	8003894 <_printf_common>
 80034c8:	3001      	adds	r0, #1
 80034ca:	f040 808d 	bne.w	80035e8 <_printf_float+0x1d4>
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	b00d      	add	sp, #52	; 0x34
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	4640      	mov	r0, r8
 80034de:	4649      	mov	r1, r9
 80034e0:	f7fd fad0 	bl	8000a84 <__aeabi_dcmpun>
 80034e4:	b110      	cbz	r0, 80034ec <_printf_float+0xd8>
 80034e6:	4a8c      	ldr	r2, [pc, #560]	; (8003718 <_printf_float+0x304>)
 80034e8:	4b8c      	ldr	r3, [pc, #560]	; (800371c <_printf_float+0x308>)
 80034ea:	e7da      	b.n	80034a2 <_printf_float+0x8e>
 80034ec:	6861      	ldr	r1, [r4, #4]
 80034ee:	1c4b      	adds	r3, r1, #1
 80034f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80034f4:	a80a      	add	r0, sp, #40	; 0x28
 80034f6:	d13e      	bne.n	8003576 <_printf_float+0x162>
 80034f8:	2306      	movs	r3, #6
 80034fa:	6063      	str	r3, [r4, #4]
 80034fc:	2300      	movs	r3, #0
 80034fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003502:	ab09      	add	r3, sp, #36	; 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	ec49 8b10 	vmov	d0, r8, r9
 800350a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	f8cd a004 	str.w	sl, [sp, #4]
 8003514:	6861      	ldr	r1, [r4, #4]
 8003516:	4628      	mov	r0, r5
 8003518:	f7ff fee8 	bl	80032ec <__cvt>
 800351c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003520:	2b47      	cmp	r3, #71	; 0x47
 8003522:	4680      	mov	r8, r0
 8003524:	d109      	bne.n	800353a <_printf_float+0x126>
 8003526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003528:	1cd8      	adds	r0, r3, #3
 800352a:	db02      	blt.n	8003532 <_printf_float+0x11e>
 800352c:	6862      	ldr	r2, [r4, #4]
 800352e:	4293      	cmp	r3, r2
 8003530:	dd47      	ble.n	80035c2 <_printf_float+0x1ae>
 8003532:	f1aa 0a02 	sub.w	sl, sl, #2
 8003536:	fa5f fa8a 	uxtb.w	sl, sl
 800353a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800353e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003540:	d824      	bhi.n	800358c <_printf_float+0x178>
 8003542:	3901      	subs	r1, #1
 8003544:	4652      	mov	r2, sl
 8003546:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800354a:	9109      	str	r1, [sp, #36]	; 0x24
 800354c:	f7ff ff2f 	bl	80033ae <__exponent>
 8003550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003552:	1813      	adds	r3, r2, r0
 8003554:	2a01      	cmp	r2, #1
 8003556:	4681      	mov	r9, r0
 8003558:	6123      	str	r3, [r4, #16]
 800355a:	dc02      	bgt.n	8003562 <_printf_float+0x14e>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	07d1      	lsls	r1, r2, #31
 8003560:	d501      	bpl.n	8003566 <_printf_float+0x152>
 8003562:	3301      	adds	r3, #1
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0a5      	beq.n	80034ba <_printf_float+0xa6>
 800356e:	232d      	movs	r3, #45	; 0x2d
 8003570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003574:	e7a1      	b.n	80034ba <_printf_float+0xa6>
 8003576:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800357a:	f000 8177 	beq.w	800386c <_printf_float+0x458>
 800357e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003582:	d1bb      	bne.n	80034fc <_printf_float+0xe8>
 8003584:	2900      	cmp	r1, #0
 8003586:	d1b9      	bne.n	80034fc <_printf_float+0xe8>
 8003588:	2301      	movs	r3, #1
 800358a:	e7b6      	b.n	80034fa <_printf_float+0xe6>
 800358c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003590:	d119      	bne.n	80035c6 <_printf_float+0x1b2>
 8003592:	2900      	cmp	r1, #0
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	dd0c      	ble.n	80035b2 <_printf_float+0x19e>
 8003598:	6121      	str	r1, [r4, #16]
 800359a:	b913      	cbnz	r3, 80035a2 <_printf_float+0x18e>
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	07d2      	lsls	r2, r2, #31
 80035a0:	d502      	bpl.n	80035a8 <_printf_float+0x194>
 80035a2:	3301      	adds	r3, #1
 80035a4:	440b      	add	r3, r1
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80035ac:	f04f 0900 	mov.w	r9, #0
 80035b0:	e7d9      	b.n	8003566 <_printf_float+0x152>
 80035b2:	b913      	cbnz	r3, 80035ba <_printf_float+0x1a6>
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	07d0      	lsls	r0, r2, #31
 80035b8:	d501      	bpl.n	80035be <_printf_float+0x1aa>
 80035ba:	3302      	adds	r3, #2
 80035bc:	e7f3      	b.n	80035a6 <_printf_float+0x192>
 80035be:	2301      	movs	r3, #1
 80035c0:	e7f1      	b.n	80035a6 <_printf_float+0x192>
 80035c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80035c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80035ca:	4293      	cmp	r3, r2
 80035cc:	db05      	blt.n	80035da <_printf_float+0x1c6>
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	6123      	str	r3, [r4, #16]
 80035d2:	07d1      	lsls	r1, r2, #31
 80035d4:	d5e8      	bpl.n	80035a8 <_printf_float+0x194>
 80035d6:	3301      	adds	r3, #1
 80035d8:	e7e5      	b.n	80035a6 <_printf_float+0x192>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfd4      	ite	le
 80035de:	f1c3 0302 	rsble	r3, r3, #2
 80035e2:	2301      	movgt	r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	e7de      	b.n	80035a6 <_printf_float+0x192>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	055a      	lsls	r2, r3, #21
 80035ec:	d407      	bmi.n	80035fe <_printf_float+0x1ea>
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	4642      	mov	r2, r8
 80035f2:	4631      	mov	r1, r6
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b8      	blx	r7
 80035f8:	3001      	adds	r0, #1
 80035fa:	d12b      	bne.n	8003654 <_printf_float+0x240>
 80035fc:	e767      	b.n	80034ce <_printf_float+0xba>
 80035fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003602:	f240 80dc 	bls.w	80037be <_printf_float+0x3aa>
 8003606:	2200      	movs	r2, #0
 8003608:	2300      	movs	r3, #0
 800360a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800360e:	f7fd fa07 	bl	8000a20 <__aeabi_dcmpeq>
 8003612:	2800      	cmp	r0, #0
 8003614:	d033      	beq.n	800367e <_printf_float+0x26a>
 8003616:	2301      	movs	r3, #1
 8003618:	4a41      	ldr	r2, [pc, #260]	; (8003720 <_printf_float+0x30c>)
 800361a:	4631      	mov	r1, r6
 800361c:	4628      	mov	r0, r5
 800361e:	47b8      	blx	r7
 8003620:	3001      	adds	r0, #1
 8003622:	f43f af54 	beq.w	80034ce <_printf_float+0xba>
 8003626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800362a:	429a      	cmp	r2, r3
 800362c:	db02      	blt.n	8003634 <_printf_float+0x220>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	07d8      	lsls	r0, r3, #31
 8003632:	d50f      	bpl.n	8003654 <_printf_float+0x240>
 8003634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af45 	beq.w	80034ce <_printf_float+0xba>
 8003644:	f04f 0800 	mov.w	r8, #0
 8003648:	f104 091a 	add.w	r9, r4, #26
 800364c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	4543      	cmp	r3, r8
 8003652:	dc09      	bgt.n	8003668 <_printf_float+0x254>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	079b      	lsls	r3, r3, #30
 8003658:	f100 8103 	bmi.w	8003862 <_printf_float+0x44e>
 800365c:	68e0      	ldr	r0, [r4, #12]
 800365e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003660:	4298      	cmp	r0, r3
 8003662:	bfb8      	it	lt
 8003664:	4618      	movlt	r0, r3
 8003666:	e734      	b.n	80034d2 <_printf_float+0xbe>
 8003668:	2301      	movs	r3, #1
 800366a:	464a      	mov	r2, r9
 800366c:	4631      	mov	r1, r6
 800366e:	4628      	mov	r0, r5
 8003670:	47b8      	blx	r7
 8003672:	3001      	adds	r0, #1
 8003674:	f43f af2b 	beq.w	80034ce <_printf_float+0xba>
 8003678:	f108 0801 	add.w	r8, r8, #1
 800367c:	e7e6      	b.n	800364c <_printf_float+0x238>
 800367e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	dc2b      	bgt.n	80036dc <_printf_float+0x2c8>
 8003684:	2301      	movs	r3, #1
 8003686:	4a26      	ldr	r2, [pc, #152]	; (8003720 <_printf_float+0x30c>)
 8003688:	4631      	mov	r1, r6
 800368a:	4628      	mov	r0, r5
 800368c:	47b8      	blx	r7
 800368e:	3001      	adds	r0, #1
 8003690:	f43f af1d 	beq.w	80034ce <_printf_float+0xba>
 8003694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003696:	b923      	cbnz	r3, 80036a2 <_printf_float+0x28e>
 8003698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800369a:	b913      	cbnz	r3, 80036a2 <_printf_float+0x28e>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	07d9      	lsls	r1, r3, #31
 80036a0:	d5d8      	bpl.n	8003654 <_printf_float+0x240>
 80036a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
 80036aa:	47b8      	blx	r7
 80036ac:	3001      	adds	r0, #1
 80036ae:	f43f af0e 	beq.w	80034ce <_printf_float+0xba>
 80036b2:	f04f 0900 	mov.w	r9, #0
 80036b6:	f104 0a1a 	add.w	sl, r4, #26
 80036ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036bc:	425b      	negs	r3, r3
 80036be:	454b      	cmp	r3, r9
 80036c0:	dc01      	bgt.n	80036c6 <_printf_float+0x2b2>
 80036c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036c4:	e794      	b.n	80035f0 <_printf_float+0x1dc>
 80036c6:	2301      	movs	r3, #1
 80036c8:	4652      	mov	r2, sl
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	f43f aefc 	beq.w	80034ce <_printf_float+0xba>
 80036d6:	f109 0901 	add.w	r9, r9, #1
 80036da:	e7ee      	b.n	80036ba <_printf_float+0x2a6>
 80036dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036e0:	429a      	cmp	r2, r3
 80036e2:	bfa8      	it	ge
 80036e4:	461a      	movge	r2, r3
 80036e6:	2a00      	cmp	r2, #0
 80036e8:	4691      	mov	r9, r2
 80036ea:	dd07      	ble.n	80036fc <_printf_float+0x2e8>
 80036ec:	4613      	mov	r3, r2
 80036ee:	4631      	mov	r1, r6
 80036f0:	4642      	mov	r2, r8
 80036f2:	4628      	mov	r0, r5
 80036f4:	47b8      	blx	r7
 80036f6:	3001      	adds	r0, #1
 80036f8:	f43f aee9 	beq.w	80034ce <_printf_float+0xba>
 80036fc:	f104 031a 	add.w	r3, r4, #26
 8003700:	f04f 0b00 	mov.w	fp, #0
 8003704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003708:	9306      	str	r3, [sp, #24]
 800370a:	e015      	b.n	8003738 <_printf_float+0x324>
 800370c:	7fefffff 	.word	0x7fefffff
 8003710:	08005584 	.word	0x08005584
 8003714:	08005580 	.word	0x08005580
 8003718:	0800558c 	.word	0x0800558c
 800371c:	08005588 	.word	0x08005588
 8003720:	08005590 	.word	0x08005590
 8003724:	2301      	movs	r3, #1
 8003726:	9a06      	ldr	r2, [sp, #24]
 8003728:	4631      	mov	r1, r6
 800372a:	4628      	mov	r0, r5
 800372c:	47b8      	blx	r7
 800372e:	3001      	adds	r0, #1
 8003730:	f43f aecd 	beq.w	80034ce <_printf_float+0xba>
 8003734:	f10b 0b01 	add.w	fp, fp, #1
 8003738:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800373c:	ebaa 0309 	sub.w	r3, sl, r9
 8003740:	455b      	cmp	r3, fp
 8003742:	dcef      	bgt.n	8003724 <_printf_float+0x310>
 8003744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003748:	429a      	cmp	r2, r3
 800374a:	44d0      	add	r8, sl
 800374c:	db15      	blt.n	800377a <_printf_float+0x366>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	07da      	lsls	r2, r3, #31
 8003752:	d412      	bmi.n	800377a <_printf_float+0x366>
 8003754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003758:	eba3 020a 	sub.w	r2, r3, sl
 800375c:	eba3 0a01 	sub.w	sl, r3, r1
 8003760:	4592      	cmp	sl, r2
 8003762:	bfa8      	it	ge
 8003764:	4692      	movge	sl, r2
 8003766:	f1ba 0f00 	cmp.w	sl, #0
 800376a:	dc0e      	bgt.n	800378a <_printf_float+0x376>
 800376c:	f04f 0800 	mov.w	r8, #0
 8003770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003774:	f104 091a 	add.w	r9, r4, #26
 8003778:	e019      	b.n	80037ae <_printf_float+0x39a>
 800377a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800377e:	4631      	mov	r1, r6
 8003780:	4628      	mov	r0, r5
 8003782:	47b8      	blx	r7
 8003784:	3001      	adds	r0, #1
 8003786:	d1e5      	bne.n	8003754 <_printf_float+0x340>
 8003788:	e6a1      	b.n	80034ce <_printf_float+0xba>
 800378a:	4653      	mov	r3, sl
 800378c:	4642      	mov	r2, r8
 800378e:	4631      	mov	r1, r6
 8003790:	4628      	mov	r0, r5
 8003792:	47b8      	blx	r7
 8003794:	3001      	adds	r0, #1
 8003796:	d1e9      	bne.n	800376c <_printf_float+0x358>
 8003798:	e699      	b.n	80034ce <_printf_float+0xba>
 800379a:	2301      	movs	r3, #1
 800379c:	464a      	mov	r2, r9
 800379e:	4631      	mov	r1, r6
 80037a0:	4628      	mov	r0, r5
 80037a2:	47b8      	blx	r7
 80037a4:	3001      	adds	r0, #1
 80037a6:	f43f ae92 	beq.w	80034ce <_printf_float+0xba>
 80037aa:	f108 0801 	add.w	r8, r8, #1
 80037ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	eba3 030a 	sub.w	r3, r3, sl
 80037b8:	4543      	cmp	r3, r8
 80037ba:	dcee      	bgt.n	800379a <_printf_float+0x386>
 80037bc:	e74a      	b.n	8003654 <_printf_float+0x240>
 80037be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037c0:	2a01      	cmp	r2, #1
 80037c2:	dc01      	bgt.n	80037c8 <_printf_float+0x3b4>
 80037c4:	07db      	lsls	r3, r3, #31
 80037c6:	d53a      	bpl.n	800383e <_printf_float+0x42a>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4642      	mov	r2, r8
 80037cc:	4631      	mov	r1, r6
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b8      	blx	r7
 80037d2:	3001      	adds	r0, #1
 80037d4:	f43f ae7b 	beq.w	80034ce <_printf_float+0xba>
 80037d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037dc:	4631      	mov	r1, r6
 80037de:	4628      	mov	r0, r5
 80037e0:	47b8      	blx	r7
 80037e2:	3001      	adds	r0, #1
 80037e4:	f108 0801 	add.w	r8, r8, #1
 80037e8:	f43f ae71 	beq.w	80034ce <_printf_float+0xba>
 80037ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ee:	2200      	movs	r2, #0
 80037f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80037f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037f8:	2300      	movs	r3, #0
 80037fa:	f7fd f911 	bl	8000a20 <__aeabi_dcmpeq>
 80037fe:	b9c8      	cbnz	r0, 8003834 <_printf_float+0x420>
 8003800:	4653      	mov	r3, sl
 8003802:	4642      	mov	r2, r8
 8003804:	4631      	mov	r1, r6
 8003806:	4628      	mov	r0, r5
 8003808:	47b8      	blx	r7
 800380a:	3001      	adds	r0, #1
 800380c:	d10e      	bne.n	800382c <_printf_float+0x418>
 800380e:	e65e      	b.n	80034ce <_printf_float+0xba>
 8003810:	2301      	movs	r3, #1
 8003812:	4652      	mov	r2, sl
 8003814:	4631      	mov	r1, r6
 8003816:	4628      	mov	r0, r5
 8003818:	47b8      	blx	r7
 800381a:	3001      	adds	r0, #1
 800381c:	f43f ae57 	beq.w	80034ce <_printf_float+0xba>
 8003820:	f108 0801 	add.w	r8, r8, #1
 8003824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	4543      	cmp	r3, r8
 800382a:	dcf1      	bgt.n	8003810 <_printf_float+0x3fc>
 800382c:	464b      	mov	r3, r9
 800382e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003832:	e6de      	b.n	80035f2 <_printf_float+0x1de>
 8003834:	f04f 0800 	mov.w	r8, #0
 8003838:	f104 0a1a 	add.w	sl, r4, #26
 800383c:	e7f2      	b.n	8003824 <_printf_float+0x410>
 800383e:	2301      	movs	r3, #1
 8003840:	e7df      	b.n	8003802 <_printf_float+0x3ee>
 8003842:	2301      	movs	r3, #1
 8003844:	464a      	mov	r2, r9
 8003846:	4631      	mov	r1, r6
 8003848:	4628      	mov	r0, r5
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	f43f ae3e 	beq.w	80034ce <_printf_float+0xba>
 8003852:	f108 0801 	add.w	r8, r8, #1
 8003856:	68e3      	ldr	r3, [r4, #12]
 8003858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	4543      	cmp	r3, r8
 800385e:	dcf0      	bgt.n	8003842 <_printf_float+0x42e>
 8003860:	e6fc      	b.n	800365c <_printf_float+0x248>
 8003862:	f04f 0800 	mov.w	r8, #0
 8003866:	f104 0919 	add.w	r9, r4, #25
 800386a:	e7f4      	b.n	8003856 <_printf_float+0x442>
 800386c:	2900      	cmp	r1, #0
 800386e:	f43f ae8b 	beq.w	8003588 <_printf_float+0x174>
 8003872:	2300      	movs	r3, #0
 8003874:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003878:	ab09      	add	r3, sp, #36	; 0x24
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	ec49 8b10 	vmov	d0, r8, r9
 8003880:	6022      	str	r2, [r4, #0]
 8003882:	f8cd a004 	str.w	sl, [sp, #4]
 8003886:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800388a:	4628      	mov	r0, r5
 800388c:	f7ff fd2e 	bl	80032ec <__cvt>
 8003890:	4680      	mov	r8, r0
 8003892:	e648      	b.n	8003526 <_printf_float+0x112>

08003894 <_printf_common>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	4691      	mov	r9, r2
 800389a:	461f      	mov	r7, r3
 800389c:	688a      	ldr	r2, [r1, #8]
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfb8      	it	lt
 80038a8:	4613      	movlt	r3, r2
 80038aa:	f8c9 3000 	str.w	r3, [r9]
 80038ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b2:	4606      	mov	r6, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	b112      	cbz	r2, 80038be <_printf_common+0x2a>
 80038b8:	3301      	adds	r3, #1
 80038ba:	f8c9 3000 	str.w	r3, [r9]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038c8:	3302      	addmi	r3, #2
 80038ca:	f8c9 3000 	strmi.w	r3, [r9]
 80038ce:	6825      	ldr	r5, [r4, #0]
 80038d0:	f015 0506 	ands.w	r5, r5, #6
 80038d4:	d107      	bne.n	80038e6 <_printf_common+0x52>
 80038d6:	f104 0a19 	add.w	sl, r4, #25
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	f8d9 2000 	ldr.w	r2, [r9]
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	42ab      	cmp	r3, r5
 80038e4:	dc28      	bgt.n	8003938 <_printf_common+0xa4>
 80038e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	3300      	adds	r3, #0
 80038ee:	bf18      	it	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	0692      	lsls	r2, r2, #26
 80038f4:	d42d      	bmi.n	8003952 <_printf_common+0xbe>
 80038f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038fa:	4639      	mov	r1, r7
 80038fc:	4630      	mov	r0, r6
 80038fe:	47c0      	blx	r8
 8003900:	3001      	adds	r0, #1
 8003902:	d020      	beq.n	8003946 <_printf_common+0xb2>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	68e5      	ldr	r5, [r4, #12]
 8003908:	f8d9 2000 	ldr.w	r2, [r9]
 800390c:	f003 0306 	and.w	r3, r3, #6
 8003910:	2b04      	cmp	r3, #4
 8003912:	bf08      	it	eq
 8003914:	1aad      	subeq	r5, r5, r2
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	6922      	ldr	r2, [r4, #16]
 800391a:	bf0c      	ite	eq
 800391c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003920:	2500      	movne	r5, #0
 8003922:	4293      	cmp	r3, r2
 8003924:	bfc4      	itt	gt
 8003926:	1a9b      	subgt	r3, r3, r2
 8003928:	18ed      	addgt	r5, r5, r3
 800392a:	f04f 0900 	mov.w	r9, #0
 800392e:	341a      	adds	r4, #26
 8003930:	454d      	cmp	r5, r9
 8003932:	d11a      	bne.n	800396a <_printf_common+0xd6>
 8003934:	2000      	movs	r0, #0
 8003936:	e008      	b.n	800394a <_printf_common+0xb6>
 8003938:	2301      	movs	r3, #1
 800393a:	4652      	mov	r2, sl
 800393c:	4639      	mov	r1, r7
 800393e:	4630      	mov	r0, r6
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d103      	bne.n	800394e <_printf_common+0xba>
 8003946:	f04f 30ff 	mov.w	r0, #4294967295
 800394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394e:	3501      	adds	r5, #1
 8003950:	e7c3      	b.n	80038da <_printf_common+0x46>
 8003952:	18e1      	adds	r1, r4, r3
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	2030      	movs	r0, #48	; 0x30
 8003958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800395c:	4422      	add	r2, r4
 800395e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003966:	3302      	adds	r3, #2
 8003968:	e7c5      	b.n	80038f6 <_printf_common+0x62>
 800396a:	2301      	movs	r3, #1
 800396c:	4622      	mov	r2, r4
 800396e:	4639      	mov	r1, r7
 8003970:	4630      	mov	r0, r6
 8003972:	47c0      	blx	r8
 8003974:	3001      	adds	r0, #1
 8003976:	d0e6      	beq.n	8003946 <_printf_common+0xb2>
 8003978:	f109 0901 	add.w	r9, r9, #1
 800397c:	e7d8      	b.n	8003930 <_printf_common+0x9c>
	...

08003980 <_puts_r>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	460e      	mov	r6, r1
 8003984:	4605      	mov	r5, r0
 8003986:	b118      	cbz	r0, 8003990 <_puts_r+0x10>
 8003988:	6983      	ldr	r3, [r0, #24]
 800398a:	b90b      	cbnz	r3, 8003990 <_puts_r+0x10>
 800398c:	f001 f850 	bl	8004a30 <__sinit>
 8003990:	69ab      	ldr	r3, [r5, #24]
 8003992:	68ac      	ldr	r4, [r5, #8]
 8003994:	b913      	cbnz	r3, 800399c <_puts_r+0x1c>
 8003996:	4628      	mov	r0, r5
 8003998:	f001 f84a 	bl	8004a30 <__sinit>
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <_puts_r+0xac>)
 800399e:	429c      	cmp	r4, r3
 80039a0:	d117      	bne.n	80039d2 <_puts_r+0x52>
 80039a2:	686c      	ldr	r4, [r5, #4]
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	071b      	lsls	r3, r3, #28
 80039a8:	d51d      	bpl.n	80039e6 <_puts_r+0x66>
 80039aa:	6923      	ldr	r3, [r4, #16]
 80039ac:	b1db      	cbz	r3, 80039e6 <_puts_r+0x66>
 80039ae:	3e01      	subs	r6, #1
 80039b0:	68a3      	ldr	r3, [r4, #8]
 80039b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60a3      	str	r3, [r4, #8]
 80039ba:	b9e9      	cbnz	r1, 80039f8 <_puts_r+0x78>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da2e      	bge.n	8003a1e <_puts_r+0x9e>
 80039c0:	4622      	mov	r2, r4
 80039c2:	210a      	movs	r1, #10
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 f83f 	bl	8003a48 <__swbuf_r>
 80039ca:	3001      	adds	r0, #1
 80039cc:	d011      	beq.n	80039f2 <_puts_r+0x72>
 80039ce:	200a      	movs	r0, #10
 80039d0:	e011      	b.n	80039f6 <_puts_r+0x76>
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <_puts_r+0xb0>)
 80039d4:	429c      	cmp	r4, r3
 80039d6:	d101      	bne.n	80039dc <_puts_r+0x5c>
 80039d8:	68ac      	ldr	r4, [r5, #8]
 80039da:	e7e3      	b.n	80039a4 <_puts_r+0x24>
 80039dc:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <_puts_r+0xb4>)
 80039de:	429c      	cmp	r4, r3
 80039e0:	bf08      	it	eq
 80039e2:	68ec      	ldreq	r4, [r5, #12]
 80039e4:	e7de      	b.n	80039a4 <_puts_r+0x24>
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f87f 	bl	8003aec <__swsetup_r>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d0dd      	beq.n	80039ae <_puts_r+0x2e>
 80039f2:	f04f 30ff 	mov.w	r0, #4294967295
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da04      	bge.n	8003a06 <_puts_r+0x86>
 80039fc:	69a2      	ldr	r2, [r4, #24]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	dc06      	bgt.n	8003a10 <_puts_r+0x90>
 8003a02:	290a      	cmp	r1, #10
 8003a04:	d004      	beq.n	8003a10 <_puts_r+0x90>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	7019      	strb	r1, [r3, #0]
 8003a0e:	e7cf      	b.n	80039b0 <_puts_r+0x30>
 8003a10:	4622      	mov	r2, r4
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 f818 	bl	8003a48 <__swbuf_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1c9      	bne.n	80039b0 <_puts_r+0x30>
 8003a1c:	e7e9      	b.n	80039f2 <_puts_r+0x72>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	200a      	movs	r0, #10
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	6022      	str	r2, [r4, #0]
 8003a26:	7018      	strb	r0, [r3, #0]
 8003a28:	e7e5      	b.n	80039f6 <_puts_r+0x76>
 8003a2a:	bf00      	nop
 8003a2c:	080055c0 	.word	0x080055c0
 8003a30:	080055e0 	.word	0x080055e0
 8003a34:	080055a0 	.word	0x080055a0

08003a38 <puts>:
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <puts+0xc>)
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f7ff bf9f 	b.w	8003980 <_puts_r>
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <__swbuf_r>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	460e      	mov	r6, r1
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	4605      	mov	r5, r0
 8003a50:	b118      	cbz	r0, 8003a5a <__swbuf_r+0x12>
 8003a52:	6983      	ldr	r3, [r0, #24]
 8003a54:	b90b      	cbnz	r3, 8003a5a <__swbuf_r+0x12>
 8003a56:	f000 ffeb 	bl	8004a30 <__sinit>
 8003a5a:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <__swbuf_r+0x98>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d12a      	bne.n	8003ab6 <__swbuf_r+0x6e>
 8003a60:	686c      	ldr	r4, [r5, #4]
 8003a62:	69a3      	ldr	r3, [r4, #24]
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	071a      	lsls	r2, r3, #28
 8003a6a:	d52e      	bpl.n	8003aca <__swbuf_r+0x82>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	b363      	cbz	r3, 8003aca <__swbuf_r+0x82>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	1ac0      	subs	r0, r0, r3
 8003a76:	6963      	ldr	r3, [r4, #20]
 8003a78:	b2f6      	uxtb	r6, r6
 8003a7a:	4283      	cmp	r3, r0
 8003a7c:	4637      	mov	r7, r6
 8003a7e:	dc04      	bgt.n	8003a8a <__swbuf_r+0x42>
 8003a80:	4621      	mov	r1, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 ff6a 	bl	800495c <_fflush_r>
 8003a88:	bb28      	cbnz	r0, 8003ad6 <__swbuf_r+0x8e>
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	60a3      	str	r3, [r4, #8]
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	701e      	strb	r6, [r3, #0]
 8003a98:	6963      	ldr	r3, [r4, #20]
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	4283      	cmp	r3, r0
 8003a9e:	d004      	beq.n	8003aaa <__swbuf_r+0x62>
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	07db      	lsls	r3, r3, #31
 8003aa4:	d519      	bpl.n	8003ada <__swbuf_r+0x92>
 8003aa6:	2e0a      	cmp	r6, #10
 8003aa8:	d117      	bne.n	8003ada <__swbuf_r+0x92>
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 ff55 	bl	800495c <_fflush_r>
 8003ab2:	b190      	cbz	r0, 8003ada <__swbuf_r+0x92>
 8003ab4:	e00f      	b.n	8003ad6 <__swbuf_r+0x8e>
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <__swbuf_r+0x9c>)
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d101      	bne.n	8003ac0 <__swbuf_r+0x78>
 8003abc:	68ac      	ldr	r4, [r5, #8]
 8003abe:	e7d0      	b.n	8003a62 <__swbuf_r+0x1a>
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <__swbuf_r+0xa0>)
 8003ac2:	429c      	cmp	r4, r3
 8003ac4:	bf08      	it	eq
 8003ac6:	68ec      	ldreq	r4, [r5, #12]
 8003ac8:	e7cb      	b.n	8003a62 <__swbuf_r+0x1a>
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	f000 f80d 	bl	8003aec <__swsetup_r>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0cc      	beq.n	8003a70 <__swbuf_r+0x28>
 8003ad6:	f04f 37ff 	mov.w	r7, #4294967295
 8003ada:	4638      	mov	r0, r7
 8003adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	080055c0 	.word	0x080055c0
 8003ae4:	080055e0 	.word	0x080055e0
 8003ae8:	080055a0 	.word	0x080055a0

08003aec <__swsetup_r>:
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <__swsetup_r+0xcc>)
 8003aee:	b570      	push	{r4, r5, r6, lr}
 8003af0:	681d      	ldr	r5, [r3, #0]
 8003af2:	4606      	mov	r6, r0
 8003af4:	460c      	mov	r4, r1
 8003af6:	b125      	cbz	r5, 8003b02 <__swsetup_r+0x16>
 8003af8:	69ab      	ldr	r3, [r5, #24]
 8003afa:	b913      	cbnz	r3, 8003b02 <__swsetup_r+0x16>
 8003afc:	4628      	mov	r0, r5
 8003afe:	f000 ff97 	bl	8004a30 <__sinit>
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <__swsetup_r+0xd0>)
 8003b04:	429c      	cmp	r4, r3
 8003b06:	d10f      	bne.n	8003b28 <__swsetup_r+0x3c>
 8003b08:	686c      	ldr	r4, [r5, #4]
 8003b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	0715      	lsls	r5, r2, #28
 8003b12:	d42c      	bmi.n	8003b6e <__swsetup_r+0x82>
 8003b14:	06d0      	lsls	r0, r2, #27
 8003b16:	d411      	bmi.n	8003b3c <__swsetup_r+0x50>
 8003b18:	2209      	movs	r2, #9
 8003b1a:	6032      	str	r2, [r6, #0]
 8003b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	f04f 30ff 	mov.w	r0, #4294967295
 8003b26:	e03e      	b.n	8003ba6 <__swsetup_r+0xba>
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <__swsetup_r+0xd4>)
 8003b2a:	429c      	cmp	r4, r3
 8003b2c:	d101      	bne.n	8003b32 <__swsetup_r+0x46>
 8003b2e:	68ac      	ldr	r4, [r5, #8]
 8003b30:	e7eb      	b.n	8003b0a <__swsetup_r+0x1e>
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <__swsetup_r+0xd8>)
 8003b34:	429c      	cmp	r4, r3
 8003b36:	bf08      	it	eq
 8003b38:	68ec      	ldreq	r4, [r5, #12]
 8003b3a:	e7e6      	b.n	8003b0a <__swsetup_r+0x1e>
 8003b3c:	0751      	lsls	r1, r2, #29
 8003b3e:	d512      	bpl.n	8003b66 <__swsetup_r+0x7a>
 8003b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b42:	b141      	cbz	r1, 8003b56 <__swsetup_r+0x6a>
 8003b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	d002      	beq.n	8003b52 <__swsetup_r+0x66>
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f001 fb67 	bl	8005220 <_free_r>
 8003b52:	2300      	movs	r3, #0
 8003b54:	6363      	str	r3, [r4, #52]	; 0x34
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6063      	str	r3, [r4, #4]
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f043 0308 	orr.w	r3, r3, #8
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	b94b      	cbnz	r3, 8003b86 <__swsetup_r+0x9a>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d003      	beq.n	8003b86 <__swsetup_r+0x9a>
 8003b7e:	4621      	mov	r1, r4
 8003b80:	4630      	mov	r0, r6
 8003b82:	f001 f811 	bl	8004ba8 <__smakebuf_r>
 8003b86:	89a2      	ldrh	r2, [r4, #12]
 8003b88:	f012 0301 	ands.w	r3, r2, #1
 8003b8c:	d00c      	beq.n	8003ba8 <__swsetup_r+0xbc>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	6963      	ldr	r3, [r4, #20]
 8003b94:	425b      	negs	r3, r3
 8003b96:	61a3      	str	r3, [r4, #24]
 8003b98:	6923      	ldr	r3, [r4, #16]
 8003b9a:	b953      	cbnz	r3, 8003bb2 <__swsetup_r+0xc6>
 8003b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ba4:	d1ba      	bne.n	8003b1c <__swsetup_r+0x30>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	0792      	lsls	r2, r2, #30
 8003baa:	bf58      	it	pl
 8003bac:	6963      	ldrpl	r3, [r4, #20]
 8003bae:	60a3      	str	r3, [r4, #8]
 8003bb0:	e7f2      	b.n	8003b98 <__swsetup_r+0xac>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e7f7      	b.n	8003ba6 <__swsetup_r+0xba>
 8003bb6:	bf00      	nop
 8003bb8:	2000000c 	.word	0x2000000c
 8003bbc:	080055c0 	.word	0x080055c0
 8003bc0:	080055e0 	.word	0x080055e0
 8003bc4:	080055a0 	.word	0x080055a0

08003bc8 <quorem>:
 8003bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	6903      	ldr	r3, [r0, #16]
 8003bce:	690c      	ldr	r4, [r1, #16]
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	4680      	mov	r8, r0
 8003bd4:	f2c0 8082 	blt.w	8003cdc <quorem+0x114>
 8003bd8:	3c01      	subs	r4, #1
 8003bda:	f101 0714 	add.w	r7, r1, #20
 8003bde:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003be2:	f100 0614 	add.w	r6, r0, #20
 8003be6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003bea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003bee:	eb06 030c 	add.w	r3, r6, ip
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	eb07 090c 	add.w	r9, r7, ip
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	fbb0 f5f5 	udiv	r5, r0, r5
 8003bfe:	b395      	cbz	r5, 8003c66 <quorem+0x9e>
 8003c00:	f04f 0a00 	mov.w	sl, #0
 8003c04:	4638      	mov	r0, r7
 8003c06:	46b6      	mov	lr, r6
 8003c08:	46d3      	mov	fp, sl
 8003c0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c0e:	b293      	uxth	r3, r2
 8003c10:	fb05 a303 	mla	r3, r5, r3, sl
 8003c14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	ebab 0303 	sub.w	r3, fp, r3
 8003c1e:	0c12      	lsrs	r2, r2, #16
 8003c20:	f8de b000 	ldr.w	fp, [lr]
 8003c24:	fb05 a202 	mla	r2, r5, r2, sl
 8003c28:	fa13 f38b 	uxtah	r3, r3, fp
 8003c2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003c30:	fa1f fb82 	uxth.w	fp, r2
 8003c34:	f8de 2000 	ldr.w	r2, [lr]
 8003c38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c46:	4581      	cmp	r9, r0
 8003c48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c4c:	f84e 3b04 	str.w	r3, [lr], #4
 8003c50:	d2db      	bcs.n	8003c0a <quorem+0x42>
 8003c52:	f856 300c 	ldr.w	r3, [r6, ip]
 8003c56:	b933      	cbnz	r3, 8003c66 <quorem+0x9e>
 8003c58:	9b01      	ldr	r3, [sp, #4]
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	429e      	cmp	r6, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	d330      	bcc.n	8003cc4 <quorem+0xfc>
 8003c62:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c66:	4640      	mov	r0, r8
 8003c68:	f001 fa06 	bl	8005078 <__mcmp>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	db25      	blt.n	8003cbc <quorem+0xf4>
 8003c70:	3501      	adds	r5, #1
 8003c72:	4630      	mov	r0, r6
 8003c74:	f04f 0c00 	mov.w	ip, #0
 8003c78:	f857 2b04 	ldr.w	r2, [r7], #4
 8003c7c:	f8d0 e000 	ldr.w	lr, [r0]
 8003c80:	b293      	uxth	r3, r2
 8003c82:	ebac 0303 	sub.w	r3, ip, r3
 8003c86:	0c12      	lsrs	r2, r2, #16
 8003c88:	fa13 f38e 	uxtah	r3, r3, lr
 8003c8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c9a:	45b9      	cmp	r9, r7
 8003c9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003ca0:	f840 3b04 	str.w	r3, [r0], #4
 8003ca4:	d2e8      	bcs.n	8003c78 <quorem+0xb0>
 8003ca6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003caa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003cae:	b92a      	cbnz	r2, 8003cbc <quorem+0xf4>
 8003cb0:	3b04      	subs	r3, #4
 8003cb2:	429e      	cmp	r6, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	d30b      	bcc.n	8003cd0 <quorem+0x108>
 8003cb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	b003      	add	sp, #12
 8003cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d1ca      	bne.n	8003c62 <quorem+0x9a>
 8003ccc:	3c01      	subs	r4, #1
 8003cce:	e7c5      	b.n	8003c5c <quorem+0x94>
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	3b04      	subs	r3, #4
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	d1ef      	bne.n	8003cb8 <quorem+0xf0>
 8003cd8:	3c01      	subs	r4, #1
 8003cda:	e7ea      	b.n	8003cb2 <quorem+0xea>
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e7ee      	b.n	8003cbe <quorem+0xf6>

08003ce0 <_dtoa_r>:
 8003ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce4:	ec57 6b10 	vmov	r6, r7, d0
 8003ce8:	b097      	sub	sp, #92	; 0x5c
 8003cea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003cec:	9106      	str	r1, [sp, #24]
 8003cee:	4604      	mov	r4, r0
 8003cf0:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8003cf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003cf8:	e9cd 6700 	strd	r6, r7, [sp]
 8003cfc:	b93d      	cbnz	r5, 8003d0e <_dtoa_r+0x2e>
 8003cfe:	2010      	movs	r0, #16
 8003d00:	f000 ff92 	bl	8004c28 <malloc>
 8003d04:	6260      	str	r0, [r4, #36]	; 0x24
 8003d06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d0a:	6005      	str	r5, [r0, #0]
 8003d0c:	60c5      	str	r5, [r0, #12]
 8003d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	b151      	cbz	r1, 8003d2a <_dtoa_r+0x4a>
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	604a      	str	r2, [r1, #4]
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 ffc9 	bl	8004cb6 <_Bfree>
 8003d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	1e3b      	subs	r3, r7, #0
 8003d2c:	bfbb      	ittet	lt
 8003d2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d32:	9301      	strlt	r3, [sp, #4]
 8003d34:	2300      	movge	r3, #0
 8003d36:	2201      	movlt	r2, #1
 8003d38:	bfac      	ite	ge
 8003d3a:	f8c8 3000 	strge.w	r3, [r8]
 8003d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d42:	4baf      	ldr	r3, [pc, #700]	; (8004000 <_dtoa_r+0x320>)
 8003d44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003d48:	ea33 0308 	bics.w	r3, r3, r8
 8003d4c:	d114      	bne.n	8003d78 <_dtoa_r+0x98>
 8003d4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d50:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	9b00      	ldr	r3, [sp, #0]
 8003d58:	b923      	cbnz	r3, 8003d64 <_dtoa_r+0x84>
 8003d5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	f000 8542 	beq.w	80047e8 <_dtoa_r+0xb08>
 8003d64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004014 <_dtoa_r+0x334>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8544 	beq.w	80047f8 <_dtoa_r+0xb18>
 8003d70:	f10b 0303 	add.w	r3, fp, #3
 8003d74:	f000 bd3e 	b.w	80047f4 <_dtoa_r+0xb14>
 8003d78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2300      	movs	r3, #0
 8003d80:	4630      	mov	r0, r6
 8003d82:	4639      	mov	r1, r7
 8003d84:	f7fc fe4c 	bl	8000a20 <__aeabi_dcmpeq>
 8003d88:	4681      	mov	r9, r0
 8003d8a:	b168      	cbz	r0, 8003da8 <_dtoa_r+0xc8>
 8003d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8524 	beq.w	80047e2 <_dtoa_r+0xb02>
 8003d9a:	4b9a      	ldr	r3, [pc, #616]	; (8004004 <_dtoa_r+0x324>)
 8003d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	f000 bd28 	b.w	80047f8 <_dtoa_r+0xb18>
 8003da8:	aa14      	add	r2, sp, #80	; 0x50
 8003daa:	a915      	add	r1, sp, #84	; 0x54
 8003dac:	ec47 6b10 	vmov	d0, r6, r7
 8003db0:	4620      	mov	r0, r4
 8003db2:	f001 f9d8 	bl	8005166 <__d2b>
 8003db6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003dba:	9004      	str	r0, [sp, #16]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	d07c      	beq.n	8003eba <_dtoa_r+0x1da>
 8003dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003dc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003dc8:	46b2      	mov	sl, r6
 8003dca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003dd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4b8b      	ldr	r3, [pc, #556]	; (8004008 <_dtoa_r+0x328>)
 8003dda:	4650      	mov	r0, sl
 8003ddc:	4659      	mov	r1, fp
 8003dde:	f7fc f9ff 	bl	80001e0 <__aeabi_dsub>
 8003de2:	a381      	add	r3, pc, #516	; (adr r3, 8003fe8 <_dtoa_r+0x308>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fbb2 	bl	8000550 <__aeabi_dmul>
 8003dec:	a380      	add	r3, pc, #512	; (adr r3, 8003ff0 <_dtoa_r+0x310>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc f9f7 	bl	80001e4 <__adddf3>
 8003df6:	4606      	mov	r6, r0
 8003df8:	4628      	mov	r0, r5
 8003dfa:	460f      	mov	r7, r1
 8003dfc:	f7fc fb3e 	bl	800047c <__aeabi_i2d>
 8003e00:	a37d      	add	r3, pc, #500	; (adr r3, 8003ff8 <_dtoa_r+0x318>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fba3 	bl	8000550 <__aeabi_dmul>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4630      	mov	r0, r6
 8003e10:	4639      	mov	r1, r7
 8003e12:	f7fc f9e7 	bl	80001e4 <__adddf3>
 8003e16:	4606      	mov	r6, r0
 8003e18:	460f      	mov	r7, r1
 8003e1a:	f7fc fe49 	bl	8000ab0 <__aeabi_d2iz>
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4682      	mov	sl, r0
 8003e22:	2300      	movs	r3, #0
 8003e24:	4630      	mov	r0, r6
 8003e26:	4639      	mov	r1, r7
 8003e28:	f7fc fe04 	bl	8000a34 <__aeabi_dcmplt>
 8003e2c:	b148      	cbz	r0, 8003e42 <_dtoa_r+0x162>
 8003e2e:	4650      	mov	r0, sl
 8003e30:	f7fc fb24 	bl	800047c <__aeabi_i2d>
 8003e34:	4632      	mov	r2, r6
 8003e36:	463b      	mov	r3, r7
 8003e38:	f7fc fdf2 	bl	8000a20 <__aeabi_dcmpeq>
 8003e3c:	b908      	cbnz	r0, 8003e42 <_dtoa_r+0x162>
 8003e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e42:	f1ba 0f16 	cmp.w	sl, #22
 8003e46:	d859      	bhi.n	8003efc <_dtoa_r+0x21c>
 8003e48:	4970      	ldr	r1, [pc, #448]	; (800400c <_dtoa_r+0x32c>)
 8003e4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e56:	f7fc fe0b 	bl	8000a70 <__aeabi_dcmpgt>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d050      	beq.n	8003f00 <_dtoa_r+0x220>
 8003e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e62:	2300      	movs	r3, #0
 8003e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e68:	1b5d      	subs	r5, r3, r5
 8003e6a:	f1b5 0801 	subs.w	r8, r5, #1
 8003e6e:	bf49      	itett	mi
 8003e70:	f1c5 0301 	rsbmi	r3, r5, #1
 8003e74:	2300      	movpl	r3, #0
 8003e76:	9305      	strmi	r3, [sp, #20]
 8003e78:	f04f 0800 	movmi.w	r8, #0
 8003e7c:	bf58      	it	pl
 8003e7e:	9305      	strpl	r3, [sp, #20]
 8003e80:	f1ba 0f00 	cmp.w	sl, #0
 8003e84:	db3e      	blt.n	8003f04 <_dtoa_r+0x224>
 8003e86:	2300      	movs	r3, #0
 8003e88:	44d0      	add	r8, sl
 8003e8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003e8e:	9307      	str	r3, [sp, #28]
 8003e90:	9b06      	ldr	r3, [sp, #24]
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	f200 8090 	bhi.w	8003fb8 <_dtoa_r+0x2d8>
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	bfc4      	itt	gt
 8003e9c:	3b04      	subgt	r3, #4
 8003e9e:	9306      	strgt	r3, [sp, #24]
 8003ea0:	9b06      	ldr	r3, [sp, #24]
 8003ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ea6:	bfcc      	ite	gt
 8003ea8:	2500      	movgt	r5, #0
 8003eaa:	2501      	movle	r5, #1
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	f200 808f 	bhi.w	8003fd0 <_dtoa_r+0x2f0>
 8003eb2:	e8df f003 	tbb	[pc, r3]
 8003eb6:	7f7d      	.short	0x7f7d
 8003eb8:	7131      	.short	0x7131
 8003eba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003ebe:	441d      	add	r5, r3
 8003ec0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003ec4:	2820      	cmp	r0, #32
 8003ec6:	dd13      	ble.n	8003ef0 <_dtoa_r+0x210>
 8003ec8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003ecc:	9b00      	ldr	r3, [sp, #0]
 8003ece:	fa08 f800 	lsl.w	r8, r8, r0
 8003ed2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003ed6:	fa23 f000 	lsr.w	r0, r3, r0
 8003eda:	ea48 0000 	orr.w	r0, r8, r0
 8003ede:	f7fc fabd 	bl	800045c <__aeabi_ui2d>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4682      	mov	sl, r0
 8003ee6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003eea:	3d01      	subs	r5, #1
 8003eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8003eee:	e772      	b.n	8003dd6 <_dtoa_r+0xf6>
 8003ef0:	9b00      	ldr	r3, [sp, #0]
 8003ef2:	f1c0 0020 	rsb	r0, r0, #32
 8003ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8003efa:	e7f0      	b.n	8003ede <_dtoa_r+0x1fe>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e7b1      	b.n	8003e64 <_dtoa_r+0x184>
 8003f00:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f02:	e7b0      	b.n	8003e66 <_dtoa_r+0x186>
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	eba3 030a 	sub.w	r3, r3, sl
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	f1ca 0300 	rsb	r3, sl, #0
 8003f10:	9307      	str	r3, [sp, #28]
 8003f12:	2300      	movs	r3, #0
 8003f14:	930e      	str	r3, [sp, #56]	; 0x38
 8003f16:	e7bb      	b.n	8003e90 <_dtoa_r+0x1b0>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	dd59      	ble.n	8003fd6 <_dtoa_r+0x2f6>
 8003f22:	9302      	str	r3, [sp, #8]
 8003f24:	4699      	mov	r9, r3
 8003f26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f28:	2200      	movs	r2, #0
 8003f2a:	6072      	str	r2, [r6, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	f102 0014 	add.w	r0, r2, #20
 8003f32:	4298      	cmp	r0, r3
 8003f34:	6871      	ldr	r1, [r6, #4]
 8003f36:	d953      	bls.n	8003fe0 <_dtoa_r+0x300>
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fe88 	bl	8004c4e <_Balloc>
 8003f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f40:	6030      	str	r0, [r6, #0]
 8003f42:	f1b9 0f0e 	cmp.w	r9, #14
 8003f46:	f8d3 b000 	ldr.w	fp, [r3]
 8003f4a:	f200 80e6 	bhi.w	800411a <_dtoa_r+0x43a>
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	f000 80e3 	beq.w	800411a <_dtoa_r+0x43a>
 8003f54:	ed9d 7b00 	vldr	d7, [sp]
 8003f58:	f1ba 0f00 	cmp.w	sl, #0
 8003f5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003f60:	dd74      	ble.n	800404c <_dtoa_r+0x36c>
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <_dtoa_r+0x32c>)
 8003f64:	f00a 030f 	and.w	r3, sl, #15
 8003f68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f6c:	ed93 7b00 	vldr	d7, [r3]
 8003f70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003f74:	06f0      	lsls	r0, r6, #27
 8003f76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f7a:	d565      	bpl.n	8004048 <_dtoa_r+0x368>
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <_dtoa_r+0x330>)
 8003f7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f86:	f7fc fc0d 	bl	80007a4 <__aeabi_ddiv>
 8003f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8003f8e:	f006 060f 	and.w	r6, r6, #15
 8003f92:	2503      	movs	r5, #3
 8003f94:	4f1e      	ldr	r7, [pc, #120]	; (8004010 <_dtoa_r+0x330>)
 8003f96:	e04c      	b.n	8004032 <_dtoa_r+0x352>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f9e:	4453      	add	r3, sl
 8003fa0:	f103 0901 	add.w	r9, r3, #1
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	bfb8      	it	lt
 8003fac:	2301      	movlt	r3, #1
 8003fae:	e7ba      	b.n	8003f26 <_dtoa_r+0x246>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e7b2      	b.n	8003f1a <_dtoa_r+0x23a>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e7f0      	b.n	8003f9a <_dtoa_r+0x2ba>
 8003fb8:	2501      	movs	r5, #1
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9306      	str	r3, [sp, #24]
 8003fbe:	950a      	str	r5, [sp, #40]	; 0x28
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	4699      	mov	r9, r3
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2312      	movs	r3, #18
 8003fcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fce:	e7aa      	b.n	8003f26 <_dtoa_r+0x246>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8003fd4:	e7f4      	b.n	8003fc0 <_dtoa_r+0x2e0>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	9302      	str	r3, [sp, #8]
 8003fda:	4699      	mov	r9, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	e7f5      	b.n	8003fcc <_dtoa_r+0x2ec>
 8003fe0:	3101      	adds	r1, #1
 8003fe2:	6071      	str	r1, [r6, #4]
 8003fe4:	0052      	lsls	r2, r2, #1
 8003fe6:	e7a2      	b.n	8003f2e <_dtoa_r+0x24e>
 8003fe8:	636f4361 	.word	0x636f4361
 8003fec:	3fd287a7 	.word	0x3fd287a7
 8003ff0:	8b60c8b3 	.word	0x8b60c8b3
 8003ff4:	3fc68a28 	.word	0x3fc68a28
 8003ff8:	509f79fb 	.word	0x509f79fb
 8003ffc:	3fd34413 	.word	0x3fd34413
 8004000:	7ff00000 	.word	0x7ff00000
 8004004:	08005591 	.word	0x08005591
 8004008:	3ff80000 	.word	0x3ff80000
 800400c:	08005628 	.word	0x08005628
 8004010:	08005600 	.word	0x08005600
 8004014:	0800559b 	.word	0x0800559b
 8004018:	07f1      	lsls	r1, r6, #31
 800401a:	d508      	bpl.n	800402e <_dtoa_r+0x34e>
 800401c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004024:	f7fc fa94 	bl	8000550 <__aeabi_dmul>
 8004028:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800402c:	3501      	adds	r5, #1
 800402e:	1076      	asrs	r6, r6, #1
 8004030:	3708      	adds	r7, #8
 8004032:	2e00      	cmp	r6, #0
 8004034:	d1f0      	bne.n	8004018 <_dtoa_r+0x338>
 8004036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800403a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800403e:	f7fc fbb1 	bl	80007a4 <__aeabi_ddiv>
 8004042:	e9cd 0100 	strd	r0, r1, [sp]
 8004046:	e01a      	b.n	800407e <_dtoa_r+0x39e>
 8004048:	2502      	movs	r5, #2
 800404a:	e7a3      	b.n	8003f94 <_dtoa_r+0x2b4>
 800404c:	f000 80a0 	beq.w	8004190 <_dtoa_r+0x4b0>
 8004050:	f1ca 0600 	rsb	r6, sl, #0
 8004054:	4b9f      	ldr	r3, [pc, #636]	; (80042d4 <_dtoa_r+0x5f4>)
 8004056:	4fa0      	ldr	r7, [pc, #640]	; (80042d8 <_dtoa_r+0x5f8>)
 8004058:	f006 020f 	and.w	r2, r6, #15
 800405c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004068:	f7fc fa72 	bl	8000550 <__aeabi_dmul>
 800406c:	e9cd 0100 	strd	r0, r1, [sp]
 8004070:	1136      	asrs	r6, r6, #4
 8004072:	2300      	movs	r3, #0
 8004074:	2502      	movs	r5, #2
 8004076:	2e00      	cmp	r6, #0
 8004078:	d17f      	bne.n	800417a <_dtoa_r+0x49a>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e1      	bne.n	8004042 <_dtoa_r+0x362>
 800407e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8087 	beq.w	8004194 <_dtoa_r+0x4b4>
 8004086:	e9dd 6700 	ldrd	r6, r7, [sp]
 800408a:	2200      	movs	r2, #0
 800408c:	4b93      	ldr	r3, [pc, #588]	; (80042dc <_dtoa_r+0x5fc>)
 800408e:	4630      	mov	r0, r6
 8004090:	4639      	mov	r1, r7
 8004092:	f7fc fccf 	bl	8000a34 <__aeabi_dcmplt>
 8004096:	2800      	cmp	r0, #0
 8004098:	d07c      	beq.n	8004194 <_dtoa_r+0x4b4>
 800409a:	f1b9 0f00 	cmp.w	r9, #0
 800409e:	d079      	beq.n	8004194 <_dtoa_r+0x4b4>
 80040a0:	9b02      	ldr	r3, [sp, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	dd35      	ble.n	8004112 <_dtoa_r+0x432>
 80040a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80040aa:	9308      	str	r3, [sp, #32]
 80040ac:	4639      	mov	r1, r7
 80040ae:	2200      	movs	r2, #0
 80040b0:	4b8b      	ldr	r3, [pc, #556]	; (80042e0 <_dtoa_r+0x600>)
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7fc fa4c 	bl	8000550 <__aeabi_dmul>
 80040b8:	e9cd 0100 	strd	r0, r1, [sp]
 80040bc:	9f02      	ldr	r7, [sp, #8]
 80040be:	3501      	adds	r5, #1
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7fc f9db 	bl	800047c <__aeabi_i2d>
 80040c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040ca:	f7fc fa41 	bl	8000550 <__aeabi_dmul>
 80040ce:	2200      	movs	r2, #0
 80040d0:	4b84      	ldr	r3, [pc, #528]	; (80042e4 <_dtoa_r+0x604>)
 80040d2:	f7fc f887 	bl	80001e4 <__adddf3>
 80040d6:	4605      	mov	r5, r0
 80040d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040dc:	2f00      	cmp	r7, #0
 80040de:	d15d      	bne.n	800419c <_dtoa_r+0x4bc>
 80040e0:	2200      	movs	r2, #0
 80040e2:	4b81      	ldr	r3, [pc, #516]	; (80042e8 <_dtoa_r+0x608>)
 80040e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040e8:	f7fc f87a 	bl	80001e0 <__aeabi_dsub>
 80040ec:	462a      	mov	r2, r5
 80040ee:	4633      	mov	r3, r6
 80040f0:	e9cd 0100 	strd	r0, r1, [sp]
 80040f4:	f7fc fcbc 	bl	8000a70 <__aeabi_dcmpgt>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	f040 8288 	bne.w	800460e <_dtoa_r+0x92e>
 80040fe:	462a      	mov	r2, r5
 8004100:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004108:	f7fc fc94 	bl	8000a34 <__aeabi_dcmplt>
 800410c:	2800      	cmp	r0, #0
 800410e:	f040 827c 	bne.w	800460a <_dtoa_r+0x92a>
 8004112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004116:	e9cd 2300 	strd	r2, r3, [sp]
 800411a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800411c:	2b00      	cmp	r3, #0
 800411e:	f2c0 8150 	blt.w	80043c2 <_dtoa_r+0x6e2>
 8004122:	f1ba 0f0e 	cmp.w	sl, #14
 8004126:	f300 814c 	bgt.w	80043c2 <_dtoa_r+0x6e2>
 800412a:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <_dtoa_r+0x5f4>)
 800412c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004130:	ed93 7b00 	vldr	d7, [r3]
 8004134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004136:	2b00      	cmp	r3, #0
 8004138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800413c:	f280 80d8 	bge.w	80042f0 <_dtoa_r+0x610>
 8004140:	f1b9 0f00 	cmp.w	r9, #0
 8004144:	f300 80d4 	bgt.w	80042f0 <_dtoa_r+0x610>
 8004148:	f040 825e 	bne.w	8004608 <_dtoa_r+0x928>
 800414c:	2200      	movs	r2, #0
 800414e:	4b66      	ldr	r3, [pc, #408]	; (80042e8 <_dtoa_r+0x608>)
 8004150:	ec51 0b17 	vmov	r0, r1, d7
 8004154:	f7fc f9fc 	bl	8000550 <__aeabi_dmul>
 8004158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800415c:	f7fc fc7e 	bl	8000a5c <__aeabi_dcmpge>
 8004160:	464f      	mov	r7, r9
 8004162:	464e      	mov	r6, r9
 8004164:	2800      	cmp	r0, #0
 8004166:	f040 8234 	bne.w	80045d2 <_dtoa_r+0x8f2>
 800416a:	2331      	movs	r3, #49	; 0x31
 800416c:	f10b 0501 	add.w	r5, fp, #1
 8004170:	f88b 3000 	strb.w	r3, [fp]
 8004174:	f10a 0a01 	add.w	sl, sl, #1
 8004178:	e22f      	b.n	80045da <_dtoa_r+0x8fa>
 800417a:	07f2      	lsls	r2, r6, #31
 800417c:	d505      	bpl.n	800418a <_dtoa_r+0x4aa>
 800417e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004182:	f7fc f9e5 	bl	8000550 <__aeabi_dmul>
 8004186:	3501      	adds	r5, #1
 8004188:	2301      	movs	r3, #1
 800418a:	1076      	asrs	r6, r6, #1
 800418c:	3708      	adds	r7, #8
 800418e:	e772      	b.n	8004076 <_dtoa_r+0x396>
 8004190:	2502      	movs	r5, #2
 8004192:	e774      	b.n	800407e <_dtoa_r+0x39e>
 8004194:	f8cd a020 	str.w	sl, [sp, #32]
 8004198:	464f      	mov	r7, r9
 800419a:	e791      	b.n	80040c0 <_dtoa_r+0x3e0>
 800419c:	4b4d      	ldr	r3, [pc, #308]	; (80042d4 <_dtoa_r+0x5f4>)
 800419e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80041a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d047      	beq.n	800423c <_dtoa_r+0x55c>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	2000      	movs	r0, #0
 80041b2:	494e      	ldr	r1, [pc, #312]	; (80042ec <_dtoa_r+0x60c>)
 80041b4:	f7fc faf6 	bl	80007a4 <__aeabi_ddiv>
 80041b8:	462a      	mov	r2, r5
 80041ba:	4633      	mov	r3, r6
 80041bc:	f7fc f810 	bl	80001e0 <__aeabi_dsub>
 80041c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041c4:	465d      	mov	r5, fp
 80041c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ca:	f7fc fc71 	bl	8000ab0 <__aeabi_d2iz>
 80041ce:	4606      	mov	r6, r0
 80041d0:	f7fc f954 	bl	800047c <__aeabi_i2d>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041dc:	f7fc f800 	bl	80001e0 <__aeabi_dsub>
 80041e0:	3630      	adds	r6, #48	; 0x30
 80041e2:	f805 6b01 	strb.w	r6, [r5], #1
 80041e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80041ea:	e9cd 0100 	strd	r0, r1, [sp]
 80041ee:	f7fc fc21 	bl	8000a34 <__aeabi_dcmplt>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d163      	bne.n	80042be <_dtoa_r+0x5de>
 80041f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041fa:	2000      	movs	r0, #0
 80041fc:	4937      	ldr	r1, [pc, #220]	; (80042dc <_dtoa_r+0x5fc>)
 80041fe:	f7fb ffef 	bl	80001e0 <__aeabi_dsub>
 8004202:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004206:	f7fc fc15 	bl	8000a34 <__aeabi_dcmplt>
 800420a:	2800      	cmp	r0, #0
 800420c:	f040 80b7 	bne.w	800437e <_dtoa_r+0x69e>
 8004210:	eba5 030b 	sub.w	r3, r5, fp
 8004214:	429f      	cmp	r7, r3
 8004216:	f77f af7c 	ble.w	8004112 <_dtoa_r+0x432>
 800421a:	2200      	movs	r2, #0
 800421c:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <_dtoa_r+0x600>)
 800421e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004222:	f7fc f995 	bl	8000550 <__aeabi_dmul>
 8004226:	2200      	movs	r2, #0
 8004228:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800422c:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <_dtoa_r+0x600>)
 800422e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004232:	f7fc f98d 	bl	8000550 <__aeabi_dmul>
 8004236:	e9cd 0100 	strd	r0, r1, [sp]
 800423a:	e7c4      	b.n	80041c6 <_dtoa_r+0x4e6>
 800423c:	462a      	mov	r2, r5
 800423e:	4633      	mov	r3, r6
 8004240:	f7fc f986 	bl	8000550 <__aeabi_dmul>
 8004244:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004248:	eb0b 0507 	add.w	r5, fp, r7
 800424c:	465e      	mov	r6, fp
 800424e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004252:	f7fc fc2d 	bl	8000ab0 <__aeabi_d2iz>
 8004256:	4607      	mov	r7, r0
 8004258:	f7fc f910 	bl	800047c <__aeabi_i2d>
 800425c:	3730      	adds	r7, #48	; 0x30
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004266:	f7fb ffbb 	bl	80001e0 <__aeabi_dsub>
 800426a:	f806 7b01 	strb.w	r7, [r6], #1
 800426e:	42ae      	cmp	r6, r5
 8004270:	e9cd 0100 	strd	r0, r1, [sp]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	d126      	bne.n	80042c8 <_dtoa_r+0x5e8>
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <_dtoa_r+0x60c>)
 800427c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004280:	f7fb ffb0 	bl	80001e4 <__adddf3>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800428c:	f7fc fbf0 	bl	8000a70 <__aeabi_dcmpgt>
 8004290:	2800      	cmp	r0, #0
 8004292:	d174      	bne.n	800437e <_dtoa_r+0x69e>
 8004294:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004298:	2000      	movs	r0, #0
 800429a:	4914      	ldr	r1, [pc, #80]	; (80042ec <_dtoa_r+0x60c>)
 800429c:	f7fb ffa0 	bl	80001e0 <__aeabi_dsub>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a8:	f7fc fbc4 	bl	8000a34 <__aeabi_dcmplt>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f43f af30 	beq.w	8004112 <_dtoa_r+0x432>
 80042b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80042bc:	d002      	beq.n	80042c4 <_dtoa_r+0x5e4>
 80042be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80042c2:	e04a      	b.n	800435a <_dtoa_r+0x67a>
 80042c4:	4615      	mov	r5, r2
 80042c6:	e7f4      	b.n	80042b2 <_dtoa_r+0x5d2>
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <_dtoa_r+0x600>)
 80042ca:	f7fc f941 	bl	8000550 <__aeabi_dmul>
 80042ce:	e9cd 0100 	strd	r0, r1, [sp]
 80042d2:	e7bc      	b.n	800424e <_dtoa_r+0x56e>
 80042d4:	08005628 	.word	0x08005628
 80042d8:	08005600 	.word	0x08005600
 80042dc:	3ff00000 	.word	0x3ff00000
 80042e0:	40240000 	.word	0x40240000
 80042e4:	401c0000 	.word	0x401c0000
 80042e8:	40140000 	.word	0x40140000
 80042ec:	3fe00000 	.word	0x3fe00000
 80042f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80042f4:	465d      	mov	r5, fp
 80042f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fc fa51 	bl	80007a4 <__aeabi_ddiv>
 8004302:	f7fc fbd5 	bl	8000ab0 <__aeabi_d2iz>
 8004306:	4680      	mov	r8, r0
 8004308:	f7fc f8b8 	bl	800047c <__aeabi_i2d>
 800430c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004310:	f7fc f91e 	bl	8000550 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4630      	mov	r0, r6
 800431a:	4639      	mov	r1, r7
 800431c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004320:	f7fb ff5e 	bl	80001e0 <__aeabi_dsub>
 8004324:	f805 6b01 	strb.w	r6, [r5], #1
 8004328:	eba5 060b 	sub.w	r6, r5, fp
 800432c:	45b1      	cmp	r9, r6
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	d139      	bne.n	80043a8 <_dtoa_r+0x6c8>
 8004334:	f7fb ff56 	bl	80001e4 <__adddf3>
 8004338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800433c:	4606      	mov	r6, r0
 800433e:	460f      	mov	r7, r1
 8004340:	f7fc fb96 	bl	8000a70 <__aeabi_dcmpgt>
 8004344:	b9c8      	cbnz	r0, 800437a <_dtoa_r+0x69a>
 8004346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800434a:	4630      	mov	r0, r6
 800434c:	4639      	mov	r1, r7
 800434e:	f7fc fb67 	bl	8000a20 <__aeabi_dcmpeq>
 8004352:	b110      	cbz	r0, 800435a <_dtoa_r+0x67a>
 8004354:	f018 0f01 	tst.w	r8, #1
 8004358:	d10f      	bne.n	800437a <_dtoa_r+0x69a>
 800435a:	9904      	ldr	r1, [sp, #16]
 800435c:	4620      	mov	r0, r4
 800435e:	f000 fcaa 	bl	8004cb6 <_Bfree>
 8004362:	2300      	movs	r3, #0
 8004364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004366:	702b      	strb	r3, [r5, #0]
 8004368:	f10a 0301 	add.w	r3, sl, #1
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8241 	beq.w	80047f8 <_dtoa_r+0xb18>
 8004376:	601d      	str	r5, [r3, #0]
 8004378:	e23e      	b.n	80047f8 <_dtoa_r+0xb18>
 800437a:	f8cd a020 	str.w	sl, [sp, #32]
 800437e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004382:	2a39      	cmp	r2, #57	; 0x39
 8004384:	f105 33ff 	add.w	r3, r5, #4294967295
 8004388:	d108      	bne.n	800439c <_dtoa_r+0x6bc>
 800438a:	459b      	cmp	fp, r3
 800438c:	d10a      	bne.n	80043a4 <_dtoa_r+0x6c4>
 800438e:	9b08      	ldr	r3, [sp, #32]
 8004390:	3301      	adds	r3, #1
 8004392:	9308      	str	r3, [sp, #32]
 8004394:	2330      	movs	r3, #48	; 0x30
 8004396:	f88b 3000 	strb.w	r3, [fp]
 800439a:	465b      	mov	r3, fp
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	3201      	adds	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	e78c      	b.n	80042be <_dtoa_r+0x5de>
 80043a4:	461d      	mov	r5, r3
 80043a6:	e7ea      	b.n	800437e <_dtoa_r+0x69e>
 80043a8:	2200      	movs	r2, #0
 80043aa:	4b9b      	ldr	r3, [pc, #620]	; (8004618 <_dtoa_r+0x938>)
 80043ac:	f7fc f8d0 	bl	8000550 <__aeabi_dmul>
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	4606      	mov	r6, r0
 80043b6:	460f      	mov	r7, r1
 80043b8:	f7fc fb32 	bl	8000a20 <__aeabi_dcmpeq>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d09a      	beq.n	80042f6 <_dtoa_r+0x616>
 80043c0:	e7cb      	b.n	800435a <_dtoa_r+0x67a>
 80043c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	f000 808b 	beq.w	80044e0 <_dtoa_r+0x800>
 80043ca:	9a06      	ldr	r2, [sp, #24]
 80043cc:	2a01      	cmp	r2, #1
 80043ce:	dc6e      	bgt.n	80044ae <_dtoa_r+0x7ce>
 80043d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	d067      	beq.n	80044a6 <_dtoa_r+0x7c6>
 80043d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043da:	9f07      	ldr	r7, [sp, #28]
 80043dc:	9d05      	ldr	r5, [sp, #20]
 80043de:	9a05      	ldr	r2, [sp, #20]
 80043e0:	2101      	movs	r1, #1
 80043e2:	441a      	add	r2, r3
 80043e4:	4620      	mov	r0, r4
 80043e6:	9205      	str	r2, [sp, #20]
 80043e8:	4498      	add	r8, r3
 80043ea:	f000 fd04 	bl	8004df6 <__i2b>
 80043ee:	4606      	mov	r6, r0
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	dd0c      	ble.n	800440e <_dtoa_r+0x72e>
 80043f4:	f1b8 0f00 	cmp.w	r8, #0
 80043f8:	dd09      	ble.n	800440e <_dtoa_r+0x72e>
 80043fa:	4545      	cmp	r5, r8
 80043fc:	9a05      	ldr	r2, [sp, #20]
 80043fe:	462b      	mov	r3, r5
 8004400:	bfa8      	it	ge
 8004402:	4643      	movge	r3, r8
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	9205      	str	r2, [sp, #20]
 8004408:	1aed      	subs	r5, r5, r3
 800440a:	eba8 0803 	sub.w	r8, r8, r3
 800440e:	9b07      	ldr	r3, [sp, #28]
 8004410:	b1eb      	cbz	r3, 800444e <_dtoa_r+0x76e>
 8004412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004414:	2b00      	cmp	r3, #0
 8004416:	d067      	beq.n	80044e8 <_dtoa_r+0x808>
 8004418:	b18f      	cbz	r7, 800443e <_dtoa_r+0x75e>
 800441a:	4631      	mov	r1, r6
 800441c:	463a      	mov	r2, r7
 800441e:	4620      	mov	r0, r4
 8004420:	f000 fd88 	bl	8004f34 <__pow5mult>
 8004424:	9a04      	ldr	r2, [sp, #16]
 8004426:	4601      	mov	r1, r0
 8004428:	4606      	mov	r6, r0
 800442a:	4620      	mov	r0, r4
 800442c:	f000 fcec 	bl	8004e08 <__multiply>
 8004430:	9904      	ldr	r1, [sp, #16]
 8004432:	9008      	str	r0, [sp, #32]
 8004434:	4620      	mov	r0, r4
 8004436:	f000 fc3e 	bl	8004cb6 <_Bfree>
 800443a:	9b08      	ldr	r3, [sp, #32]
 800443c:	9304      	str	r3, [sp, #16]
 800443e:	9b07      	ldr	r3, [sp, #28]
 8004440:	1bda      	subs	r2, r3, r7
 8004442:	d004      	beq.n	800444e <_dtoa_r+0x76e>
 8004444:	9904      	ldr	r1, [sp, #16]
 8004446:	4620      	mov	r0, r4
 8004448:	f000 fd74 	bl	8004f34 <__pow5mult>
 800444c:	9004      	str	r0, [sp, #16]
 800444e:	2101      	movs	r1, #1
 8004450:	4620      	mov	r0, r4
 8004452:	f000 fcd0 	bl	8004df6 <__i2b>
 8004456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004458:	4607      	mov	r7, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 81d0 	beq.w	8004800 <_dtoa_r+0xb20>
 8004460:	461a      	mov	r2, r3
 8004462:	4601      	mov	r1, r0
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fd65 	bl	8004f34 <__pow5mult>
 800446a:	9b06      	ldr	r3, [sp, #24]
 800446c:	2b01      	cmp	r3, #1
 800446e:	4607      	mov	r7, r0
 8004470:	dc40      	bgt.n	80044f4 <_dtoa_r+0x814>
 8004472:	9b00      	ldr	r3, [sp, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d139      	bne.n	80044ec <_dtoa_r+0x80c>
 8004478:	9b01      	ldr	r3, [sp, #4]
 800447a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447e:	2b00      	cmp	r3, #0
 8004480:	d136      	bne.n	80044f0 <_dtoa_r+0x810>
 8004482:	9b01      	ldr	r3, [sp, #4]
 8004484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004488:	0d1b      	lsrs	r3, r3, #20
 800448a:	051b      	lsls	r3, r3, #20
 800448c:	b12b      	cbz	r3, 800449a <_dtoa_r+0x7ba>
 800448e:	9b05      	ldr	r3, [sp, #20]
 8004490:	3301      	adds	r3, #1
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	f108 0801 	add.w	r8, r8, #1
 8004498:	2301      	movs	r3, #1
 800449a:	9307      	str	r3, [sp, #28]
 800449c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d12a      	bne.n	80044f8 <_dtoa_r+0x818>
 80044a2:	2001      	movs	r0, #1
 80044a4:	e030      	b.n	8004508 <_dtoa_r+0x828>
 80044a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044ac:	e795      	b.n	80043da <_dtoa_r+0x6fa>
 80044ae:	9b07      	ldr	r3, [sp, #28]
 80044b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80044b4:	42bb      	cmp	r3, r7
 80044b6:	bfbf      	itttt	lt
 80044b8:	9b07      	ldrlt	r3, [sp, #28]
 80044ba:	9707      	strlt	r7, [sp, #28]
 80044bc:	1afa      	sublt	r2, r7, r3
 80044be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80044c0:	bfbb      	ittet	lt
 80044c2:	189b      	addlt	r3, r3, r2
 80044c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80044c6:	1bdf      	subge	r7, r3, r7
 80044c8:	2700      	movlt	r7, #0
 80044ca:	f1b9 0f00 	cmp.w	r9, #0
 80044ce:	bfb5      	itete	lt
 80044d0:	9b05      	ldrlt	r3, [sp, #20]
 80044d2:	9d05      	ldrge	r5, [sp, #20]
 80044d4:	eba3 0509 	sublt.w	r5, r3, r9
 80044d8:	464b      	movge	r3, r9
 80044da:	bfb8      	it	lt
 80044dc:	2300      	movlt	r3, #0
 80044de:	e77e      	b.n	80043de <_dtoa_r+0x6fe>
 80044e0:	9f07      	ldr	r7, [sp, #28]
 80044e2:	9d05      	ldr	r5, [sp, #20]
 80044e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80044e6:	e783      	b.n	80043f0 <_dtoa_r+0x710>
 80044e8:	9a07      	ldr	r2, [sp, #28]
 80044ea:	e7ab      	b.n	8004444 <_dtoa_r+0x764>
 80044ec:	2300      	movs	r3, #0
 80044ee:	e7d4      	b.n	800449a <_dtoa_r+0x7ba>
 80044f0:	9b00      	ldr	r3, [sp, #0]
 80044f2:	e7d2      	b.n	800449a <_dtoa_r+0x7ba>
 80044f4:	2300      	movs	r3, #0
 80044f6:	9307      	str	r3, [sp, #28]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80044fe:	6918      	ldr	r0, [r3, #16]
 8004500:	f000 fc2b 	bl	8004d5a <__hi0bits>
 8004504:	f1c0 0020 	rsb	r0, r0, #32
 8004508:	4440      	add	r0, r8
 800450a:	f010 001f 	ands.w	r0, r0, #31
 800450e:	d047      	beq.n	80045a0 <_dtoa_r+0x8c0>
 8004510:	f1c0 0320 	rsb	r3, r0, #32
 8004514:	2b04      	cmp	r3, #4
 8004516:	dd3b      	ble.n	8004590 <_dtoa_r+0x8b0>
 8004518:	9b05      	ldr	r3, [sp, #20]
 800451a:	f1c0 001c 	rsb	r0, r0, #28
 800451e:	4403      	add	r3, r0
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	4405      	add	r5, r0
 8004524:	4480      	add	r8, r0
 8004526:	9b05      	ldr	r3, [sp, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	dd05      	ble.n	8004538 <_dtoa_r+0x858>
 800452c:	461a      	mov	r2, r3
 800452e:	9904      	ldr	r1, [sp, #16]
 8004530:	4620      	mov	r0, r4
 8004532:	f000 fd4d 	bl	8004fd0 <__lshift>
 8004536:	9004      	str	r0, [sp, #16]
 8004538:	f1b8 0f00 	cmp.w	r8, #0
 800453c:	dd05      	ble.n	800454a <_dtoa_r+0x86a>
 800453e:	4639      	mov	r1, r7
 8004540:	4642      	mov	r2, r8
 8004542:	4620      	mov	r0, r4
 8004544:	f000 fd44 	bl	8004fd0 <__lshift>
 8004548:	4607      	mov	r7, r0
 800454a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800454c:	b353      	cbz	r3, 80045a4 <_dtoa_r+0x8c4>
 800454e:	4639      	mov	r1, r7
 8004550:	9804      	ldr	r0, [sp, #16]
 8004552:	f000 fd91 	bl	8005078 <__mcmp>
 8004556:	2800      	cmp	r0, #0
 8004558:	da24      	bge.n	80045a4 <_dtoa_r+0x8c4>
 800455a:	2300      	movs	r3, #0
 800455c:	220a      	movs	r2, #10
 800455e:	9904      	ldr	r1, [sp, #16]
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fbbf 	bl	8004ce4 <__multadd>
 8004566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004568:	9004      	str	r0, [sp, #16]
 800456a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 814d 	beq.w	800480e <_dtoa_r+0xb2e>
 8004574:	2300      	movs	r3, #0
 8004576:	4631      	mov	r1, r6
 8004578:	220a      	movs	r2, #10
 800457a:	4620      	mov	r0, r4
 800457c:	f000 fbb2 	bl	8004ce4 <__multadd>
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	4606      	mov	r6, r0
 8004586:	dc4f      	bgt.n	8004628 <_dtoa_r+0x948>
 8004588:	9b06      	ldr	r3, [sp, #24]
 800458a:	2b02      	cmp	r3, #2
 800458c:	dd4c      	ble.n	8004628 <_dtoa_r+0x948>
 800458e:	e011      	b.n	80045b4 <_dtoa_r+0x8d4>
 8004590:	d0c9      	beq.n	8004526 <_dtoa_r+0x846>
 8004592:	9a05      	ldr	r2, [sp, #20]
 8004594:	331c      	adds	r3, #28
 8004596:	441a      	add	r2, r3
 8004598:	9205      	str	r2, [sp, #20]
 800459a:	441d      	add	r5, r3
 800459c:	4498      	add	r8, r3
 800459e:	e7c2      	b.n	8004526 <_dtoa_r+0x846>
 80045a0:	4603      	mov	r3, r0
 80045a2:	e7f6      	b.n	8004592 <_dtoa_r+0x8b2>
 80045a4:	f1b9 0f00 	cmp.w	r9, #0
 80045a8:	dc38      	bgt.n	800461c <_dtoa_r+0x93c>
 80045aa:	9b06      	ldr	r3, [sp, #24]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	dd35      	ble.n	800461c <_dtoa_r+0x93c>
 80045b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80045b4:	9b02      	ldr	r3, [sp, #8]
 80045b6:	b963      	cbnz	r3, 80045d2 <_dtoa_r+0x8f2>
 80045b8:	4639      	mov	r1, r7
 80045ba:	2205      	movs	r2, #5
 80045bc:	4620      	mov	r0, r4
 80045be:	f000 fb91 	bl	8004ce4 <__multadd>
 80045c2:	4601      	mov	r1, r0
 80045c4:	4607      	mov	r7, r0
 80045c6:	9804      	ldr	r0, [sp, #16]
 80045c8:	f000 fd56 	bl	8005078 <__mcmp>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f73f adcc 	bgt.w	800416a <_dtoa_r+0x48a>
 80045d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045d4:	465d      	mov	r5, fp
 80045d6:	ea6f 0a03 	mvn.w	sl, r3
 80045da:	f04f 0900 	mov.w	r9, #0
 80045de:	4639      	mov	r1, r7
 80045e0:	4620      	mov	r0, r4
 80045e2:	f000 fb68 	bl	8004cb6 <_Bfree>
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	f43f aeb7 	beq.w	800435a <_dtoa_r+0x67a>
 80045ec:	f1b9 0f00 	cmp.w	r9, #0
 80045f0:	d005      	beq.n	80045fe <_dtoa_r+0x91e>
 80045f2:	45b1      	cmp	r9, r6
 80045f4:	d003      	beq.n	80045fe <_dtoa_r+0x91e>
 80045f6:	4649      	mov	r1, r9
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 fb5c 	bl	8004cb6 <_Bfree>
 80045fe:	4631      	mov	r1, r6
 8004600:	4620      	mov	r0, r4
 8004602:	f000 fb58 	bl	8004cb6 <_Bfree>
 8004606:	e6a8      	b.n	800435a <_dtoa_r+0x67a>
 8004608:	2700      	movs	r7, #0
 800460a:	463e      	mov	r6, r7
 800460c:	e7e1      	b.n	80045d2 <_dtoa_r+0x8f2>
 800460e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004612:	463e      	mov	r6, r7
 8004614:	e5a9      	b.n	800416a <_dtoa_r+0x48a>
 8004616:	bf00      	nop
 8004618:	40240000 	.word	0x40240000
 800461c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800461e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80fa 	beq.w	800481c <_dtoa_r+0xb3c>
 8004628:	2d00      	cmp	r5, #0
 800462a:	dd05      	ble.n	8004638 <_dtoa_r+0x958>
 800462c:	4631      	mov	r1, r6
 800462e:	462a      	mov	r2, r5
 8004630:	4620      	mov	r0, r4
 8004632:	f000 fccd 	bl	8004fd0 <__lshift>
 8004636:	4606      	mov	r6, r0
 8004638:	9b07      	ldr	r3, [sp, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04c      	beq.n	80046d8 <_dtoa_r+0x9f8>
 800463e:	6871      	ldr	r1, [r6, #4]
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fb04 	bl	8004c4e <_Balloc>
 8004646:	6932      	ldr	r2, [r6, #16]
 8004648:	3202      	adds	r2, #2
 800464a:	4605      	mov	r5, r0
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	f106 010c 	add.w	r1, r6, #12
 8004652:	300c      	adds	r0, #12
 8004654:	f000 faf0 	bl	8004c38 <memcpy>
 8004658:	2201      	movs	r2, #1
 800465a:	4629      	mov	r1, r5
 800465c:	4620      	mov	r0, r4
 800465e:	f000 fcb7 	bl	8004fd0 <__lshift>
 8004662:	9b00      	ldr	r3, [sp, #0]
 8004664:	f8cd b014 	str.w	fp, [sp, #20]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	46b1      	mov	r9, r6
 800466e:	9307      	str	r3, [sp, #28]
 8004670:	4606      	mov	r6, r0
 8004672:	4639      	mov	r1, r7
 8004674:	9804      	ldr	r0, [sp, #16]
 8004676:	f7ff faa7 	bl	8003bc8 <quorem>
 800467a:	4649      	mov	r1, r9
 800467c:	4605      	mov	r5, r0
 800467e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004682:	9804      	ldr	r0, [sp, #16]
 8004684:	f000 fcf8 	bl	8005078 <__mcmp>
 8004688:	4632      	mov	r2, r6
 800468a:	9000      	str	r0, [sp, #0]
 800468c:	4639      	mov	r1, r7
 800468e:	4620      	mov	r0, r4
 8004690:	f000 fd0c 	bl	80050ac <__mdiff>
 8004694:	68c3      	ldr	r3, [r0, #12]
 8004696:	4602      	mov	r2, r0
 8004698:	bb03      	cbnz	r3, 80046dc <_dtoa_r+0x9fc>
 800469a:	4601      	mov	r1, r0
 800469c:	9008      	str	r0, [sp, #32]
 800469e:	9804      	ldr	r0, [sp, #16]
 80046a0:	f000 fcea 	bl	8005078 <__mcmp>
 80046a4:	9a08      	ldr	r2, [sp, #32]
 80046a6:	4603      	mov	r3, r0
 80046a8:	4611      	mov	r1, r2
 80046aa:	4620      	mov	r0, r4
 80046ac:	9308      	str	r3, [sp, #32]
 80046ae:	f000 fb02 	bl	8004cb6 <_Bfree>
 80046b2:	9b08      	ldr	r3, [sp, #32]
 80046b4:	b9a3      	cbnz	r3, 80046e0 <_dtoa_r+0xa00>
 80046b6:	9a06      	ldr	r2, [sp, #24]
 80046b8:	b992      	cbnz	r2, 80046e0 <_dtoa_r+0xa00>
 80046ba:	9a07      	ldr	r2, [sp, #28]
 80046bc:	b982      	cbnz	r2, 80046e0 <_dtoa_r+0xa00>
 80046be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80046c2:	d029      	beq.n	8004718 <_dtoa_r+0xa38>
 80046c4:	9b00      	ldr	r3, [sp, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dd01      	ble.n	80046ce <_dtoa_r+0x9ee>
 80046ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80046ce:	9b05      	ldr	r3, [sp, #20]
 80046d0:	1c5d      	adds	r5, r3, #1
 80046d2:	f883 8000 	strb.w	r8, [r3]
 80046d6:	e782      	b.n	80045de <_dtoa_r+0x8fe>
 80046d8:	4630      	mov	r0, r6
 80046da:	e7c2      	b.n	8004662 <_dtoa_r+0x982>
 80046dc:	2301      	movs	r3, #1
 80046de:	e7e3      	b.n	80046a8 <_dtoa_r+0x9c8>
 80046e0:	9a00      	ldr	r2, [sp, #0]
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	db04      	blt.n	80046f0 <_dtoa_r+0xa10>
 80046e6:	d125      	bne.n	8004734 <_dtoa_r+0xa54>
 80046e8:	9a06      	ldr	r2, [sp, #24]
 80046ea:	bb1a      	cbnz	r2, 8004734 <_dtoa_r+0xa54>
 80046ec:	9a07      	ldr	r2, [sp, #28]
 80046ee:	bb0a      	cbnz	r2, 8004734 <_dtoa_r+0xa54>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	ddec      	ble.n	80046ce <_dtoa_r+0x9ee>
 80046f4:	2201      	movs	r2, #1
 80046f6:	9904      	ldr	r1, [sp, #16]
 80046f8:	4620      	mov	r0, r4
 80046fa:	f000 fc69 	bl	8004fd0 <__lshift>
 80046fe:	4639      	mov	r1, r7
 8004700:	9004      	str	r0, [sp, #16]
 8004702:	f000 fcb9 	bl	8005078 <__mcmp>
 8004706:	2800      	cmp	r0, #0
 8004708:	dc03      	bgt.n	8004712 <_dtoa_r+0xa32>
 800470a:	d1e0      	bne.n	80046ce <_dtoa_r+0x9ee>
 800470c:	f018 0f01 	tst.w	r8, #1
 8004710:	d0dd      	beq.n	80046ce <_dtoa_r+0x9ee>
 8004712:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004716:	d1d8      	bne.n	80046ca <_dtoa_r+0x9ea>
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	9a05      	ldr	r2, [sp, #20]
 800471c:	1c5d      	adds	r5, r3, #1
 800471e:	2339      	movs	r3, #57	; 0x39
 8004720:	7013      	strb	r3, [r2, #0]
 8004722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004726:	2b39      	cmp	r3, #57	; 0x39
 8004728:	f105 32ff 	add.w	r2, r5, #4294967295
 800472c:	d04f      	beq.n	80047ce <_dtoa_r+0xaee>
 800472e:	3301      	adds	r3, #1
 8004730:	7013      	strb	r3, [r2, #0]
 8004732:	e754      	b.n	80045de <_dtoa_r+0x8fe>
 8004734:	9a05      	ldr	r2, [sp, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f102 0501 	add.w	r5, r2, #1
 800473c:	dd06      	ble.n	800474c <_dtoa_r+0xa6c>
 800473e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004742:	d0e9      	beq.n	8004718 <_dtoa_r+0xa38>
 8004744:	f108 0801 	add.w	r8, r8, #1
 8004748:	9b05      	ldr	r3, [sp, #20]
 800474a:	e7c2      	b.n	80046d2 <_dtoa_r+0x9f2>
 800474c:	9a02      	ldr	r2, [sp, #8]
 800474e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004752:	eba5 030b 	sub.w	r3, r5, fp
 8004756:	4293      	cmp	r3, r2
 8004758:	d021      	beq.n	800479e <_dtoa_r+0xabe>
 800475a:	2300      	movs	r3, #0
 800475c:	220a      	movs	r2, #10
 800475e:	9904      	ldr	r1, [sp, #16]
 8004760:	4620      	mov	r0, r4
 8004762:	f000 fabf 	bl	8004ce4 <__multadd>
 8004766:	45b1      	cmp	r9, r6
 8004768:	9004      	str	r0, [sp, #16]
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	f04f 020a 	mov.w	r2, #10
 8004772:	4649      	mov	r1, r9
 8004774:	4620      	mov	r0, r4
 8004776:	d105      	bne.n	8004784 <_dtoa_r+0xaa4>
 8004778:	f000 fab4 	bl	8004ce4 <__multadd>
 800477c:	4681      	mov	r9, r0
 800477e:	4606      	mov	r6, r0
 8004780:	9505      	str	r5, [sp, #20]
 8004782:	e776      	b.n	8004672 <_dtoa_r+0x992>
 8004784:	f000 faae 	bl	8004ce4 <__multadd>
 8004788:	4631      	mov	r1, r6
 800478a:	4681      	mov	r9, r0
 800478c:	2300      	movs	r3, #0
 800478e:	220a      	movs	r2, #10
 8004790:	4620      	mov	r0, r4
 8004792:	f000 faa7 	bl	8004ce4 <__multadd>
 8004796:	4606      	mov	r6, r0
 8004798:	e7f2      	b.n	8004780 <_dtoa_r+0xaa0>
 800479a:	f04f 0900 	mov.w	r9, #0
 800479e:	2201      	movs	r2, #1
 80047a0:	9904      	ldr	r1, [sp, #16]
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 fc14 	bl	8004fd0 <__lshift>
 80047a8:	4639      	mov	r1, r7
 80047aa:	9004      	str	r0, [sp, #16]
 80047ac:	f000 fc64 	bl	8005078 <__mcmp>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	dcb6      	bgt.n	8004722 <_dtoa_r+0xa42>
 80047b4:	d102      	bne.n	80047bc <_dtoa_r+0xadc>
 80047b6:	f018 0f01 	tst.w	r8, #1
 80047ba:	d1b2      	bne.n	8004722 <_dtoa_r+0xa42>
 80047bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80047c6:	f47f af0a 	bne.w	80045de <_dtoa_r+0x8fe>
 80047ca:	4615      	mov	r5, r2
 80047cc:	e7f6      	b.n	80047bc <_dtoa_r+0xadc>
 80047ce:	4593      	cmp	fp, r2
 80047d0:	d105      	bne.n	80047de <_dtoa_r+0xafe>
 80047d2:	2331      	movs	r3, #49	; 0x31
 80047d4:	f10a 0a01 	add.w	sl, sl, #1
 80047d8:	f88b 3000 	strb.w	r3, [fp]
 80047dc:	e6ff      	b.n	80045de <_dtoa_r+0x8fe>
 80047de:	4615      	mov	r5, r2
 80047e0:	e79f      	b.n	8004722 <_dtoa_r+0xa42>
 80047e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004848 <_dtoa_r+0xb68>
 80047e6:	e007      	b.n	80047f8 <_dtoa_r+0xb18>
 80047e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800484c <_dtoa_r+0xb6c>
 80047ee:	b11b      	cbz	r3, 80047f8 <_dtoa_r+0xb18>
 80047f0:	f10b 0308 	add.w	r3, fp, #8
 80047f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4658      	mov	r0, fp
 80047fa:	b017      	add	sp, #92	; 0x5c
 80047fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004800:	9b06      	ldr	r3, [sp, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	f77f ae35 	ble.w	8004472 <_dtoa_r+0x792>
 8004808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800480a:	9307      	str	r3, [sp, #28]
 800480c:	e649      	b.n	80044a2 <_dtoa_r+0x7c2>
 800480e:	9b02      	ldr	r3, [sp, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	dc03      	bgt.n	800481c <_dtoa_r+0xb3c>
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	2b02      	cmp	r3, #2
 8004818:	f73f aecc 	bgt.w	80045b4 <_dtoa_r+0x8d4>
 800481c:	465d      	mov	r5, fp
 800481e:	4639      	mov	r1, r7
 8004820:	9804      	ldr	r0, [sp, #16]
 8004822:	f7ff f9d1 	bl	8003bc8 <quorem>
 8004826:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800482a:	f805 8b01 	strb.w	r8, [r5], #1
 800482e:	9a02      	ldr	r2, [sp, #8]
 8004830:	eba5 030b 	sub.w	r3, r5, fp
 8004834:	429a      	cmp	r2, r3
 8004836:	ddb0      	ble.n	800479a <_dtoa_r+0xaba>
 8004838:	2300      	movs	r3, #0
 800483a:	220a      	movs	r2, #10
 800483c:	9904      	ldr	r1, [sp, #16]
 800483e:	4620      	mov	r0, r4
 8004840:	f000 fa50 	bl	8004ce4 <__multadd>
 8004844:	9004      	str	r0, [sp, #16]
 8004846:	e7ea      	b.n	800481e <_dtoa_r+0xb3e>
 8004848:	08005590 	.word	0x08005590
 800484c:	08005592 	.word	0x08005592

08004850 <__sflush_r>:
 8004850:	898a      	ldrh	r2, [r1, #12]
 8004852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	4605      	mov	r5, r0
 8004858:	0710      	lsls	r0, r2, #28
 800485a:	460c      	mov	r4, r1
 800485c:	d458      	bmi.n	8004910 <__sflush_r+0xc0>
 800485e:	684b      	ldr	r3, [r1, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	dc05      	bgt.n	8004870 <__sflush_r+0x20>
 8004864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	dc02      	bgt.n	8004870 <__sflush_r+0x20>
 800486a:	2000      	movs	r0, #0
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004872:	2e00      	cmp	r6, #0
 8004874:	d0f9      	beq.n	800486a <__sflush_r+0x1a>
 8004876:	2300      	movs	r3, #0
 8004878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800487c:	682f      	ldr	r7, [r5, #0]
 800487e:	6a21      	ldr	r1, [r4, #32]
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	d032      	beq.n	80048ea <__sflush_r+0x9a>
 8004884:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	075a      	lsls	r2, r3, #29
 800488a:	d505      	bpl.n	8004898 <__sflush_r+0x48>
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	1ac0      	subs	r0, r0, r3
 8004890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004892:	b10b      	cbz	r3, 8004898 <__sflush_r+0x48>
 8004894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004896:	1ac0      	subs	r0, r0, r3
 8004898:	2300      	movs	r3, #0
 800489a:	4602      	mov	r2, r0
 800489c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489e:	6a21      	ldr	r1, [r4, #32]
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b0      	blx	r6
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	d106      	bne.n	80048b8 <__sflush_r+0x68>
 80048aa:	6829      	ldr	r1, [r5, #0]
 80048ac:	291d      	cmp	r1, #29
 80048ae:	d848      	bhi.n	8004942 <__sflush_r+0xf2>
 80048b0:	4a29      	ldr	r2, [pc, #164]	; (8004958 <__sflush_r+0x108>)
 80048b2:	40ca      	lsrs	r2, r1
 80048b4:	07d6      	lsls	r6, r2, #31
 80048b6:	d544      	bpl.n	8004942 <__sflush_r+0xf2>
 80048b8:	2200      	movs	r2, #0
 80048ba:	6062      	str	r2, [r4, #4]
 80048bc:	04d9      	lsls	r1, r3, #19
 80048be:	6922      	ldr	r2, [r4, #16]
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	d504      	bpl.n	80048ce <__sflush_r+0x7e>
 80048c4:	1c42      	adds	r2, r0, #1
 80048c6:	d101      	bne.n	80048cc <__sflush_r+0x7c>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b903      	cbnz	r3, 80048ce <__sflush_r+0x7e>
 80048cc:	6560      	str	r0, [r4, #84]	; 0x54
 80048ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048d0:	602f      	str	r7, [r5, #0]
 80048d2:	2900      	cmp	r1, #0
 80048d4:	d0c9      	beq.n	800486a <__sflush_r+0x1a>
 80048d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048da:	4299      	cmp	r1, r3
 80048dc:	d002      	beq.n	80048e4 <__sflush_r+0x94>
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 fc9e 	bl	8005220 <_free_r>
 80048e4:	2000      	movs	r0, #0
 80048e6:	6360      	str	r0, [r4, #52]	; 0x34
 80048e8:	e7c0      	b.n	800486c <__sflush_r+0x1c>
 80048ea:	2301      	movs	r3, #1
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b0      	blx	r6
 80048f0:	1c41      	adds	r1, r0, #1
 80048f2:	d1c8      	bne.n	8004886 <__sflush_r+0x36>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c5      	beq.n	8004886 <__sflush_r+0x36>
 80048fa:	2b1d      	cmp	r3, #29
 80048fc:	d001      	beq.n	8004902 <__sflush_r+0xb2>
 80048fe:	2b16      	cmp	r3, #22
 8004900:	d101      	bne.n	8004906 <__sflush_r+0xb6>
 8004902:	602f      	str	r7, [r5, #0]
 8004904:	e7b1      	b.n	800486a <__sflush_r+0x1a>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	e7ad      	b.n	800486c <__sflush_r+0x1c>
 8004910:	690f      	ldr	r7, [r1, #16]
 8004912:	2f00      	cmp	r7, #0
 8004914:	d0a9      	beq.n	800486a <__sflush_r+0x1a>
 8004916:	0793      	lsls	r3, r2, #30
 8004918:	680e      	ldr	r6, [r1, #0]
 800491a:	bf08      	it	eq
 800491c:	694b      	ldreq	r3, [r1, #20]
 800491e:	600f      	str	r7, [r1, #0]
 8004920:	bf18      	it	ne
 8004922:	2300      	movne	r3, #0
 8004924:	eba6 0807 	sub.w	r8, r6, r7
 8004928:	608b      	str	r3, [r1, #8]
 800492a:	f1b8 0f00 	cmp.w	r8, #0
 800492e:	dd9c      	ble.n	800486a <__sflush_r+0x1a>
 8004930:	4643      	mov	r3, r8
 8004932:	463a      	mov	r2, r7
 8004934:	6a21      	ldr	r1, [r4, #32]
 8004936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004938:	4628      	mov	r0, r5
 800493a:	47b0      	blx	r6
 800493c:	2800      	cmp	r0, #0
 800493e:	dc06      	bgt.n	800494e <__sflush_r+0xfe>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004946:	81a3      	strh	r3, [r4, #12]
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	e78e      	b.n	800486c <__sflush_r+0x1c>
 800494e:	4407      	add	r7, r0
 8004950:	eba8 0800 	sub.w	r8, r8, r0
 8004954:	e7e9      	b.n	800492a <__sflush_r+0xda>
 8004956:	bf00      	nop
 8004958:	20400001 	.word	0x20400001

0800495c <_fflush_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	690b      	ldr	r3, [r1, #16]
 8004960:	4605      	mov	r5, r0
 8004962:	460c      	mov	r4, r1
 8004964:	b1db      	cbz	r3, 800499e <_fflush_r+0x42>
 8004966:	b118      	cbz	r0, 8004970 <_fflush_r+0x14>
 8004968:	6983      	ldr	r3, [r0, #24]
 800496a:	b90b      	cbnz	r3, 8004970 <_fflush_r+0x14>
 800496c:	f000 f860 	bl	8004a30 <__sinit>
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <_fflush_r+0x48>)
 8004972:	429c      	cmp	r4, r3
 8004974:	d109      	bne.n	800498a <_fflush_r+0x2e>
 8004976:	686c      	ldr	r4, [r5, #4]
 8004978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497c:	b17b      	cbz	r3, 800499e <_fflush_r+0x42>
 800497e:	4621      	mov	r1, r4
 8004980:	4628      	mov	r0, r5
 8004982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004986:	f7ff bf63 	b.w	8004850 <__sflush_r>
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <_fflush_r+0x4c>)
 800498c:	429c      	cmp	r4, r3
 800498e:	d101      	bne.n	8004994 <_fflush_r+0x38>
 8004990:	68ac      	ldr	r4, [r5, #8]
 8004992:	e7f1      	b.n	8004978 <_fflush_r+0x1c>
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <_fflush_r+0x50>)
 8004996:	429c      	cmp	r4, r3
 8004998:	bf08      	it	eq
 800499a:	68ec      	ldreq	r4, [r5, #12]
 800499c:	e7ec      	b.n	8004978 <_fflush_r+0x1c>
 800499e:	2000      	movs	r0, #0
 80049a0:	bd38      	pop	{r3, r4, r5, pc}
 80049a2:	bf00      	nop
 80049a4:	080055c0 	.word	0x080055c0
 80049a8:	080055e0 	.word	0x080055e0
 80049ac:	080055a0 	.word	0x080055a0

080049b0 <std>:
 80049b0:	2300      	movs	r3, #0
 80049b2:	b510      	push	{r4, lr}
 80049b4:	4604      	mov	r4, r0
 80049b6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ba:	6083      	str	r3, [r0, #8]
 80049bc:	8181      	strh	r1, [r0, #12]
 80049be:	6643      	str	r3, [r0, #100]	; 0x64
 80049c0:	81c2      	strh	r2, [r0, #14]
 80049c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049c6:	6183      	str	r3, [r0, #24]
 80049c8:	4619      	mov	r1, r3
 80049ca:	2208      	movs	r2, #8
 80049cc:	305c      	adds	r0, #92	; 0x5c
 80049ce:	f7fe fc85 	bl	80032dc <memset>
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <std+0x38>)
 80049d4:	6263      	str	r3, [r4, #36]	; 0x24
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x3c>)
 80049d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <std+0x40>)
 80049dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <std+0x44>)
 80049e0:	6224      	str	r4, [r4, #32]
 80049e2:	6323      	str	r3, [r4, #48]	; 0x30
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	bf00      	nop
 80049e8:	08005391 	.word	0x08005391
 80049ec:	080053b3 	.word	0x080053b3
 80049f0:	080053eb 	.word	0x080053eb
 80049f4:	0800540f 	.word	0x0800540f

080049f8 <_cleanup_r>:
 80049f8:	4901      	ldr	r1, [pc, #4]	; (8004a00 <_cleanup_r+0x8>)
 80049fa:	f000 b885 	b.w	8004b08 <_fwalk_reent>
 80049fe:	bf00      	nop
 8004a00:	0800495d 	.word	0x0800495d

08004a04 <__sfmoreglue>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	1e4a      	subs	r2, r1, #1
 8004a08:	2568      	movs	r5, #104	; 0x68
 8004a0a:	4355      	muls	r5, r2
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a12:	f000 fc53 	bl	80052bc <_malloc_r>
 8004a16:	4604      	mov	r4, r0
 8004a18:	b140      	cbz	r0, 8004a2c <__sfmoreglue+0x28>
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a20:	300c      	adds	r0, #12
 8004a22:	60a0      	str	r0, [r4, #8]
 8004a24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a28:	f7fe fc58 	bl	80032dc <memset>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}

08004a30 <__sinit>:
 8004a30:	6983      	ldr	r3, [r0, #24]
 8004a32:	b510      	push	{r4, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	bb33      	cbnz	r3, 8004a86 <__sinit+0x56>
 8004a38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a3c:	6503      	str	r3, [r0, #80]	; 0x50
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <__sinit+0x58>)
 8004a40:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <__sinit+0x5c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6282      	str	r2, [r0, #40]	; 0x28
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bf04      	itt	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	6183      	streq	r3, [r0, #24]
 8004a4e:	f000 f81f 	bl	8004a90 <__sfp>
 8004a52:	6060      	str	r0, [r4, #4]
 8004a54:	4620      	mov	r0, r4
 8004a56:	f000 f81b 	bl	8004a90 <__sfp>
 8004a5a:	60a0      	str	r0, [r4, #8]
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 f817 	bl	8004a90 <__sfp>
 8004a62:	2200      	movs	r2, #0
 8004a64:	60e0      	str	r0, [r4, #12]
 8004a66:	2104      	movs	r1, #4
 8004a68:	6860      	ldr	r0, [r4, #4]
 8004a6a:	f7ff ffa1 	bl	80049b0 <std>
 8004a6e:	2201      	movs	r2, #1
 8004a70:	2109      	movs	r1, #9
 8004a72:	68a0      	ldr	r0, [r4, #8]
 8004a74:	f7ff ff9c 	bl	80049b0 <std>
 8004a78:	2202      	movs	r2, #2
 8004a7a:	2112      	movs	r1, #18
 8004a7c:	68e0      	ldr	r0, [r4, #12]
 8004a7e:	f7ff ff97 	bl	80049b0 <std>
 8004a82:	2301      	movs	r3, #1
 8004a84:	61a3      	str	r3, [r4, #24]
 8004a86:	bd10      	pop	{r4, pc}
 8004a88:	0800557c 	.word	0x0800557c
 8004a8c:	080049f9 	.word	0x080049f9

08004a90 <__sfp>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <__sfp+0x70>)
 8004a94:	681e      	ldr	r6, [r3, #0]
 8004a96:	69b3      	ldr	r3, [r6, #24]
 8004a98:	4607      	mov	r7, r0
 8004a9a:	b913      	cbnz	r3, 8004aa2 <__sfp+0x12>
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f7ff ffc7 	bl	8004a30 <__sinit>
 8004aa2:	3648      	adds	r6, #72	; 0x48
 8004aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	d503      	bpl.n	8004ab4 <__sfp+0x24>
 8004aac:	6833      	ldr	r3, [r6, #0]
 8004aae:	b133      	cbz	r3, 8004abe <__sfp+0x2e>
 8004ab0:	6836      	ldr	r6, [r6, #0]
 8004ab2:	e7f7      	b.n	8004aa4 <__sfp+0x14>
 8004ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ab8:	b16d      	cbz	r5, 8004ad6 <__sfp+0x46>
 8004aba:	3468      	adds	r4, #104	; 0x68
 8004abc:	e7f4      	b.n	8004aa8 <__sfp+0x18>
 8004abe:	2104      	movs	r1, #4
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f7ff ff9f 	bl	8004a04 <__sfmoreglue>
 8004ac6:	6030      	str	r0, [r6, #0]
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d1f1      	bne.n	8004ab0 <__sfp+0x20>
 8004acc:	230c      	movs	r3, #12
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <__sfp+0x74>)
 8004ad8:	6665      	str	r5, [r4, #100]	; 0x64
 8004ada:	e9c4 5500 	strd	r5, r5, [r4]
 8004ade:	60a5      	str	r5, [r4, #8]
 8004ae0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ae4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	4629      	mov	r1, r5
 8004aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004af0:	f7fe fbf4 	bl	80032dc <memset>
 8004af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004afc:	e7e9      	b.n	8004ad2 <__sfp+0x42>
 8004afe:	bf00      	nop
 8004b00:	0800557c 	.word	0x0800557c
 8004b04:	ffff0001 	.word	0xffff0001

08004b08 <_fwalk_reent>:
 8004b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b0c:	4680      	mov	r8, r0
 8004b0e:	4689      	mov	r9, r1
 8004b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b14:	2600      	movs	r6, #0
 8004b16:	b914      	cbnz	r4, 8004b1e <_fwalk_reent+0x16>
 8004b18:	4630      	mov	r0, r6
 8004b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b22:	3f01      	subs	r7, #1
 8004b24:	d501      	bpl.n	8004b2a <_fwalk_reent+0x22>
 8004b26:	6824      	ldr	r4, [r4, #0]
 8004b28:	e7f5      	b.n	8004b16 <_fwalk_reent+0xe>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d907      	bls.n	8004b40 <_fwalk_reent+0x38>
 8004b30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b34:	3301      	adds	r3, #1
 8004b36:	d003      	beq.n	8004b40 <_fwalk_reent+0x38>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	47c8      	blx	r9
 8004b3e:	4306      	orrs	r6, r0
 8004b40:	3568      	adds	r5, #104	; 0x68
 8004b42:	e7ee      	b.n	8004b22 <_fwalk_reent+0x1a>

08004b44 <_localeconv_r>:
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <_localeconv_r+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6a18      	ldr	r0, [r3, #32]
 8004b4a:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <_localeconv_r+0x18>)
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	bf08      	it	eq
 8004b50:	4618      	moveq	r0, r3
 8004b52:	30f0      	adds	r0, #240	; 0xf0
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	20000070 	.word	0x20000070

08004b60 <__swhatbuf_r>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	460e      	mov	r6, r1
 8004b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	b096      	sub	sp, #88	; 0x58
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	da07      	bge.n	8004b82 <__swhatbuf_r+0x22>
 8004b72:	2300      	movs	r3, #0
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	89b3      	ldrh	r3, [r6, #12]
 8004b78:	061a      	lsls	r2, r3, #24
 8004b7a:	d410      	bmi.n	8004b9e <__swhatbuf_r+0x3e>
 8004b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b80:	e00e      	b.n	8004ba0 <__swhatbuf_r+0x40>
 8004b82:	466a      	mov	r2, sp
 8004b84:	f000 fc6a 	bl	800545c <_fstat_r>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	dbf2      	blt.n	8004b72 <__swhatbuf_r+0x12>
 8004b8c:	9a01      	ldr	r2, [sp, #4]
 8004b8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b96:	425a      	negs	r2, r3
 8004b98:	415a      	adcs	r2, r3
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	e7ee      	b.n	8004b7c <__swhatbuf_r+0x1c>
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	b016      	add	sp, #88	; 0x58
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}

08004ba8 <__smakebuf_r>:
 8004ba8:	898b      	ldrh	r3, [r1, #12]
 8004baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bac:	079d      	lsls	r5, r3, #30
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	d507      	bpl.n	8004bc4 <__smakebuf_r+0x1c>
 8004bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	6123      	str	r3, [r4, #16]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	6163      	str	r3, [r4, #20]
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	ab01      	add	r3, sp, #4
 8004bc6:	466a      	mov	r2, sp
 8004bc8:	f7ff ffca 	bl	8004b60 <__swhatbuf_r>
 8004bcc:	9900      	ldr	r1, [sp, #0]
 8004bce:	4605      	mov	r5, r0
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 fb73 	bl	80052bc <_malloc_r>
 8004bd6:	b948      	cbnz	r0, 8004bec <__smakebuf_r+0x44>
 8004bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bdc:	059a      	lsls	r2, r3, #22
 8004bde:	d4ef      	bmi.n	8004bc0 <__smakebuf_r+0x18>
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	f043 0302 	orr.w	r3, r3, #2
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	e7e3      	b.n	8004bb4 <__smakebuf_r+0xc>
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <__smakebuf_r+0x7c>)
 8004bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	6020      	str	r0, [r4, #0]
 8004bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	9b00      	ldr	r3, [sp, #0]
 8004bfc:	6163      	str	r3, [r4, #20]
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	6120      	str	r0, [r4, #16]
 8004c02:	b15b      	cbz	r3, 8004c1c <__smakebuf_r+0x74>
 8004c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 fc39 	bl	8005480 <_isatty_r>
 8004c0e:	b128      	cbz	r0, 8004c1c <__smakebuf_r+0x74>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	431d      	orrs	r5, r3
 8004c20:	81a5      	strh	r5, [r4, #12]
 8004c22:	e7cd      	b.n	8004bc0 <__smakebuf_r+0x18>
 8004c24:	080049f9 	.word	0x080049f9

08004c28 <malloc>:
 8004c28:	4b02      	ldr	r3, [pc, #8]	; (8004c34 <malloc+0xc>)
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f000 bb45 	b.w	80052bc <_malloc_r>
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c

08004c38 <memcpy>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	1e43      	subs	r3, r0, #1
 8004c3c:	440a      	add	r2, r1
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	d100      	bne.n	8004c44 <memcpy+0xc>
 8004c42:	bd10      	pop	{r4, pc}
 8004c44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4c:	e7f7      	b.n	8004c3e <memcpy+0x6>

08004c4e <_Balloc>:
 8004c4e:	b570      	push	{r4, r5, r6, lr}
 8004c50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c52:	4604      	mov	r4, r0
 8004c54:	460e      	mov	r6, r1
 8004c56:	b93d      	cbnz	r5, 8004c68 <_Balloc+0x1a>
 8004c58:	2010      	movs	r0, #16
 8004c5a:	f7ff ffe5 	bl	8004c28 <malloc>
 8004c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8004c60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c64:	6005      	str	r5, [r0, #0]
 8004c66:	60c5      	str	r5, [r0, #12]
 8004c68:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c6a:	68eb      	ldr	r3, [r5, #12]
 8004c6c:	b183      	cbz	r3, 8004c90 <_Balloc+0x42>
 8004c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c76:	b9b8      	cbnz	r0, 8004ca8 <_Balloc+0x5a>
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f506 	lsl.w	r5, r1, r6
 8004c7e:	1d6a      	adds	r2, r5, #5
 8004c80:	0092      	lsls	r2, r2, #2
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 fabe 	bl	8005204 <_calloc_r>
 8004c88:	b160      	cbz	r0, 8004ca4 <_Balloc+0x56>
 8004c8a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004c8e:	e00e      	b.n	8004cae <_Balloc+0x60>
 8004c90:	2221      	movs	r2, #33	; 0x21
 8004c92:	2104      	movs	r1, #4
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fab5 	bl	8005204 <_calloc_r>
 8004c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9c:	60e8      	str	r0, [r5, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e4      	bne.n	8004c6e <_Balloc+0x20>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	6802      	ldr	r2, [r0, #0]
 8004caa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cb4:	e7f7      	b.n	8004ca6 <_Balloc+0x58>

08004cb6 <_Bfree>:
 8004cb6:	b570      	push	{r4, r5, r6, lr}
 8004cb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004cba:	4606      	mov	r6, r0
 8004cbc:	460d      	mov	r5, r1
 8004cbe:	b93c      	cbnz	r4, 8004cd0 <_Bfree+0x1a>
 8004cc0:	2010      	movs	r0, #16
 8004cc2:	f7ff ffb1 	bl	8004c28 <malloc>
 8004cc6:	6270      	str	r0, [r6, #36]	; 0x24
 8004cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ccc:	6004      	str	r4, [r0, #0]
 8004cce:	60c4      	str	r4, [r0, #12]
 8004cd0:	b13d      	cbz	r5, 8004ce2 <_Bfree+0x2c>
 8004cd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004cd4:	686a      	ldr	r2, [r5, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cdc:	6029      	str	r1, [r5, #0]
 8004cde:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}

08004ce4 <__multadd>:
 8004ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce8:	690d      	ldr	r5, [r1, #16]
 8004cea:	461f      	mov	r7, r3
 8004cec:	4606      	mov	r6, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	f101 0c14 	add.w	ip, r1, #20
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8dc 0000 	ldr.w	r0, [ip]
 8004cfa:	b281      	uxth	r1, r0
 8004cfc:	fb02 7101 	mla	r1, r2, r1, r7
 8004d00:	0c0f      	lsrs	r7, r1, #16
 8004d02:	0c00      	lsrs	r0, r0, #16
 8004d04:	fb02 7000 	mla	r0, r2, r0, r7
 8004d08:	b289      	uxth	r1, r1
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004d10:	429d      	cmp	r5, r3
 8004d12:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004d16:	f84c 1b04 	str.w	r1, [ip], #4
 8004d1a:	dcec      	bgt.n	8004cf6 <__multadd+0x12>
 8004d1c:	b1d7      	cbz	r7, 8004d54 <__multadd+0x70>
 8004d1e:	68a3      	ldr	r3, [r4, #8]
 8004d20:	42ab      	cmp	r3, r5
 8004d22:	dc12      	bgt.n	8004d4a <__multadd+0x66>
 8004d24:	6861      	ldr	r1, [r4, #4]
 8004d26:	4630      	mov	r0, r6
 8004d28:	3101      	adds	r1, #1
 8004d2a:	f7ff ff90 	bl	8004c4e <_Balloc>
 8004d2e:	6922      	ldr	r2, [r4, #16]
 8004d30:	3202      	adds	r2, #2
 8004d32:	f104 010c 	add.w	r1, r4, #12
 8004d36:	4680      	mov	r8, r0
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	300c      	adds	r0, #12
 8004d3c:	f7ff ff7c 	bl	8004c38 <memcpy>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff ffb7 	bl	8004cb6 <_Bfree>
 8004d48:	4644      	mov	r4, r8
 8004d4a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d4e:	3501      	adds	r5, #1
 8004d50:	615f      	str	r7, [r3, #20]
 8004d52:	6125      	str	r5, [r4, #16]
 8004d54:	4620      	mov	r0, r4
 8004d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d5a <__hi0bits>:
 8004d5a:	0c02      	lsrs	r2, r0, #16
 8004d5c:	0412      	lsls	r2, r2, #16
 8004d5e:	4603      	mov	r3, r0
 8004d60:	b9b2      	cbnz	r2, 8004d90 <__hi0bits+0x36>
 8004d62:	0403      	lsls	r3, r0, #16
 8004d64:	2010      	movs	r0, #16
 8004d66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d6a:	bf04      	itt	eq
 8004d6c:	021b      	lsleq	r3, r3, #8
 8004d6e:	3008      	addeq	r0, #8
 8004d70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d74:	bf04      	itt	eq
 8004d76:	011b      	lsleq	r3, r3, #4
 8004d78:	3004      	addeq	r0, #4
 8004d7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d7e:	bf04      	itt	eq
 8004d80:	009b      	lsleq	r3, r3, #2
 8004d82:	3002      	addeq	r0, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db06      	blt.n	8004d96 <__hi0bits+0x3c>
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	d503      	bpl.n	8004d94 <__hi0bits+0x3a>
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	4770      	bx	lr
 8004d90:	2000      	movs	r0, #0
 8004d92:	e7e8      	b.n	8004d66 <__hi0bits+0xc>
 8004d94:	2020      	movs	r0, #32
 8004d96:	4770      	bx	lr

08004d98 <__lo0bits>:
 8004d98:	6803      	ldr	r3, [r0, #0]
 8004d9a:	f013 0207 	ands.w	r2, r3, #7
 8004d9e:	4601      	mov	r1, r0
 8004da0:	d00b      	beq.n	8004dba <__lo0bits+0x22>
 8004da2:	07da      	lsls	r2, r3, #31
 8004da4:	d423      	bmi.n	8004dee <__lo0bits+0x56>
 8004da6:	0798      	lsls	r0, r3, #30
 8004da8:	bf49      	itett	mi
 8004daa:	085b      	lsrmi	r3, r3, #1
 8004dac:	089b      	lsrpl	r3, r3, #2
 8004dae:	2001      	movmi	r0, #1
 8004db0:	600b      	strmi	r3, [r1, #0]
 8004db2:	bf5c      	itt	pl
 8004db4:	600b      	strpl	r3, [r1, #0]
 8004db6:	2002      	movpl	r0, #2
 8004db8:	4770      	bx	lr
 8004dba:	b298      	uxth	r0, r3
 8004dbc:	b9a8      	cbnz	r0, 8004dea <__lo0bits+0x52>
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	2010      	movs	r0, #16
 8004dc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004dc6:	bf04      	itt	eq
 8004dc8:	0a1b      	lsreq	r3, r3, #8
 8004dca:	3008      	addeq	r0, #8
 8004dcc:	071a      	lsls	r2, r3, #28
 8004dce:	bf04      	itt	eq
 8004dd0:	091b      	lsreq	r3, r3, #4
 8004dd2:	3004      	addeq	r0, #4
 8004dd4:	079a      	lsls	r2, r3, #30
 8004dd6:	bf04      	itt	eq
 8004dd8:	089b      	lsreq	r3, r3, #2
 8004dda:	3002      	addeq	r0, #2
 8004ddc:	07da      	lsls	r2, r3, #31
 8004dde:	d402      	bmi.n	8004de6 <__lo0bits+0x4e>
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	d006      	beq.n	8004df2 <__lo0bits+0x5a>
 8004de4:	3001      	adds	r0, #1
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	4770      	bx	lr
 8004dea:	4610      	mov	r0, r2
 8004dec:	e7e9      	b.n	8004dc2 <__lo0bits+0x2a>
 8004dee:	2000      	movs	r0, #0
 8004df0:	4770      	bx	lr
 8004df2:	2020      	movs	r0, #32
 8004df4:	4770      	bx	lr

08004df6 <__i2b>:
 8004df6:	b510      	push	{r4, lr}
 8004df8:	460c      	mov	r4, r1
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	f7ff ff27 	bl	8004c4e <_Balloc>
 8004e00:	2201      	movs	r2, #1
 8004e02:	6144      	str	r4, [r0, #20]
 8004e04:	6102      	str	r2, [r0, #16]
 8004e06:	bd10      	pop	{r4, pc}

08004e08 <__multiply>:
 8004e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	690a      	ldr	r2, [r1, #16]
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bfb8      	it	lt
 8004e16:	460b      	movlt	r3, r1
 8004e18:	4688      	mov	r8, r1
 8004e1a:	bfbc      	itt	lt
 8004e1c:	46a0      	movlt	r8, r4
 8004e1e:	461c      	movlt	r4, r3
 8004e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004e24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004e28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004e30:	eb07 0609 	add.w	r6, r7, r9
 8004e34:	42b3      	cmp	r3, r6
 8004e36:	bfb8      	it	lt
 8004e38:	3101      	addlt	r1, #1
 8004e3a:	f7ff ff08 	bl	8004c4e <_Balloc>
 8004e3e:	f100 0514 	add.w	r5, r0, #20
 8004e42:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004e46:	462b      	mov	r3, r5
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4573      	cmp	r3, lr
 8004e4c:	d316      	bcc.n	8004e7c <__multiply+0x74>
 8004e4e:	f104 0214 	add.w	r2, r4, #20
 8004e52:	f108 0114 	add.w	r1, r8, #20
 8004e56:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004e5a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	9b00      	ldr	r3, [sp, #0]
 8004e62:	9201      	str	r2, [sp, #4]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d80c      	bhi.n	8004e82 <__multiply+0x7a>
 8004e68:	2e00      	cmp	r6, #0
 8004e6a:	dd03      	ble.n	8004e74 <__multiply+0x6c>
 8004e6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d05d      	beq.n	8004f30 <__multiply+0x128>
 8004e74:	6106      	str	r6, [r0, #16]
 8004e76:	b003      	add	sp, #12
 8004e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7c:	f843 2b04 	str.w	r2, [r3], #4
 8004e80:	e7e3      	b.n	8004e4a <__multiply+0x42>
 8004e82:	f8b2 b000 	ldrh.w	fp, [r2]
 8004e86:	f1bb 0f00 	cmp.w	fp, #0
 8004e8a:	d023      	beq.n	8004ed4 <__multiply+0xcc>
 8004e8c:	4689      	mov	r9, r1
 8004e8e:	46ac      	mov	ip, r5
 8004e90:	f04f 0800 	mov.w	r8, #0
 8004e94:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e98:	f8dc a000 	ldr.w	sl, [ip]
 8004e9c:	b2a3      	uxth	r3, r4
 8004e9e:	fa1f fa8a 	uxth.w	sl, sl
 8004ea2:	fb0b a303 	mla	r3, fp, r3, sl
 8004ea6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004eaa:	f8dc 4000 	ldr.w	r4, [ip]
 8004eae:	4443      	add	r3, r8
 8004eb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004eb4:	fb0b 840a 	mla	r4, fp, sl, r8
 8004eb8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004ebc:	46e2      	mov	sl, ip
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ec4:	454f      	cmp	r7, r9
 8004ec6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004eca:	f84a 3b04 	str.w	r3, [sl], #4
 8004ece:	d82b      	bhi.n	8004f28 <__multiply+0x120>
 8004ed0:	f8cc 8004 	str.w	r8, [ip, #4]
 8004ed4:	9b01      	ldr	r3, [sp, #4]
 8004ed6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004eda:	3204      	adds	r2, #4
 8004edc:	f1ba 0f00 	cmp.w	sl, #0
 8004ee0:	d020      	beq.n	8004f24 <__multiply+0x11c>
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	4689      	mov	r9, r1
 8004ee6:	46a8      	mov	r8, r5
 8004ee8:	f04f 0b00 	mov.w	fp, #0
 8004eec:	f8b9 c000 	ldrh.w	ip, [r9]
 8004ef0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004ef4:	fb0a 440c 	mla	r4, sl, ip, r4
 8004ef8:	445c      	add	r4, fp
 8004efa:	46c4      	mov	ip, r8
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004f02:	f84c 3b04 	str.w	r3, [ip], #4
 8004f06:	f859 3b04 	ldr.w	r3, [r9], #4
 8004f0a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	fb0a b303 	mla	r3, sl, r3, fp
 8004f14:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004f18:	454f      	cmp	r7, r9
 8004f1a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004f1e:	d805      	bhi.n	8004f2c <__multiply+0x124>
 8004f20:	f8c8 3004 	str.w	r3, [r8, #4]
 8004f24:	3504      	adds	r5, #4
 8004f26:	e79b      	b.n	8004e60 <__multiply+0x58>
 8004f28:	46d4      	mov	ip, sl
 8004f2a:	e7b3      	b.n	8004e94 <__multiply+0x8c>
 8004f2c:	46e0      	mov	r8, ip
 8004f2e:	e7dd      	b.n	8004eec <__multiply+0xe4>
 8004f30:	3e01      	subs	r6, #1
 8004f32:	e799      	b.n	8004e68 <__multiply+0x60>

08004f34 <__pow5mult>:
 8004f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f38:	4615      	mov	r5, r2
 8004f3a:	f012 0203 	ands.w	r2, r2, #3
 8004f3e:	4606      	mov	r6, r0
 8004f40:	460f      	mov	r7, r1
 8004f42:	d007      	beq.n	8004f54 <__pow5mult+0x20>
 8004f44:	3a01      	subs	r2, #1
 8004f46:	4c21      	ldr	r4, [pc, #132]	; (8004fcc <__pow5mult+0x98>)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f4e:	f7ff fec9 	bl	8004ce4 <__multadd>
 8004f52:	4607      	mov	r7, r0
 8004f54:	10ad      	asrs	r5, r5, #2
 8004f56:	d035      	beq.n	8004fc4 <__pow5mult+0x90>
 8004f58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f5a:	b93c      	cbnz	r4, 8004f6c <__pow5mult+0x38>
 8004f5c:	2010      	movs	r0, #16
 8004f5e:	f7ff fe63 	bl	8004c28 <malloc>
 8004f62:	6270      	str	r0, [r6, #36]	; 0x24
 8004f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f68:	6004      	str	r4, [r0, #0]
 8004f6a:	60c4      	str	r4, [r0, #12]
 8004f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f74:	b94c      	cbnz	r4, 8004f8a <__pow5mult+0x56>
 8004f76:	f240 2171 	movw	r1, #625	; 0x271
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7ff ff3b 	bl	8004df6 <__i2b>
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f86:	4604      	mov	r4, r0
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	f04f 0800 	mov.w	r8, #0
 8004f8e:	07eb      	lsls	r3, r5, #31
 8004f90:	d50a      	bpl.n	8004fa8 <__pow5mult+0x74>
 8004f92:	4639      	mov	r1, r7
 8004f94:	4622      	mov	r2, r4
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7ff ff36 	bl	8004e08 <__multiply>
 8004f9c:	4639      	mov	r1, r7
 8004f9e:	4681      	mov	r9, r0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7ff fe88 	bl	8004cb6 <_Bfree>
 8004fa6:	464f      	mov	r7, r9
 8004fa8:	106d      	asrs	r5, r5, #1
 8004faa:	d00b      	beq.n	8004fc4 <__pow5mult+0x90>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	b938      	cbnz	r0, 8004fc0 <__pow5mult+0x8c>
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff ff27 	bl	8004e08 <__multiply>
 8004fba:	6020      	str	r0, [r4, #0]
 8004fbc:	f8c0 8000 	str.w	r8, [r0]
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e7e4      	b.n	8004f8e <__pow5mult+0x5a>
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fca:	bf00      	nop
 8004fcc:	080056f0 	.word	0x080056f0

08004fd0 <__lshift>:
 8004fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	6849      	ldr	r1, [r1, #4]
 8004fde:	eb0a 0903 	add.w	r9, sl, r3
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	f109 0501 	add.w	r5, r9, #1
 8004fec:	42ab      	cmp	r3, r5
 8004fee:	db32      	blt.n	8005056 <__lshift+0x86>
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff fe2c 	bl	8004c4e <_Balloc>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	f100 0114 	add.w	r1, r0, #20
 8004ffe:	461a      	mov	r2, r3
 8005000:	4553      	cmp	r3, sl
 8005002:	db2b      	blt.n	800505c <__lshift+0x8c>
 8005004:	6920      	ldr	r0, [r4, #16]
 8005006:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800500a:	f104 0314 	add.w	r3, r4, #20
 800500e:	f016 021f 	ands.w	r2, r6, #31
 8005012:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005016:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800501a:	d025      	beq.n	8005068 <__lshift+0x98>
 800501c:	f1c2 0e20 	rsb	lr, r2, #32
 8005020:	2000      	movs	r0, #0
 8005022:	681e      	ldr	r6, [r3, #0]
 8005024:	468a      	mov	sl, r1
 8005026:	4096      	lsls	r6, r2
 8005028:	4330      	orrs	r0, r6
 800502a:	f84a 0b04 	str.w	r0, [sl], #4
 800502e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005032:	459c      	cmp	ip, r3
 8005034:	fa20 f00e 	lsr.w	r0, r0, lr
 8005038:	d814      	bhi.n	8005064 <__lshift+0x94>
 800503a:	6048      	str	r0, [r1, #4]
 800503c:	b108      	cbz	r0, 8005042 <__lshift+0x72>
 800503e:	f109 0502 	add.w	r5, r9, #2
 8005042:	3d01      	subs	r5, #1
 8005044:	4638      	mov	r0, r7
 8005046:	f8c8 5010 	str.w	r5, [r8, #16]
 800504a:	4621      	mov	r1, r4
 800504c:	f7ff fe33 	bl	8004cb6 <_Bfree>
 8005050:	4640      	mov	r0, r8
 8005052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005056:	3101      	adds	r1, #1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	e7c7      	b.n	8004fec <__lshift+0x1c>
 800505c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005060:	3301      	adds	r3, #1
 8005062:	e7cd      	b.n	8005000 <__lshift+0x30>
 8005064:	4651      	mov	r1, sl
 8005066:	e7dc      	b.n	8005022 <__lshift+0x52>
 8005068:	3904      	subs	r1, #4
 800506a:	f853 2b04 	ldr.w	r2, [r3], #4
 800506e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005072:	459c      	cmp	ip, r3
 8005074:	d8f9      	bhi.n	800506a <__lshift+0x9a>
 8005076:	e7e4      	b.n	8005042 <__lshift+0x72>

08005078 <__mcmp>:
 8005078:	6903      	ldr	r3, [r0, #16]
 800507a:	690a      	ldr	r2, [r1, #16]
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	b530      	push	{r4, r5, lr}
 8005080:	d10c      	bne.n	800509c <__mcmp+0x24>
 8005082:	0092      	lsls	r2, r2, #2
 8005084:	3014      	adds	r0, #20
 8005086:	3114      	adds	r1, #20
 8005088:	1884      	adds	r4, r0, r2
 800508a:	4411      	add	r1, r2
 800508c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005094:	4295      	cmp	r5, r2
 8005096:	d003      	beq.n	80050a0 <__mcmp+0x28>
 8005098:	d305      	bcc.n	80050a6 <__mcmp+0x2e>
 800509a:	2301      	movs	r3, #1
 800509c:	4618      	mov	r0, r3
 800509e:	bd30      	pop	{r4, r5, pc}
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d3f3      	bcc.n	800508c <__mcmp+0x14>
 80050a4:	e7fa      	b.n	800509c <__mcmp+0x24>
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	e7f7      	b.n	800509c <__mcmp+0x24>

080050ac <__mdiff>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	460d      	mov	r5, r1
 80050b2:	4607      	mov	r7, r0
 80050b4:	4611      	mov	r1, r2
 80050b6:	4628      	mov	r0, r5
 80050b8:	4614      	mov	r4, r2
 80050ba:	f7ff ffdd 	bl	8005078 <__mcmp>
 80050be:	1e06      	subs	r6, r0, #0
 80050c0:	d108      	bne.n	80050d4 <__mdiff+0x28>
 80050c2:	4631      	mov	r1, r6
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff fdc2 	bl	8004c4e <_Balloc>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80050d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d4:	bfa4      	itt	ge
 80050d6:	4623      	movge	r3, r4
 80050d8:	462c      	movge	r4, r5
 80050da:	4638      	mov	r0, r7
 80050dc:	6861      	ldr	r1, [r4, #4]
 80050de:	bfa6      	itte	ge
 80050e0:	461d      	movge	r5, r3
 80050e2:	2600      	movge	r6, #0
 80050e4:	2601      	movlt	r6, #1
 80050e6:	f7ff fdb2 	bl	8004c4e <_Balloc>
 80050ea:	692b      	ldr	r3, [r5, #16]
 80050ec:	60c6      	str	r6, [r0, #12]
 80050ee:	6926      	ldr	r6, [r4, #16]
 80050f0:	f105 0914 	add.w	r9, r5, #20
 80050f4:	f104 0214 	add.w	r2, r4, #20
 80050f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80050fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005100:	f100 0514 	add.w	r5, r0, #20
 8005104:	f04f 0e00 	mov.w	lr, #0
 8005108:	f852 ab04 	ldr.w	sl, [r2], #4
 800510c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005110:	fa1e f18a 	uxtah	r1, lr, sl
 8005114:	b2a3      	uxth	r3, r4
 8005116:	1ac9      	subs	r1, r1, r3
 8005118:	0c23      	lsrs	r3, r4, #16
 800511a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800511e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005122:	b289      	uxth	r1, r1
 8005124:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005128:	45c8      	cmp	r8, r9
 800512a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800512e:	4694      	mov	ip, r2
 8005130:	f845 3b04 	str.w	r3, [r5], #4
 8005134:	d8e8      	bhi.n	8005108 <__mdiff+0x5c>
 8005136:	45bc      	cmp	ip, r7
 8005138:	d304      	bcc.n	8005144 <__mdiff+0x98>
 800513a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800513e:	b183      	cbz	r3, 8005162 <__mdiff+0xb6>
 8005140:	6106      	str	r6, [r0, #16]
 8005142:	e7c5      	b.n	80050d0 <__mdiff+0x24>
 8005144:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005148:	fa1e f381 	uxtah	r3, lr, r1
 800514c:	141a      	asrs	r2, r3, #16
 800514e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005158:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800515c:	f845 3b04 	str.w	r3, [r5], #4
 8005160:	e7e9      	b.n	8005136 <__mdiff+0x8a>
 8005162:	3e01      	subs	r6, #1
 8005164:	e7e9      	b.n	800513a <__mdiff+0x8e>

08005166 <__d2b>:
 8005166:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800516a:	460e      	mov	r6, r1
 800516c:	2101      	movs	r1, #1
 800516e:	ec59 8b10 	vmov	r8, r9, d0
 8005172:	4615      	mov	r5, r2
 8005174:	f7ff fd6b 	bl	8004c4e <_Balloc>
 8005178:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800517c:	4607      	mov	r7, r0
 800517e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005182:	bb34      	cbnz	r4, 80051d2 <__d2b+0x6c>
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	f1b8 0300 	subs.w	r3, r8, #0
 800518a:	d027      	beq.n	80051dc <__d2b+0x76>
 800518c:	a802      	add	r0, sp, #8
 800518e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005192:	f7ff fe01 	bl	8004d98 <__lo0bits>
 8005196:	9900      	ldr	r1, [sp, #0]
 8005198:	b1f0      	cbz	r0, 80051d8 <__d2b+0x72>
 800519a:	9a01      	ldr	r2, [sp, #4]
 800519c:	f1c0 0320 	rsb	r3, r0, #32
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	430b      	orrs	r3, r1
 80051a6:	40c2      	lsrs	r2, r0
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	9201      	str	r2, [sp, #4]
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf14      	ite	ne
 80051b4:	2102      	movne	r1, #2
 80051b6:	2101      	moveq	r1, #1
 80051b8:	6139      	str	r1, [r7, #16]
 80051ba:	b1c4      	cbz	r4, 80051ee <__d2b+0x88>
 80051bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80051c0:	4404      	add	r4, r0
 80051c2:	6034      	str	r4, [r6, #0]
 80051c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80051c8:	6028      	str	r0, [r5, #0]
 80051ca:	4638      	mov	r0, r7
 80051cc:	b003      	add	sp, #12
 80051ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	e7d5      	b.n	8005184 <__d2b+0x1e>
 80051d8:	6179      	str	r1, [r7, #20]
 80051da:	e7e7      	b.n	80051ac <__d2b+0x46>
 80051dc:	a801      	add	r0, sp, #4
 80051de:	f7ff fddb 	bl	8004d98 <__lo0bits>
 80051e2:	9b01      	ldr	r3, [sp, #4]
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	2101      	movs	r1, #1
 80051e8:	6139      	str	r1, [r7, #16]
 80051ea:	3020      	adds	r0, #32
 80051ec:	e7e5      	b.n	80051ba <__d2b+0x54>
 80051ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80051f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80051f6:	6030      	str	r0, [r6, #0]
 80051f8:	6918      	ldr	r0, [r3, #16]
 80051fa:	f7ff fdae 	bl	8004d5a <__hi0bits>
 80051fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005202:	e7e1      	b.n	80051c8 <__d2b+0x62>

08005204 <_calloc_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	fb02 f401 	mul.w	r4, r2, r1
 800520a:	4621      	mov	r1, r4
 800520c:	f000 f856 	bl	80052bc <_malloc_r>
 8005210:	4605      	mov	r5, r0
 8005212:	b118      	cbz	r0, 800521c <_calloc_r+0x18>
 8005214:	4622      	mov	r2, r4
 8005216:	2100      	movs	r1, #0
 8005218:	f7fe f860 	bl	80032dc <memset>
 800521c:	4628      	mov	r0, r5
 800521e:	bd38      	pop	{r3, r4, r5, pc}

08005220 <_free_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4605      	mov	r5, r0
 8005224:	2900      	cmp	r1, #0
 8005226:	d045      	beq.n	80052b4 <_free_r+0x94>
 8005228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522c:	1f0c      	subs	r4, r1, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfb8      	it	lt
 8005232:	18e4      	addlt	r4, r4, r3
 8005234:	f000 f958 	bl	80054e8 <__malloc_lock>
 8005238:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <_free_r+0x98>)
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	4610      	mov	r0, r2
 800523e:	b933      	cbnz	r3, 800524e <_free_r+0x2e>
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	6014      	str	r4, [r2, #0]
 8005244:	4628      	mov	r0, r5
 8005246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800524a:	f000 b94e 	b.w	80054ea <__malloc_unlock>
 800524e:	42a3      	cmp	r3, r4
 8005250:	d90c      	bls.n	800526c <_free_r+0x4c>
 8005252:	6821      	ldr	r1, [r4, #0]
 8005254:	1862      	adds	r2, r4, r1
 8005256:	4293      	cmp	r3, r2
 8005258:	bf04      	itt	eq
 800525a:	681a      	ldreq	r2, [r3, #0]
 800525c:	685b      	ldreq	r3, [r3, #4]
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	bf04      	itt	eq
 8005262:	1852      	addeq	r2, r2, r1
 8005264:	6022      	streq	r2, [r4, #0]
 8005266:	6004      	str	r4, [r0, #0]
 8005268:	e7ec      	b.n	8005244 <_free_r+0x24>
 800526a:	4613      	mov	r3, r2
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	b10a      	cbz	r2, 8005274 <_free_r+0x54>
 8005270:	42a2      	cmp	r2, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x4a>
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	1858      	adds	r0, r3, r1
 8005278:	42a0      	cmp	r0, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x74>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	4401      	add	r1, r0
 8005280:	1858      	adds	r0, r3, r1
 8005282:	4282      	cmp	r2, r0
 8005284:	6019      	str	r1, [r3, #0]
 8005286:	d1dd      	bne.n	8005244 <_free_r+0x24>
 8005288:	6810      	ldr	r0, [r2, #0]
 800528a:	6852      	ldr	r2, [r2, #4]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	4401      	add	r1, r0
 8005290:	6019      	str	r1, [r3, #0]
 8005292:	e7d7      	b.n	8005244 <_free_r+0x24>
 8005294:	d902      	bls.n	800529c <_free_r+0x7c>
 8005296:	230c      	movs	r3, #12
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	e7d3      	b.n	8005244 <_free_r+0x24>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	1821      	adds	r1, r4, r0
 80052a0:	428a      	cmp	r2, r1
 80052a2:	bf04      	itt	eq
 80052a4:	6811      	ldreq	r1, [r2, #0]
 80052a6:	6852      	ldreq	r2, [r2, #4]
 80052a8:	6062      	str	r2, [r4, #4]
 80052aa:	bf04      	itt	eq
 80052ac:	1809      	addeq	r1, r1, r0
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	605c      	str	r4, [r3, #4]
 80052b2:	e7c7      	b.n	8005244 <_free_r+0x24>
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
 80052b6:	bf00      	nop
 80052b8:	200001fc 	.word	0x200001fc

080052bc <_malloc_r>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	1ccd      	adds	r5, r1, #3
 80052c0:	f025 0503 	bic.w	r5, r5, #3
 80052c4:	3508      	adds	r5, #8
 80052c6:	2d0c      	cmp	r5, #12
 80052c8:	bf38      	it	cc
 80052ca:	250c      	movcc	r5, #12
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	4606      	mov	r6, r0
 80052d0:	db01      	blt.n	80052d6 <_malloc_r+0x1a>
 80052d2:	42a9      	cmp	r1, r5
 80052d4:	d903      	bls.n	80052de <_malloc_r+0x22>
 80052d6:	230c      	movs	r3, #12
 80052d8:	6033      	str	r3, [r6, #0]
 80052da:	2000      	movs	r0, #0
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	f000 f903 	bl	80054e8 <__malloc_lock>
 80052e2:	4a21      	ldr	r2, [pc, #132]	; (8005368 <_malloc_r+0xac>)
 80052e4:	6814      	ldr	r4, [r2, #0]
 80052e6:	4621      	mov	r1, r4
 80052e8:	b991      	cbnz	r1, 8005310 <_malloc_r+0x54>
 80052ea:	4c20      	ldr	r4, [pc, #128]	; (800536c <_malloc_r+0xb0>)
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	b91b      	cbnz	r3, 80052f8 <_malloc_r+0x3c>
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f83d 	bl	8005370 <_sbrk_r>
 80052f6:	6020      	str	r0, [r4, #0]
 80052f8:	4629      	mov	r1, r5
 80052fa:	4630      	mov	r0, r6
 80052fc:	f000 f838 	bl	8005370 <_sbrk_r>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d124      	bne.n	800534e <_malloc_r+0x92>
 8005304:	230c      	movs	r3, #12
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	4630      	mov	r0, r6
 800530a:	f000 f8ee 	bl	80054ea <__malloc_unlock>
 800530e:	e7e4      	b.n	80052da <_malloc_r+0x1e>
 8005310:	680b      	ldr	r3, [r1, #0]
 8005312:	1b5b      	subs	r3, r3, r5
 8005314:	d418      	bmi.n	8005348 <_malloc_r+0x8c>
 8005316:	2b0b      	cmp	r3, #11
 8005318:	d90f      	bls.n	800533a <_malloc_r+0x7e>
 800531a:	600b      	str	r3, [r1, #0]
 800531c:	50cd      	str	r5, [r1, r3]
 800531e:	18cc      	adds	r4, r1, r3
 8005320:	4630      	mov	r0, r6
 8005322:	f000 f8e2 	bl	80054ea <__malloc_unlock>
 8005326:	f104 000b 	add.w	r0, r4, #11
 800532a:	1d23      	adds	r3, r4, #4
 800532c:	f020 0007 	bic.w	r0, r0, #7
 8005330:	1ac3      	subs	r3, r0, r3
 8005332:	d0d3      	beq.n	80052dc <_malloc_r+0x20>
 8005334:	425a      	negs	r2, r3
 8005336:	50e2      	str	r2, [r4, r3]
 8005338:	e7d0      	b.n	80052dc <_malloc_r+0x20>
 800533a:	428c      	cmp	r4, r1
 800533c:	684b      	ldr	r3, [r1, #4]
 800533e:	bf16      	itet	ne
 8005340:	6063      	strne	r3, [r4, #4]
 8005342:	6013      	streq	r3, [r2, #0]
 8005344:	460c      	movne	r4, r1
 8005346:	e7eb      	b.n	8005320 <_malloc_r+0x64>
 8005348:	460c      	mov	r4, r1
 800534a:	6849      	ldr	r1, [r1, #4]
 800534c:	e7cc      	b.n	80052e8 <_malloc_r+0x2c>
 800534e:	1cc4      	adds	r4, r0, #3
 8005350:	f024 0403 	bic.w	r4, r4, #3
 8005354:	42a0      	cmp	r0, r4
 8005356:	d005      	beq.n	8005364 <_malloc_r+0xa8>
 8005358:	1a21      	subs	r1, r4, r0
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f808 	bl	8005370 <_sbrk_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d0cf      	beq.n	8005304 <_malloc_r+0x48>
 8005364:	6025      	str	r5, [r4, #0]
 8005366:	e7db      	b.n	8005320 <_malloc_r+0x64>
 8005368:	200001fc 	.word	0x200001fc
 800536c:	20000200 	.word	0x20000200

08005370 <_sbrk_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4c06      	ldr	r4, [pc, #24]	; (800538c <_sbrk_r+0x1c>)
 8005374:	2300      	movs	r3, #0
 8005376:	4605      	mov	r5, r0
 8005378:	4608      	mov	r0, r1
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	f7fd fc4a 	bl	8002c14 <_sbrk>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_sbrk_r+0x1a>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	b103      	cbz	r3, 800538a <_sbrk_r+0x1a>
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	2000020c 	.word	0x2000020c

08005390 <__sread>:
 8005390:	b510      	push	{r4, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005398:	f000 f8a8 	bl	80054ec <_read_r>
 800539c:	2800      	cmp	r0, #0
 800539e:	bfab      	itete	ge
 80053a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053a2:	89a3      	ldrhlt	r3, [r4, #12]
 80053a4:	181b      	addge	r3, r3, r0
 80053a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053aa:	bfac      	ite	ge
 80053ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80053ae:	81a3      	strhlt	r3, [r4, #12]
 80053b0:	bd10      	pop	{r4, pc}

080053b2 <__swrite>:
 80053b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b6:	461f      	mov	r7, r3
 80053b8:	898b      	ldrh	r3, [r1, #12]
 80053ba:	05db      	lsls	r3, r3, #23
 80053bc:	4605      	mov	r5, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	4616      	mov	r6, r2
 80053c2:	d505      	bpl.n	80053d0 <__swrite+0x1e>
 80053c4:	2302      	movs	r3, #2
 80053c6:	2200      	movs	r2, #0
 80053c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053cc:	f000 f868 	bl	80054a0 <_lseek_r>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	4632      	mov	r2, r6
 80053de:	463b      	mov	r3, r7
 80053e0:	4628      	mov	r0, r5
 80053e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	f000 b817 	b.w	8005418 <_write_r>

080053ea <__sseek>:
 80053ea:	b510      	push	{r4, lr}
 80053ec:	460c      	mov	r4, r1
 80053ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f2:	f000 f855 	bl	80054a0 <_lseek_r>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	bf15      	itete	ne
 80053fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80053fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005406:	81a3      	strheq	r3, [r4, #12]
 8005408:	bf18      	it	ne
 800540a:	81a3      	strhne	r3, [r4, #12]
 800540c:	bd10      	pop	{r4, pc}

0800540e <__sclose>:
 800540e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005412:	f000 b813 	b.w	800543c <_close_r>
	...

08005418 <_write_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4c07      	ldr	r4, [pc, #28]	; (8005438 <_write_r+0x20>)
 800541c:	4605      	mov	r5, r0
 800541e:	4608      	mov	r0, r1
 8005420:	4611      	mov	r1, r2
 8005422:	2200      	movs	r2, #0
 8005424:	6022      	str	r2, [r4, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	f7fd fa1a 	bl	8002860 <_write>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_write_r+0x1e>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	b103      	cbz	r3, 8005436 <_write_r+0x1e>
 8005434:	602b      	str	r3, [r5, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	2000020c 	.word	0x2000020c

0800543c <_close_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4c06      	ldr	r4, [pc, #24]	; (8005458 <_close_r+0x1c>)
 8005440:	2300      	movs	r3, #0
 8005442:	4605      	mov	r5, r0
 8005444:	4608      	mov	r0, r1
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	f7fd fbaf 	bl	8002baa <_close>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_close_r+0x1a>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	b103      	cbz	r3, 8005456 <_close_r+0x1a>
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	2000020c 	.word	0x2000020c

0800545c <_fstat_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4c07      	ldr	r4, [pc, #28]	; (800547c <_fstat_r+0x20>)
 8005460:	2300      	movs	r3, #0
 8005462:	4605      	mov	r5, r0
 8005464:	4608      	mov	r0, r1
 8005466:	4611      	mov	r1, r2
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	f7fd fbaa 	bl	8002bc2 <_fstat>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	d102      	bne.n	8005478 <_fstat_r+0x1c>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	b103      	cbz	r3, 8005478 <_fstat_r+0x1c>
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	bd38      	pop	{r3, r4, r5, pc}
 800547a:	bf00      	nop
 800547c:	2000020c 	.word	0x2000020c

08005480 <_isatty_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4c06      	ldr	r4, [pc, #24]	; (800549c <_isatty_r+0x1c>)
 8005484:	2300      	movs	r3, #0
 8005486:	4605      	mov	r5, r0
 8005488:	4608      	mov	r0, r1
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	f7fd fba9 	bl	8002be2 <_isatty>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_isatty_r+0x1a>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	b103      	cbz	r3, 800549a <_isatty_r+0x1a>
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	2000020c 	.word	0x2000020c

080054a0 <_lseek_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4c07      	ldr	r4, [pc, #28]	; (80054c0 <_lseek_r+0x20>)
 80054a4:	4605      	mov	r5, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	4611      	mov	r1, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	6022      	str	r2, [r4, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f7fd fba2 	bl	8002bf8 <_lseek>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_lseek_r+0x1e>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	b103      	cbz	r3, 80054be <_lseek_r+0x1e>
 80054bc:	602b      	str	r3, [r5, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	2000020c 	.word	0x2000020c

080054c4 <__ascii_mbtowc>:
 80054c4:	b082      	sub	sp, #8
 80054c6:	b901      	cbnz	r1, 80054ca <__ascii_mbtowc+0x6>
 80054c8:	a901      	add	r1, sp, #4
 80054ca:	b142      	cbz	r2, 80054de <__ascii_mbtowc+0x1a>
 80054cc:	b14b      	cbz	r3, 80054e2 <__ascii_mbtowc+0x1e>
 80054ce:	7813      	ldrb	r3, [r2, #0]
 80054d0:	600b      	str	r3, [r1, #0]
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	1c10      	adds	r0, r2, #0
 80054d6:	bf18      	it	ne
 80054d8:	2001      	movne	r0, #1
 80054da:	b002      	add	sp, #8
 80054dc:	4770      	bx	lr
 80054de:	4610      	mov	r0, r2
 80054e0:	e7fb      	b.n	80054da <__ascii_mbtowc+0x16>
 80054e2:	f06f 0001 	mvn.w	r0, #1
 80054e6:	e7f8      	b.n	80054da <__ascii_mbtowc+0x16>

080054e8 <__malloc_lock>:
 80054e8:	4770      	bx	lr

080054ea <__malloc_unlock>:
 80054ea:	4770      	bx	lr

080054ec <_read_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4c07      	ldr	r4, [pc, #28]	; (800550c <_read_r+0x20>)
 80054f0:	4605      	mov	r5, r0
 80054f2:	4608      	mov	r0, r1
 80054f4:	4611      	mov	r1, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fd fb38 	bl	8002b70 <_read>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_read_r+0x1e>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	b103      	cbz	r3, 800550a <_read_r+0x1e>
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	2000020c 	.word	0x2000020c

08005510 <__ascii_wctomb>:
 8005510:	b149      	cbz	r1, 8005526 <__ascii_wctomb+0x16>
 8005512:	2aff      	cmp	r2, #255	; 0xff
 8005514:	bf85      	ittet	hi
 8005516:	238a      	movhi	r3, #138	; 0x8a
 8005518:	6003      	strhi	r3, [r0, #0]
 800551a:	700a      	strbls	r2, [r1, #0]
 800551c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005520:	bf98      	it	ls
 8005522:	2001      	movls	r0, #1
 8005524:	4770      	bx	lr
 8005526:	4608      	mov	r0, r1
 8005528:	4770      	bx	lr
	...

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
