
tft-lcd BASIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  8 .bss          0002611c  2000008c  2000008c  0002008c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200261a8  200261a8  0002008c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028824  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000052a0  00000000  00000000  000488e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012063  00000000  00000000  0004db80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001648  00000000  00000000  0005fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ce0  00000000  00000000  00061230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c68f  00000000  00000000  00062f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000864f  00000000  00000000  0006f59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00077bee  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000431c  00000000  00000000  00077c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000008c 	.word	0x2000008c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004e58 	.word	0x08004e58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000090 	.word	0x20000090
 80001e8:	08004e58 	.word	0x08004e58

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x30>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000506:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800050e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000516:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f82f 	bl	800057c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f004 f972 	bl	8004808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f003 ff2e 	bl	8004384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000528:	2000      	movs	r0, #0
 800052a:	bd08      	pop	{r3, pc}
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <HAL_IncTick+0x10>)
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <HAL_IncTick+0x14>)
 8000534:	6811      	ldr	r1, [r2, #0]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	440b      	add	r3, r1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000c0 	.word	0x200000c0
 8000544:	20000000 	.word	0x20000000

08000548 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000548:	4b01      	ldr	r3, [pc, #4]	; (8000550 <HAL_GetTick+0x8>)
 800054a:	6818      	ldr	r0, [r3, #0]
}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000c0 	.word	0x200000c0

08000554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000554:	b538      	push	{r3, r4, r5, lr}
 8000556:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000558:	f7ff fff6 	bl	8000548 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800055e:	bf1c      	itt	ne
 8000560:	4b05      	ldrne	r3, [pc, #20]	; (8000578 <HAL_Delay+0x24>)
 8000562:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000564:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000566:	bf18      	it	ne
 8000568:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056a:	f7ff ffed 	bl	8000548 <HAL_GetTick>
 800056e:	1b40      	subs	r0, r0, r5
 8000570:	4284      	cmp	r4, r0
 8000572:	d8fa      	bhi.n	800056a <HAL_Delay+0x16>
  {
  }
}
 8000574:	bd38      	pop	{r3, r4, r5, pc}
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000580:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000584:	041b      	lsls	r3, r3, #16
 8000586:	0c1b      	lsrs	r3, r3, #16
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	0200      	lsls	r0, r0, #8
 800058e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000592:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000596:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000598:	60d3      	str	r3, [r2, #12]
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	68dc      	ldr	r4, [r3, #12]
 80005a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	bf28      	it	cs
 80005b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	f04f 0501 	mov.w	r5, #1
 80005bc:	fa05 f303 	lsl.w	r3, r5, r3
 80005c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c4:	bf8c      	ite	hi
 80005c6:	3c03      	subhi	r4, #3
 80005c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ca:	4019      	ands	r1, r3
 80005cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ce:	fa05 f404 	lsl.w	r4, r5, r4
 80005d2:	3c01      	subs	r4, #1
 80005d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	ea42 0201 	orr.w	r2, r2, r1
 80005dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	bfad      	iteet	ge
 80005e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	f000 000f 	andlt.w	r0, r0, #15
 80005ea:	4b06      	ldrlt	r3, [pc, #24]	; (8000604 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	bfb5      	itete	lt
 80005f2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	e000ed14 	.word	0xe000ed14

08000608 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000608:	2800      	cmp	r0, #0
 800060a:	db08      	blt.n	800061e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060c:	0942      	lsrs	r2, r0, #5
 800060e:	2301      	movs	r3, #1
 8000610:	f000 001f 	and.w	r0, r0, #31
 8000614:	fa03 f000 	lsl.w	r0, r3, r0
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <HAL_NVIC_EnableIRQ+0x18>)
 800061a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800061e:	4770      	bx	lr
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000624:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000626:	4604      	mov	r4, r0
 8000628:	b160      	cbz	r0, 8000644 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800062a:	7943      	ldrb	r3, [r0, #5]
 800062c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000630:	b913      	cbnz	r3, 8000638 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000632:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000634:	f003 fec2 	bl	80043bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000638:	2302      	movs	r3, #2
 800063a:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800063c:	2301      	movs	r3, #1
 800063e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000640:	2000      	movs	r0, #0
 8000642:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000644:	2001      	movs	r0, #1
}
 8000646:	bd10      	pop	{r4, pc}

08000648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800064c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000818 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000654:	4a6e      	ldr	r2, [pc, #440]	; (8000810 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000656:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800081c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800065c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800065e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000662:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000664:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000668:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800066c:	45b6      	cmp	lr, r6
 800066e:	f040 80b6 	bne.w	80007de <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000672:	684c      	ldr	r4, [r1, #4]
 8000674:	f024 0710 	bic.w	r7, r4, #16
 8000678:	2f02      	cmp	r7, #2
 800067a:	d116      	bne.n	80006aa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800067c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000680:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000684:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000688:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800068c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000690:	f04f 0c0f 	mov.w	ip, #15
 8000694:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000698:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800069c:	690d      	ldr	r5, [r1, #16]
 800069e:	fa05 f50b 	lsl.w	r5, r5, fp
 80006a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006a6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006aa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006b0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b4:	fa05 f50a 	lsl.w	r5, r5, sl
 80006b8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006cc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ce:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d2:	d811      	bhi.n	80006f8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006da:	68cf      	ldr	r7, [r1, #12]
 80006dc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006e0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006e8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006f0:	409f      	lsls	r7, r3
 80006f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006fc:	688f      	ldr	r7, [r1, #8]
 80006fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8000702:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000704:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000706:	00e5      	lsls	r5, r4, #3
 8000708:	d569      	bpl.n	80007de <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	f04f 0b00 	mov.w	fp, #0
 800070e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000712:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000716:	4d3f      	ldr	r5, [pc, #252]	; (8000814 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800071c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000720:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000724:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000728:	9703      	str	r7, [sp, #12]
 800072a:	9f03      	ldr	r7, [sp, #12]
 800072c:	f023 0703 	bic.w	r7, r3, #3
 8000730:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000734:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000738:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800073c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000740:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000744:	f04f 0e0f 	mov.w	lr, #15
 8000748:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800074e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000752:	d04b      	beq.n	80007ec <HAL_GPIO_Init+0x1a4>
 8000754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000758:	42a8      	cmp	r0, r5
 800075a:	d049      	beq.n	80007f0 <HAL_GPIO_Init+0x1a8>
 800075c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000760:	42a8      	cmp	r0, r5
 8000762:	d047      	beq.n	80007f4 <HAL_GPIO_Init+0x1ac>
 8000764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000768:	42a8      	cmp	r0, r5
 800076a:	d045      	beq.n	80007f8 <HAL_GPIO_Init+0x1b0>
 800076c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000770:	42a8      	cmp	r0, r5
 8000772:	d043      	beq.n	80007fc <HAL_GPIO_Init+0x1b4>
 8000774:	4548      	cmp	r0, r9
 8000776:	d043      	beq.n	8000800 <HAL_GPIO_Init+0x1b8>
 8000778:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800077c:	42a8      	cmp	r0, r5
 800077e:	d041      	beq.n	8000804 <HAL_GPIO_Init+0x1bc>
 8000780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000784:	42a8      	cmp	r0, r5
 8000786:	d03f      	beq.n	8000808 <HAL_GPIO_Init+0x1c0>
 8000788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078c:	42a8      	cmp	r0, r5
 800078e:	d03d      	beq.n	800080c <HAL_GPIO_Init+0x1c4>
 8000790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000794:	42a8      	cmp	r0, r5
 8000796:	bf14      	ite	ne
 8000798:	250a      	movne	r5, #10
 800079a:	2509      	moveq	r5, #9
 800079c:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007a4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007a6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007a8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ae:	bf0c      	ite	eq
 80007b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007b2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007b4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007b6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007bc:	bf0c      	ite	eq
 80007be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007c2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007ca:	bf0c      	ite	eq
 80007cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ce:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007d0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007d2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007d6:	bf54      	ite	pl
 80007d8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007da:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007dc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007de:	3301      	adds	r3, #1
 80007e0:	2b10      	cmp	r3, #16
 80007e2:	f47f af3c 	bne.w	800065e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007e6:	b005      	add	sp, #20
 80007e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ec:	465d      	mov	r5, fp
 80007ee:	e7d5      	b.n	800079c <HAL_GPIO_Init+0x154>
 80007f0:	2501      	movs	r5, #1
 80007f2:	e7d3      	b.n	800079c <HAL_GPIO_Init+0x154>
 80007f4:	2502      	movs	r5, #2
 80007f6:	e7d1      	b.n	800079c <HAL_GPIO_Init+0x154>
 80007f8:	2503      	movs	r5, #3
 80007fa:	e7cf      	b.n	800079c <HAL_GPIO_Init+0x154>
 80007fc:	2504      	movs	r5, #4
 80007fe:	e7cd      	b.n	800079c <HAL_GPIO_Init+0x154>
 8000800:	2505      	movs	r5, #5
 8000802:	e7cb      	b.n	800079c <HAL_GPIO_Init+0x154>
 8000804:	2506      	movs	r5, #6
 8000806:	e7c9      	b.n	800079c <HAL_GPIO_Init+0x154>
 8000808:	2507      	movs	r5, #7
 800080a:	e7c7      	b.n	800079c <HAL_GPIO_Init+0x154>
 800080c:	2508      	movs	r5, #8
 800080e:	e7c5      	b.n	800079c <HAL_GPIO_Init+0x154>
 8000810:	40013c00 	.word	0x40013c00
 8000814:	40020000 	.word	0x40020000
 8000818:	40023800 	.word	0x40023800
 800081c:	40021400 	.word	0x40021400

08000820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000820:	b10a      	cbz	r2, 8000826 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000822:	6181      	str	r1, [r0, #24]
 8000824:	4770      	bx	lr
 8000826:	0409      	lsls	r1, r1, #16
 8000828:	e7fb      	b.n	8000822 <HAL_GPIO_WritePin+0x2>

0800082a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800082a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800082e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000830:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8000834:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8000838:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 800083c:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000840:	2801      	cmp	r0, #1
 8000842:	d028      	beq.n	8000896 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8000844:	2028      	movs	r0, #40	; 0x28
 8000846:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 800084a:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 800084c:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800084e:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8000852:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000856:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 800085a:	bf08      	it	eq
 800085c:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 800085e:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000862:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000866:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800086a:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800086e:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000872:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000876:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800087a:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 800087e:	f8cd c008 	str.w	ip, [sp, #8]
 8000882:	e88d 4080 	stmia.w	sp, {r7, lr}
 8000886:	6820      	ldr	r0, [r4, #0]
 8000888:	f002 f95a 	bl	8002b40 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800088c:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8000890:	b004      	add	sp, #16
 8000892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8000896:	2002      	movs	r0, #2
 8000898:	e7fa      	b.n	8000890 <HAL_HCD_HC_Init+0x66>

0800089a <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800089a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800089e:	2b01      	cmp	r3, #1
{
 80008a0:	b510      	push	{r4, lr}
 80008a2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80008a4:	d009      	beq.n	80008ba <HAL_HCD_HC_Halt+0x20>
 80008a6:	2301      	movs	r3, #1
 80008a8:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80008ac:	6800      	ldr	r0, [r0, #0]
 80008ae:	f002 f9d1 	bl	8002c54 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 80008b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80008ba:	2002      	movs	r0, #2
}
 80008bc:	bd10      	pop	{r4, pc}

080008be <HAL_HCD_Init>:
{
 80008be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80008c2:	4607      	mov	r7, r0
{
 80008c4:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d041      	beq.n	800094e <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80008ca:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80008ce:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80008d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008d4:	b91b      	cbnz	r3, 80008de <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80008d6:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80008da:	f004 f863 	bl	80049a4 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80008de:	2303      	movs	r3, #3
 80008e0:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80008e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80008e6:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80008e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80008ec:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80008f0:	bf08      	it	eq
 80008f2:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80008f4:	f001 ffe0 	bl	80028b8 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80008f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fa:	466d      	mov	r5, sp
 80008fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000906:	e885 0003 	stmia.w	r5, {r0, r1}
 800090a:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800090e:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000910:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000914:	6838      	ldr	r0, [r7, #0]
 8000916:	f001 ff89 	bl	800282c <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800091a:	f856 0b10 	ldr.w	r0, [r6], #16
 800091e:	2101      	movs	r1, #1
 8000920:	f001 ffd0 	bl	80028c4 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000924:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000926:	466d      	mov	r5, sp
 8000928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800092c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000932:	e885 0003 	stmia.w	r5, {r0, r1}
 8000936:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	f002 f880 	bl	8002a40 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8000946:	2000      	movs	r0, #0
}
 8000948:	b00a      	add	sp, #40	; 0x28
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800094e:	2001      	movs	r0, #1
 8000950:	e7fa      	b.n	8000948 <HAL_HCD_Init+0x8a>
	...

08000954 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000956:	2428      	movs	r4, #40	; 0x28
 8000958:	fb04 0401 	mla	r4, r4, r1, r0
{
 800095c:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8000960:	9e06      	ldr	r6, [sp, #24]
 8000962:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000966:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800096a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 800096e:	b96f      	cbnz	r7, 800098c <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000970:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000972:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8000978:	d02b      	beq.n	80009d2 <HAL_HCD_HC_SubmitRequest+0x7e>
 800097a:	42bb      	cmp	r3, r7
 800097c:	d029      	beq.n	80009d2 <HAL_HCD_HC_SubmitRequest+0x7e>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d131      	bne.n	80009e6 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000982:	2328      	movs	r3, #40	; 0x28
 8000984:	fb03 0301 	mla	r3, r3, r1, r0
 8000988:	2200      	movs	r2, #0
 800098a:	e02a      	b.n	80009e2 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800098c:	f04f 0e02 	mov.w	lr, #2
 8000990:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8000994:	2b03      	cmp	r3, #3
 8000996:	d826      	bhi.n	80009e6 <HAL_HCD_HC_SubmitRequest+0x92>
 8000998:	a401      	add	r4, pc, #4	; (adr r4, 80009a0 <HAL_HCD_HC_SubmitRequest+0x4c>)
 800099a:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	080009b1 	.word	0x080009b1
 80009a4:	08000983 	.word	0x08000983
 80009a8:	080009d3 	.word	0x080009d3
 80009ac:	080009d3 	.word	0x080009d3
      if ((token == 1U) && (direction == 0U)) /*send data */
 80009b0:	2f01      	cmp	r7, #1
 80009b2:	d118      	bne.n	80009e6 <HAL_HCD_HC_SubmitRequest+0x92>
 80009b4:	b9ba      	cbnz	r2, 80009e6 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 80009b6:	b925      	cbnz	r5, 80009c2 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 80009b8:	2328      	movs	r3, #40	; 0x28
 80009ba:	fb03 0301 	mla	r3, r3, r1, r0
 80009be:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80009c2:	2328      	movs	r3, #40	; 0x28
 80009c4:	fb03 0301 	mla	r3, r3, r1, r0
 80009c8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80009cc:	b14a      	cbz	r2, 80009e2 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009ce:	2202      	movs	r2, #2
 80009d0:	e007      	b.n	80009e2 <HAL_HCD_HC_SubmitRequest+0x8e>
 80009d2:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80009d4:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80009d8:	b9d2      	cbnz	r2, 8000a10 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80009da:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d1f5      	bne.n	80009ce <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80009e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80009e6:	2428      	movs	r4, #40	; 0x28
 80009e8:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80009ec:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80009ee:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80009f2:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80009f4:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80009f6:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80009f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80009fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80009fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a02:	3138      	adds	r1, #56	; 0x38
 8000a04:	7c02      	ldrb	r2, [r0, #16]
 8000a06:	6800      	ldr	r0, [r0, #0]
}
 8000a08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a0c:	f002 b986 	b.w	8002d1c <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000a10:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000a14:	e7da      	b.n	80009cc <HAL_HCD_HC_SubmitRequest+0x78>
 8000a16:	bf00      	nop

08000a18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a1c:	6806      	ldr	r6, [r0, #0]
{
 8000a1e:	b087      	sub	sp, #28
 8000a20:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a22:	4630      	mov	r0, r6
 8000a24:	f001 ffae 	bl	8002984 <USB_GetMode>
 8000a28:	2801      	cmp	r0, #1
 8000a2a:	f040 80b4 	bne.w	8000b96 <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a2e:	6820      	ldr	r0, [r4, #0]
 8000a30:	f001 ffa4 	bl	800297c <USB_ReadInterrupts>
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f000 80ae 	beq.w	8000b96 <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a3a:	6820      	ldr	r0, [r4, #0]
 8000a3c:	f001 ff9e 	bl	800297c <USB_ReadInterrupts>
 8000a40:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a42:	bf48      	it	mi
 8000a44:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a46:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a48:	bf44      	itt	mi
 8000a4a:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000a4e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a50:	f001 ff94 	bl	800297c <USB_ReadInterrupts>
 8000a54:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000a56:	bf48      	it	mi
 8000a58:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000a5a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000a5c:	bf44      	itt	mi
 8000a5e:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000a62:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000a64:	f001 ff8a 	bl	800297c <USB_ReadInterrupts>
 8000a68:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000a6a:	bf48      	it	mi
 8000a6c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000a6e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000a70:	bf44      	itt	mi
 8000a72:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000a76:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000a78:	f001 ff80 	bl	800297c <USB_ReadInterrupts>
 8000a7c:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000a7e:	bf48      	it	mi
 8000a80:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000a82:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000a84:	bf44      	itt	mi
 8000a86:	2202      	movmi	r2, #2
 8000a88:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000a8a:	f001 ff77 	bl	800297c <USB_ReadInterrupts>
 8000a8e:	0082      	lsls	r2, r0, #2
 8000a90:	d510      	bpl.n	8000ab4 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000a92:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000a96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000a9a:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f003 ffd0 	bl	8004a44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	6820      	ldr	r0, [r4, #0]
 8000aa8:	f001 ff70 	bl	800298c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000ab4:	6820      	ldr	r0, [r4, #0]
 8000ab6:	f001 ff61 	bl	800297c <USB_ReadInterrupts>
 8000aba:	01c3      	lsls	r3, r0, #7
 8000abc:	d542      	bpl.n	8000b44 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000abe:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000ac0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000ac4:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000ac6:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000aca:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000acc:	9b05      	ldr	r3, [sp, #20]
 8000ace:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ad2:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000ad4:	9b04      	ldr	r3, [sp, #16]
 8000ad6:	079f      	lsls	r7, r3, #30
 8000ad8:	d50d      	bpl.n	8000af6 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000ada:	9b04      	ldr	r3, [sp, #16]
 8000adc:	07d8      	lsls	r0, r3, #31
 8000ade:	d506      	bpl.n	8000aee <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000ae0:	69ab      	ldr	r3, [r5, #24]
 8000ae2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ae6:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f003 ffa7 	bl	8004a3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000aee:	9b05      	ldr	r3, [sp, #20]
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000af6:	9b04      	ldr	r3, [sp, #16]
 8000af8:	0719      	lsls	r1, r3, #28
 8000afa:	d519      	bpl.n	8000b30 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000afc:	9b05      	ldr	r3, [sp, #20]
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000b04:	9b04      	ldr	r3, [sp, #16]
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	d550      	bpl.n	8000bac <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000b0a:	69a1      	ldr	r1, [r4, #24]
 8000b0c:	2902      	cmp	r1, #2
 8000b0e:	d145      	bne.n	8000b9c <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b10:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b12:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b14:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b1c:	bf18      	it	ne
 8000b1e:	2101      	movne	r1, #1
 8000b20:	f001 ff34 	bl	800298c <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000b24:	4620      	mov	r0, r4
 8000b26:	f003 ff92 	bl	8004a4e <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f003 ff86 	bl	8004a3c <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000b30:	9b04      	ldr	r3, [sp, #16]
 8000b32:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000b34:	bf42      	ittt	mi
 8000b36:	9b05      	ldrmi	r3, [sp, #20]
 8000b38:	f043 0320 	orrmi.w	r3, r3, #32
 8000b3c:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000b3e:	9b05      	ldr	r3, [sp, #20]
 8000b40:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f001 ff19 	bl	800297c <USB_ReadInterrupts>
 8000b4a:	0707      	lsls	r7, r0, #28
 8000b4c:	d505      	bpl.n	8000b5a <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f003 ff70 	bl	8004a34 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	2208      	movs	r2, #8
 8000b58:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000b5a:	6820      	ldr	r0, [r4, #0]
 8000b5c:	f001 ff0e 	bl	800297c <USB_ReadInterrupts>
 8000b60:	0185      	lsls	r5, r0, #6
 8000b62:	d512      	bpl.n	8000b8a <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	f002 f870 	bl	8002c4a <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000b6a:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000b6e:	9001      	str	r0, [sp, #4]
 8000b70:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000b74:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000b76:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000b7a:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000b7c:	68a3      	ldr	r3, [r4, #8]
 8000b7e:	459a      	cmp	sl, r3
 8000b80:	d323      	bcc.n	8000bca <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b88:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000b8a:	6820      	ldr	r0, [r4, #0]
 8000b8c:	f001 fef6 	bl	800297c <USB_ReadInterrupts>
 8000b90:	06c3      	lsls	r3, r0, #27
 8000b92:	f100 8220 	bmi.w	8000fd6 <HAL_HCD_IRQHandler+0x5be>
}
 8000b96:	b007      	add	sp, #28
 8000b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000b9c:	68e3      	ldr	r3, [r4, #12]
 8000b9e:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8000ba0:	bf04      	itt	eq
 8000ba2:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000ba6:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000baa:	e7bb      	b.n	8000b24 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000bac:	4620      	mov	r0, r4
 8000bae:	f003 ff52 	bl	8004a56 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000bb2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000bb6:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000bb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000bbc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000bc0:	6993      	ldr	r3, [r2, #24]
 8000bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	e7b2      	b.n	8000b30 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000bca:	9a01      	ldr	r2, [sp, #4]
 8000bcc:	f00a 030f 	and.w	r3, sl, #15
 8000bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd4:	07d8      	lsls	r0, r3, #31
 8000bd6:	f140 808a 	bpl.w	8000cee <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000bda:	f8d8 3000 	ldr.w	r3, [r8]
 8000bde:	6820      	ldr	r0, [r4, #0]
 8000be0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000be4:	fa5f f58a 	uxtb.w	r5, sl
 8000be8:	f000 8104 	beq.w	8000df4 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000bec:	016a      	lsls	r2, r5, #5
 8000bee:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8000bf2:	18d6      	adds	r6, r2, r3
 8000bf4:	68b1      	ldr	r1, [r6, #8]
 8000bf6:	0749      	lsls	r1, r1, #29
 8000bf8:	d513      	bpl.n	8000c22 <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000bfe:	68f1      	ldr	r1, [r6, #12]
 8000c00:	f041 0102 	orr.w	r1, r1, #2
 8000c04:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000c06:	68b1      	ldr	r1, [r6, #8]
 8000c08:	0589      	lsls	r1, r1, #22
 8000c0a:	d542      	bpl.n	8000c92 <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c0c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c0e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c16:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c18:	f002 f81c 	bl	8002c54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c20:	e0c7      	b.n	8000db2 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000c22:	68b1      	ldr	r1, [r6, #8]
 8000c24:	0689      	lsls	r1, r1, #26
 8000c26:	d502      	bpl.n	8000c2e <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000c28:	2120      	movs	r1, #32
 8000c2a:	60b1      	str	r1, [r6, #8]
 8000c2c:	e7eb      	b.n	8000c06 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000c2e:	68b1      	ldr	r1, [r6, #8]
 8000c30:	0709      	lsls	r1, r1, #28
 8000c32:	d515      	bpl.n	8000c60 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c34:	68f1      	ldr	r1, [r6, #12]
 8000c36:	9303      	str	r3, [sp, #12]
 8000c38:	f041 0102 	orr.w	r1, r1, #2
 8000c3c:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000c3e:	fb07 4105 	mla	r1, r7, r5, r4
 8000c42:	f04f 0e05 	mov.w	lr, #5
 8000c46:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000c4e:	2108      	movs	r1, #8
 8000c50:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c52:	4629      	mov	r1, r5
 8000c54:	9202      	str	r2, [sp, #8]
 8000c56:	f001 fffd 	bl	8002c54 <USB_HC_Halt>
 8000c5a:	9a02      	ldr	r2, [sp, #8]
 8000c5c:	9b03      	ldr	r3, [sp, #12]
 8000c5e:	e7d2      	b.n	8000c06 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000c60:	68b1      	ldr	r1, [r6, #8]
 8000c62:	0549      	lsls	r1, r1, #21
 8000c64:	d5cf      	bpl.n	8000c06 <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c66:	68f1      	ldr	r1, [r6, #12]
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	f041 0102 	orr.w	r1, r1, #2
 8000c6e:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c70:	4629      	mov	r1, r5
 8000c72:	9202      	str	r2, [sp, #8]
 8000c74:	f001 ffee 	bl	8002c54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000c78:	2110      	movs	r1, #16
 8000c7a:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000c7c:	fb07 4105 	mla	r1, r7, r5, r4
 8000c80:	2008      	movs	r0, #8
 8000c82:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	60b1      	str	r1, [r6, #8]
 8000c8c:	9b03      	ldr	r3, [sp, #12]
 8000c8e:	9a02      	ldr	r2, [sp, #8]
 8000c90:	e7b9      	b.n	8000c06 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000c92:	68b1      	ldr	r1, [r6, #8]
 8000c94:	07c8      	lsls	r0, r1, #31
 8000c96:	d53d      	bpl.n	8000d14 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8000c98:	6921      	ldr	r1, [r4, #16]
 8000c9a:	b149      	cbz	r1, 8000cb0 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000c9c:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000ca0:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000ca2:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000ca6:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000caa:	1a09      	subs	r1, r1, r0
 8000cac:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8000cb0:	fb07 4e05 	mla	lr, r7, r5, r4
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000cba:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000cbe:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000cc0:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8000cc4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000cc8:	d116      	bne.n	8000cf8 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000cca:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ccc:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	f001 ffbd 	bl	8002c54 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000cda:	2310      	movs	r3, #16
 8000cdc:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8000cde:	fb07 4505 	mla	r5, r7, r5, r4
 8000ce2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000cee:	f10a 0a01 	add.w	sl, sl, #1
 8000cf2:	f108 0820 	add.w	r8, r8, #32
 8000cf6:	e741      	b.n	8000b7c <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000cf8:	2903      	cmp	r1, #3
 8000cfa:	d1f0      	bne.n	8000cde <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000cfc:	58d1      	ldr	r1, [r2, r3]
 8000cfe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000d02:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000d04:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d08:	4602      	mov	r2, r0
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f003 fe9d 	bl	8004a4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8000d12:	e7e4      	b.n	8000cde <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000d14:	68b1      	ldr	r1, [r6, #8]
 8000d16:	0789      	lsls	r1, r1, #30
 8000d18:	d536      	bpl.n	8000d88 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d1a:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d1c:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d20:	f021 0102 	bic.w	r1, r1, #2
 8000d24:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d26:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000d2a:	2901      	cmp	r1, #1
 8000d2c:	d10c      	bne.n	8000d48 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000d2e:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d32:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000d36:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d3a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000d3e:	4629      	mov	r1, r5
 8000d40:	4620      	mov	r0, r4
 8000d42:	f003 fe83 	bl	8004a4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8000d46:	e7d2      	b.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000d48:	2905      	cmp	r1, #5
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000d4c:	2906      	cmp	r1, #6
 8000d4e:	d001      	beq.n	8000d54 <HAL_HCD_IRQHandler+0x33c>
 8000d50:	2908      	cmp	r1, #8
 8000d52:	d114      	bne.n	8000d7e <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8000d54:	fb07 4105 	mla	r1, r7, r5, r4
 8000d58:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000d5a:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8000d5c:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8000d5e:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000d60:	bf83      	ittte	hi
 8000d62:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000d64:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000d68:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000d6c:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000d70:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000d72:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000d76:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000d7a:	50d1      	str	r1, [r2, r3]
 8000d7c:	e7d9      	b.n	8000d32 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000d7e:	2903      	cmp	r1, #3
 8000d80:	d1d7      	bne.n	8000d32 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000d82:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8000d86:	e7f3      	b.n	8000d70 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000d88:	68b1      	ldr	r1, [r6, #8]
 8000d8a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8000d8e:	d012      	beq.n	8000db6 <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d90:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d92:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8000d9a:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d9e:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8000da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000da2:	3201      	adds	r2, #1
 8000da4:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000da6:	2206      	movs	r2, #6
 8000da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dac:	f001 ff52 	bl	8002c54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	60b3      	str	r3, [r6, #8]
 8000db4:	e79b      	b.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000db6:	68b3      	ldr	r3, [r6, #8]
 8000db8:	06da      	lsls	r2, r3, #27
 8000dba:	d598      	bpl.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000dbc:	fb07 4205 	mla	r2, r7, r5, r4
 8000dc0:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d10a      	bne.n	8000dde <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000dc8:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000dca:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dcc:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	f001 ff3d 	bl	8002c54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000dda:	2310      	movs	r3, #16
 8000ddc:	e7e9      	b.n	8000db2 <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000dde:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8000de2:	d1fa      	bne.n	8000dda <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8000de6:	6923      	ldr	r3, [r4, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f6      	bne.n	8000dda <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8000df2:	e7ea      	b.n	8000dca <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000df4:	0169      	lsls	r1, r5, #5
 8000df6:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8000dfa:	188e      	adds	r6, r1, r2
 8000dfc:	68b3      	ldr	r3, [r6, #8]
 8000dfe:	f013 0e04 	ands.w	lr, r3, #4
 8000e02:	d006      	beq.n	8000e12 <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e04:	2304      	movs	r3, #4
 8000e06:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e08:	68f3      	ldr	r3, [r6, #12]
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	60f3      	str	r3, [r6, #12]
 8000e10:	e76d      	b.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e12:	68b3      	ldr	r3, [r6, #8]
 8000e14:	f013 0320 	ands.w	r3, r3, #32
 8000e18:	d014      	beq.n	8000e44 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000e1e:	fb07 4305 	mla	r3, r7, r5, r4
 8000e22:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000e26:	2a01      	cmp	r2, #1
 8000e28:	f47f af61 	bne.w	8000cee <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8000e2c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000e30:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e34:	68f3      	ldr	r3, [r6, #12]
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f001 ff09 	bl	8002c54 <USB_HC_Halt>
 8000e42:	e754      	b.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8000e44:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8000e48:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000e4c:	d011      	beq.n	8000e72 <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8000e4e:	fb07 4205 	mla	r2, r7, r5, r4
 8000e52:	2104      	movs	r1, #4
 8000e54:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8000e58:	2101      	movs	r1, #1
 8000e5a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000e5e:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e60:	68f3      	ldr	r3, [r6, #12]
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e68:	4629      	mov	r1, r5
 8000e6a:	f001 fef3 	bl	8002c54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8000e6e:	2340      	movs	r3, #64	; 0x40
 8000e70:	e79f      	b.n	8000db2 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000e72:	68b3      	ldr	r3, [r6, #8]
 8000e74:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8000e78:	d005      	beq.n	8000e86 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e7a:	68f3      	ldr	r3, [r6, #12]
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e82:	4629      	mov	r1, r5
 8000e84:	e6c8      	b.n	8000c18 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000e86:	68b3      	ldr	r3, [r6, #8]
 8000e88:	07db      	lsls	r3, r3, #31
 8000e8a:	d511      	bpl.n	8000eb0 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e8c:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000e8e:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e92:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000e96:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e9a:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e9c:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000e9e:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ea0:	f001 fed8 	bl	8002c54 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8000ea4:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8000eae:	e71e      	b.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000eb0:	68b3      	ldr	r3, [r6, #8]
 8000eb2:	071b      	lsls	r3, r3, #28
 8000eb4:	d50e      	bpl.n	8000ed4 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000eba:	68f3      	ldr	r3, [r6, #12]
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	f001 fec6 	bl	8002c54 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8000ec8:	fb07 4505 	mla	r5, r7, r5, r4
 8000ecc:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000ece:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000ed2:	e70c      	b.n	8000cee <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000ed4:	68b3      	ldr	r3, [r6, #8]
 8000ed6:	06db      	lsls	r3, r3, #27
 8000ed8:	d515      	bpl.n	8000f06 <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000eda:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8000ede:	2203      	movs	r2, #3
 8000ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000ee4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ee8:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000eec:	b92a      	cbnz	r2, 8000efa <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8000eee:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000ef2:	b912      	cbnz	r2, 8000efa <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000efa:	68f3      	ldr	r3, [r6, #12]
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f02:	4629      	mov	r1, r5
 8000f04:	e767      	b.n	8000dd6 <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000f06:	68b3      	ldr	r3, [r6, #8]
 8000f08:	061b      	lsls	r3, r3, #24
 8000f0a:	d50c      	bpl.n	8000f26 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f0c:	68f3      	ldr	r3, [r6, #12]
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f14:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f16:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f1a:	f001 fe9b 	bl	8002c54 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f24:	e744      	b.n	8000db0 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f26:	68b3      	ldr	r3, [r6, #8]
 8000f28:	055b      	lsls	r3, r3, #21
 8000f2a:	d50f      	bpl.n	8000f4c <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f2c:	68f3      	ldr	r3, [r6, #12]
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f34:	4629      	mov	r1, r5
 8000f36:	f001 fe8d 	bl	8002c54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f44:	fb07 4505 	mla	r5, r7, r5, r4
 8000f48:	2308      	movs	r3, #8
 8000f4a:	e7c0      	b.n	8000ece <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000f4c:	68b3      	ldr	r3, [r6, #8]
 8000f4e:	0798      	lsls	r0, r3, #30
 8000f50:	f57f aecd 	bpl.w	8000cee <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000f54:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f56:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000f5a:	f023 0302 	bic.w	r3, r3, #2
 8000f5e:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f60:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10e      	bne.n	8000f86 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8000f68:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8000f6c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8000f70:	3b02      	subs	r3, #2
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	f63f aedd 	bhi.w	8000d32 <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8000f78:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8000f84:	e6d5      	b.n	8000d32 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d102      	bne.n	8000f90 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000f8a:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8000f8e:	e6d0      	b.n	8000d32 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d0fa      	beq.n	8000f8a <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d102      	bne.n	8000f9e <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000f98:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8000f9c:	e6c9      	b.n	8000d32 <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d002      	beq.n	8000fa8 <HAL_HCD_IRQHandler+0x590>
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	f47f aec5 	bne.w	8000d32 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8000fa8:	fb07 4005 	mla	r0, r7, r5, r4
 8000fac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000fae:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8000fb0:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8000fb2:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000fb4:	bf84      	itt	hi
 8000fb6:	2304      	movhi	r3, #4
 8000fb8:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000fbc:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000fbe:	bf88      	it	hi
 8000fc0:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000fcc:	bf98      	it	ls
 8000fce:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000fd2:	508b      	str	r3, [r1, r2]
 8000fd4:	e6ad      	b.n	8000d32 <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fd6:	6826      	ldr	r6, [r4, #0]
 8000fd8:	69b3      	ldr	r3, [r6, #24]
 8000fda:	f023 0310 	bic.w	r3, r3, #16
 8000fde:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8000fe0:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000fe2:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8000fe6:	2a02      	cmp	r2, #2
 8000fe8:	d129      	bne.n	800103e <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fea:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000fee:	f1b8 0f00 	cmp.w	r8, #0
 8000ff2:	d024      	beq.n	800103e <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8000ff4:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000ff8:	2728      	movs	r7, #40	; 0x28
 8000ffa:	fb07 4705 	mla	r7, r7, r5, r4
 8000ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001000:	b1e9      	cbz	r1, 800103e <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001002:	4642      	mov	r2, r8
 8001004:	4630      	mov	r0, r6
 8001006:	f001 fcab 	bl	8002960 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	4443      	add	r3, r8
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001012:	4443      	add	r3, r8
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001016:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800101a:	016b      	lsls	r3, r5, #5
 800101c:	199a      	adds	r2, r3, r6
 800101e:	6911      	ldr	r1, [r2, #16]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_HCD_IRQHandler+0x634>)
 8001022:	400a      	ands	r2, r1
 8001024:	b15a      	cbz	r2, 800103e <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001026:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001028:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800102c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001030:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001032:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001036:	f083 0301 	eor.w	r3, r3, #1
 800103a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	6993      	ldr	r3, [r2, #24]
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	e5a5      	b.n	8000b96 <HAL_HCD_IRQHandler+0x17e>
 800104a:	bf00      	nop
 800104c:	1ff80000 	.word	0x1ff80000

08001050 <HAL_HCD_Start>:
{
 8001050:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8001052:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001056:	2b01      	cmp	r3, #1
{
 8001058:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800105a:	d00d      	beq.n	8001078 <HAL_HCD_Start+0x28>
 800105c:	2501      	movs	r5, #1
 800105e:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001062:	6800      	ldr	r0, [r0, #0]
 8001064:	f001 fc22 	bl	80028ac <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001068:	4629      	mov	r1, r5
 800106a:	6820      	ldr	r0, [r4, #0]
 800106c:	f001 fcc8 	bl	8002a00 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001070:	2000      	movs	r0, #0
 8001072:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001076:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001078:	2002      	movs	r0, #2
}
 800107a:	bd38      	pop	{r3, r4, r5, pc}

0800107c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 800107c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001080:	2b01      	cmp	r3, #1
{
 8001082:	b510      	push	{r4, lr}
 8001084:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001086:	d009      	beq.n	800109c <HAL_HCD_Stop+0x20>
 8001088:	2301      	movs	r3, #1
 800108a:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800108e:	6800      	ldr	r0, [r0, #0]
 8001090:	f001 fef6 	bl	8002e80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001094:	2000      	movs	r0, #0
 8001096:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800109a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800109c:	2002      	movs	r0, #2
}
 800109e:	bd10      	pop	{r4, pc}

080010a0 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80010a0:	6800      	ldr	r0, [r0, #0]
 80010a2:	f001 bc8f 	b.w	80029c4 <USB_ResetPort>

080010a6 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80010a6:	2328      	movs	r3, #40	; 0x28
 80010a8:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010ac:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80010b0:	4770      	bx	lr

080010b2 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80010b2:	2328      	movs	r3, #40	; 0x28
 80010b4:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010b8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80010ba:	4770      	bx	lr

080010bc <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	f001 bd3a 	b.w	8002b36 <USB_GetCurrentFrame>

080010c2 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80010c2:	6800      	ldr	r0, [r0, #0]
 80010c4:	f001 bd2c 	b.w	8002b20 <USB_GetHostSpeed>

080010c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010ca:	4604      	mov	r4, r0
 80010cc:	b908      	cbnz	r0, 80010d2 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80010ce:	2001      	movs	r0, #1
 80010d0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010da:	b91b      	cbnz	r3, 80010e4 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010e0:	f003 f984 	bl	80043ec <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e6:	2324      	movs	r3, #36	; 0x24
 80010e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010f4:	f000 fcb0 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010f8:	6865      	ldr	r5, [r4, #4]
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <HAL_I2C_Init+0x138>)
 80010fc:	429d      	cmp	r5, r3
 80010fe:	d84d      	bhi.n	800119c <HAL_I2C_Init+0xd4>
 8001100:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_I2C_Init+0x13c>)
 8001102:	4298      	cmp	r0, r3
 8001104:	d9e3      	bls.n	80010ce <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001106:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001108:	493f      	ldr	r1, [pc, #252]	; (8001208 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800110a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800110c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001114:	430b      	orrs	r3, r1
 8001116:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001118:	6a13      	ldr	r3, [r2, #32]
 800111a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800111e:	3101      	adds	r1, #1
 8001120:	4319      	orrs	r1, r3
 8001122:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001124:	69d1      	ldr	r1, [r2, #28]
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_I2C_Init+0x138>)
 8001128:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800112c:	429d      	cmp	r5, r3
 800112e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001132:	f100 30ff 	add.w	r0, r0, #4294967295
 8001136:	d848      	bhi.n	80011ca <HAL_I2C_Init+0x102>
 8001138:	006d      	lsls	r5, r5, #1
 800113a:	fbb0 f0f5 	udiv	r0, r0, r5
 800113e:	3001      	adds	r0, #1
 8001140:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001144:	2b04      	cmp	r3, #4
 8001146:	bf38      	it	cc
 8001148:	2304      	movcc	r3, #4
 800114a:	430b      	orrs	r3, r1
 800114c:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800114e:	6811      	ldr	r1, [r2, #0]
 8001150:	6a20      	ldr	r0, [r4, #32]
 8001152:	69e3      	ldr	r3, [r4, #28]
 8001154:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001158:	4303      	orrs	r3, r0
 800115a:	430b      	orrs	r3, r1
 800115c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800115e:	6891      	ldr	r1, [r2, #8]
 8001160:	68e0      	ldr	r0, [r4, #12]
 8001162:	6923      	ldr	r3, [r4, #16]
 8001164:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001168:	4303      	orrs	r3, r0
 800116a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800116e:	430b      	orrs	r3, r1
 8001170:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001172:	68d1      	ldr	r1, [r2, #12]
 8001174:	69a0      	ldr	r0, [r4, #24]
 8001176:	6963      	ldr	r3, [r4, #20]
 8001178:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800117c:	4303      	orrs	r3, r0
 800117e:	430b      	orrs	r3, r1
 8001180:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800118c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001194:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001196:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800119a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_I2C_Init+0x144>)
 800119e:	4298      	cmp	r0, r3
 80011a0:	d995      	bls.n	80010ce <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011a2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80011a4:	4e18      	ldr	r6, [pc, #96]	; (8001208 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011a6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80011a8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b0:	4333      	orrs	r3, r6
 80011b2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011b4:	6a13      	ldr	r3, [r2, #32]
 80011b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011ba:	4371      	muls	r1, r6
 80011bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80011c4:	fbb1 f1f6 	udiv	r1, r1, r6
 80011c8:	e7a9      	b.n	800111e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011ca:	68a3      	ldr	r3, [r4, #8]
 80011cc:	b953      	cbnz	r3, 80011e4 <HAL_I2C_Init+0x11c>
 80011ce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80011d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011dc:	b16b      	cbz	r3, 80011fa <HAL_I2C_Init+0x132>
 80011de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e2:	e7b2      	b.n	800114a <HAL_I2C_Init+0x82>
 80011e4:	2319      	movs	r3, #25
 80011e6:	436b      	muls	r3, r5
 80011e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ec:	1c43      	adds	r3, r0, #1
 80011ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f2:	b113      	cbz	r3, 80011fa <HAL_I2C_Init+0x132>
 80011f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f8:	e7a7      	b.n	800114a <HAL_I2C_Init+0x82>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e7a5      	b.n	800114a <HAL_I2C_Init+0x82>
 80011fe:	bf00      	nop
 8001200:	000186a0 	.word	0x000186a0
 8001204:	001e847f 	.word	0x001e847f
 8001208:	000f4240 	.word	0x000f4240
 800120c:	003d08ff 	.word	0x003d08ff

08001210 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001210:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	2a20      	cmp	r2, #32
{
 8001218:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800121a:	d116      	bne.n	800124a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800121c:	2324      	movs	r3, #36	; 0x24
 800121e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001222:	6803      	ldr	r3, [r0, #0]
 8001224:	681c      	ldr	r4, [r3, #0]
 8001226:	f024 0401 	bic.w	r4, r4, #1
 800122a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800122c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800122e:	f024 0410 	bic.w	r4, r4, #16
 8001232:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001234:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001236:	4321      	orrs	r1, r4
 8001238:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	f041 0101 	orr.w	r1, r1, #1
 8001240:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001242:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8001246:	2000      	movs	r0, #0
 8001248:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800124a:	2002      	movs	r0, #2
  }
}
 800124c:	bd10      	pop	{r4, pc}

0800124e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800124e:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001250:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001254:	b2e4      	uxtb	r4, r4
 8001256:	2c20      	cmp	r4, #32
 8001258:	d116      	bne.n	8001288 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800125a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800125c:	2324      	movs	r3, #36	; 0x24
 800125e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001262:	6815      	ldr	r5, [r2, #0]
 8001264:	f025 0501 	bic.w	r5, r5, #1
 8001268:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800126a:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800126c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001270:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001272:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001274:	b29b      	uxth	r3, r3
 8001276:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001278:	6813      	ldr	r3, [r2, #0]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001280:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8001284:	2000      	movs	r0, #0
 8001286:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8001288:	2002      	movs	r0, #2
  }
}
 800128a:	bd30      	pop	{r4, r5, pc}

0800128c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800128c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001290:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001292:	6804      	ldr	r4, [r0, #0]
 8001294:	684f      	ldr	r7, [r1, #4]
 8001296:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001298:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800129c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80012a0:	3284      	adds	r2, #132	; 0x84
 80012a2:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80012a4:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80012a8:	6858      	ldr	r0, [r3, #4]
 80012aa:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80012ae:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80012b0:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80012b2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80012b6:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80012ba:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80012bc:	4430      	add	r0, r6
 80012be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80012c2:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80012c4:	68e0      	ldr	r0, [r4, #12]
 80012c6:	68cd      	ldr	r5, [r1, #12]
 80012c8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80012cc:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80012ce:	6898      	ldr	r0, [r3, #8]
 80012d0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80012d4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80012d6:	68e6      	ldr	r6, [r4, #12]
 80012d8:	6888      	ldr	r0, [r1, #8]
 80012da:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80012de:	3001      	adds	r0, #1
 80012e0:	4430      	add	r0, r6
 80012e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80012e6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80012e8:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80012ea:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80012ec:	f020 0007 	bic.w	r0, r0, #7
 80012f0:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80012f2:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80012f6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80012f8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80012fa:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80012fe:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001302:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001306:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800130a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800130e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001312:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001316:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001318:	6958      	ldr	r0, [r3, #20]
 800131a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800131e:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001320:	6948      	ldr	r0, [r1, #20]
 8001322:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001324:	69d8      	ldr	r0, [r3, #28]
 8001326:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800132a:	f020 0007 	bic.w	r0, r0, #7
 800132e:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001330:	6a08      	ldr	r0, [r1, #32]
 8001332:	69cd      	ldr	r5, [r1, #28]
 8001334:	4305      	orrs	r5, r0
 8001336:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001338:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800133a:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800133c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001340:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001342:	b31e      	cbz	r6, 800138c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001344:	2e01      	cmp	r6, #1
 8001346:	d023      	beq.n	8001390 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001348:	1eb0      	subs	r0, r6, #2
 800134a:	2802      	cmp	r0, #2
 800134c:	d922      	bls.n	8001394 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800134e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001350:	bf0c      	ite	eq
 8001352:	2002      	moveq	r0, #2
 8001354:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001356:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001358:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800135c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800135e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001360:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001362:	eba7 070e 	sub.w	r7, r7, lr
 8001366:	4345      	muls	r5, r0
 8001368:	4378      	muls	r0, r7
 800136a:	3003      	adds	r0, #3
 800136c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001370:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001372:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001374:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001378:	f020 0007 	bic.w	r0, r0, #7
 800137c:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800137e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001380:	58a3      	ldr	r3, [r4, r2]
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	50a3      	str	r3, [r4, r2]
 8001388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800138c:	2004      	movs	r0, #4
 800138e:	e7e2      	b.n	8001356 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001390:	2003      	movs	r0, #3
 8001392:	e7e0      	b.n	8001356 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001394:	2002      	movs	r0, #2
 8001396:	e7de      	b.n	8001356 <LTDC_SetConfig+0xca>

08001398 <HAL_LTDC_Init>:
{
 8001398:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800139a:	4604      	mov	r4, r0
 800139c:	2800      	cmp	r0, #0
 800139e:	d063      	beq.n	8001468 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80013a0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80013a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013a8:	b91b      	cbnz	r3, 80013b2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80013aa:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80013ae:	f003 f871 	bl	8004494 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80013b8:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80013ba:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80013c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80013c4:	6862      	ldr	r2, [r4, #4]
 80013c6:	6999      	ldr	r1, [r3, #24]
 80013c8:	4302      	orrs	r2, r0
 80013ca:	68e0      	ldr	r0, [r4, #12]
 80013cc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80013ce:	6920      	ldr	r0, [r4, #16]
 80013d0:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80013d2:	430a      	orrs	r2, r1
 80013d4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	4924      	ldr	r1, [pc, #144]	; (800146c <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80013da:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80013dc:	400a      	ands	r2, r1
 80013de:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80013e6:	69a0      	ldr	r0, [r4, #24]
 80013e8:	4302      	orrs	r2, r0
 80013ea:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80013ec:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80013ee:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80013f0:	400a      	ands	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80013fa:	6a20      	ldr	r0, [r4, #32]
 80013fc:	4302      	orrs	r2, r0
 80013fe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001400:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001402:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001404:	400a      	ands	r2, r1
 8001406:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800140e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001410:	4302      	orrs	r2, r0
 8001412:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4011      	ands	r1, r2
 8001418:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800141a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800141c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800141e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001422:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001424:	430a      	orrs	r2, r1
 8001426:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800142a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800142e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001432:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001436:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800143e:	430a      	orrs	r2, r1
 8001440:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001444:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800144a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144c:	f042 0206 	orr.w	r2, r2, #6
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	f042 0201 	orr.w	r2, r2, #1
 8001458:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800145a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800145c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800145e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001462:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001466:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
}
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	f000f800 	.word	0xf000f800

08001470 <HAL_LTDC_ErrorCallback>:
 8001470:	4770      	bx	lr

08001472 <HAL_LTDC_LineEventCallback>:
 8001472:	4770      	bx	lr

08001474 <HAL_LTDC_ReloadEventCallback>:
{
 8001474:	4770      	bx	lr

08001476 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001476:	6803      	ldr	r3, [r0, #0]
{
 8001478:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800147a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800147c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800147e:	0772      	lsls	r2, r6, #29
{
 8001480:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001482:	d514      	bpl.n	80014ae <HAL_LTDC_IRQHandler+0x38>
 8001484:	0769      	lsls	r1, r5, #29
 8001486:	d512      	bpl.n	80014ae <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	f022 0204 	bic.w	r2, r2, #4
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001490:	2204      	movs	r2, #4
 8001492:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001494:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80014a0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80014a2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80014a6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80014aa:	f7ff ffe1 	bl	8001470 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80014ae:	07b2      	lsls	r2, r6, #30
 80014b0:	d516      	bpl.n	80014e0 <HAL_LTDC_IRQHandler+0x6a>
 80014b2:	07ab      	lsls	r3, r5, #30
 80014b4:	d514      	bpl.n	80014e0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ba:	f022 0202 	bic.w	r2, r2, #2
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80014c0:	2202      	movs	r2, #2
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80014c4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80014c8:	4313      	orrs	r3, r2
 80014ca:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80014ce:	2304      	movs	r3, #4
 80014d0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80014d4:	2300      	movs	r3, #0
 80014d6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ffc8 	bl	8001470 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80014e0:	07f0      	lsls	r0, r6, #31
 80014e2:	d510      	bpl.n	8001506 <HAL_LTDC_IRQHandler+0x90>
 80014e4:	07e9      	lsls	r1, r5, #31
 80014e6:	d50e      	bpl.n	8001506 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80014f2:	2201      	movs	r2, #1
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80014f6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80014f8:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80014fc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001500:	4620      	mov	r0, r4
 8001502:	f7ff ffb6 	bl	8001472 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001506:	0732      	lsls	r2, r6, #28
 8001508:	d511      	bpl.n	800152e <HAL_LTDC_IRQHandler+0xb8>
 800150a:	072b      	lsls	r3, r5, #28
 800150c:	d50f      	bpl.n	800152e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001512:	f022 0208 	bic.w	r2, r2, #8
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001518:	2208      	movs	r2, #8
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800151c:	2301      	movs	r3, #1
 800151e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001522:	2300      	movs	r3, #0
 8001524:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff ffa3 	bl	8001474 <HAL_LTDC_ReloadEventCallback>
 800152e:	bd70      	pop	{r4, r5, r6, pc}

08001530 <HAL_LTDC_ConfigLayer>:
{
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001532:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001536:	2b01      	cmp	r3, #1
{
 8001538:	4606      	mov	r6, r0
 800153a:	468e      	mov	lr, r1
 800153c:	4694      	mov	ip, r2
 800153e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8001542:	d01d      	beq.n	8001580 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001544:	2434      	movs	r4, #52	; 0x34
 8001546:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001548:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800154c:	fb04 6402 	mla	r4, r4, r2, r6
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8001552:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001554:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8001556:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800155a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001568:	4630      	mov	r0, r6
 800156a:	4662      	mov	r2, ip
 800156c:	4671      	mov	r1, lr
 800156e:	f7ff fe8d 	bl	800128c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001572:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001574:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001576:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001578:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800157c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001582 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8001582:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001586:	2b01      	cmp	r3, #1
{
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	f04f 0302 	mov.w	r3, #2
 800158e:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001590:	d015      	beq.n	80015be <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001592:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8001596:	2334      	movs	r3, #52	; 0x34
 8001598:	4353      	muls	r3, r2
 800159a:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 800159c:	2501      	movs	r5, #1
 800159e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 80015a2:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80015a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80015a8:	4401      	add	r1, r0
 80015aa:	f7ff fe6f 	bl	800128c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80015ae:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80015b0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80015b2:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80015b4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80015b8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 80015bc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80015be:	4618      	mov	r0, r3
}
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	4604      	mov	r4, r0
 80015ca:	b918      	cbnz	r0, 80015d4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80015cc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80015ce:	b002      	add	sp, #8
 80015d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d4:	6803      	ldr	r3, [r0, #0]
 80015d6:	07dd      	lsls	r5, r3, #31
 80015d8:	d410      	bmi.n	80015fc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	0798      	lsls	r0, r3, #30
 80015de:	d458      	bmi.n	8001692 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	071a      	lsls	r2, r3, #28
 80015e4:	f100 809a 	bmi.w	800171c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	075b      	lsls	r3, r3, #29
 80015ec:	f100 80b8 	bmi.w	8001760 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f0:	69a2      	ldr	r2, [r4, #24]
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	f040 8119 	bne.w	800182a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80015f8:	2000      	movs	r0, #0
 80015fa:	e7e8      	b.n	80015ce <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fc:	4ba6      	ldr	r3, [pc, #664]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	f002 020c 	and.w	r2, r2, #12
 8001604:	2a04      	cmp	r2, #4
 8001606:	d007      	beq.n	8001618 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	2a08      	cmp	r2, #8
 8001610:	d10a      	bne.n	8001628 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	0259      	lsls	r1, r3, #9
 8001616:	d507      	bpl.n	8001628 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	039a      	lsls	r2, r3, #14
 800161e:	d5dc      	bpl.n	80015da <HAL_RCC_OscConfig+0x16>
 8001620:	6863      	ldr	r3, [r4, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1d9      	bne.n	80015da <HAL_RCC_OscConfig+0x16>
 8001626:	e7d1      	b.n	80015cc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	4d9b      	ldr	r5, [pc, #620]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d111      	bne.n	8001656 <HAL_RCC_OscConfig+0x92>
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800163a:	f7fe ff85 	bl	8000548 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4d96      	ldr	r5, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001640:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	039b      	lsls	r3, r3, #14
 8001646:	d4c8      	bmi.n	80015da <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7fe ff7e 	bl	8000548 <HAL_GetTick>
 800164c:	1b80      	subs	r0, r0, r6
 800164e:	2864      	cmp	r0, #100	; 0x64
 8001650:	d9f7      	bls.n	8001642 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001652:	2003      	movs	r0, #3
 8001654:	e7bb      	b.n	80015ce <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165a:	d104      	bne.n	8001666 <HAL_RCC_OscConfig+0xa2>
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001662:	602b      	str	r3, [r5, #0]
 8001664:	e7e5      	b.n	8001632 <HAL_RCC_OscConfig+0x6e>
 8001666:	682a      	ldr	r2, [r5, #0]
 8001668:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800166c:	602a      	str	r2, [r5, #0]
 800166e:	682a      	ldr	r2, [r5, #0]
 8001670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001674:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1df      	bne.n	800163a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800167a:	f7fe ff65 	bl	8000548 <HAL_GetTick>
 800167e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	039f      	lsls	r7, r3, #14
 8001684:	d5a9      	bpl.n	80015da <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001686:	f7fe ff5f 	bl	8000548 <HAL_GetTick>
 800168a:	1b80      	subs	r0, r0, r6
 800168c:	2864      	cmp	r0, #100	; 0x64
 800168e:	d9f7      	bls.n	8001680 <HAL_RCC_OscConfig+0xbc>
 8001690:	e7df      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	f012 0f0c 	tst.w	r2, #12
 800169a:	d007      	beq.n	80016ac <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	2a08      	cmp	r2, #8
 80016a4:	d111      	bne.n	80016ca <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	025e      	lsls	r6, r3, #9
 80016aa:	d40e      	bmi.n	80016ca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ac:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	0795      	lsls	r5, r2, #30
 80016b2:	d502      	bpl.n	80016ba <HAL_RCC_OscConfig+0xf6>
 80016b4:	68e2      	ldr	r2, [r4, #12]
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d188      	bne.n	80015cc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6921      	ldr	r1, [r4, #16]
 80016be:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80016c2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80016c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c8:	e78a      	b.n	80015e0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ca:	68e2      	ldr	r2, [r4, #12]
 80016cc:	4b73      	ldr	r3, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x2d8>)
 80016ce:	b1b2      	cbz	r2, 80016fe <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016d4:	f7fe ff38 	bl	8000548 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4d6f      	ldr	r5, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	0798      	lsls	r0, r3, #30
 80016e0:	d507      	bpl.n	80016f2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	6922      	ldr	r2, [r4, #16]
 80016e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016ee:	602b      	str	r3, [r5, #0]
 80016f0:	e776      	b.n	80015e0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f2:	f7fe ff29 	bl	8000548 <HAL_GetTick>
 80016f6:	1b80      	subs	r0, r0, r6
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d9ef      	bls.n	80016dc <HAL_RCC_OscConfig+0x118>
 80016fc:	e7a9      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80016fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001700:	f7fe ff22 	bl	8000548 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001704:	4d64      	ldr	r5, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001706:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	0799      	lsls	r1, r3, #30
 800170c:	f57f af68 	bpl.w	80015e0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001710:	f7fe ff1a 	bl	8000548 <HAL_GetTick>
 8001714:	1b80      	subs	r0, r0, r6
 8001716:	2802      	cmp	r0, #2
 8001718:	d9f6      	bls.n	8001708 <HAL_RCC_OscConfig+0x144>
 800171a:	e79a      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800171c:	6962      	ldr	r2, [r4, #20]
 800171e:	4b60      	ldr	r3, [pc, #384]	; (80018a0 <HAL_RCC_OscConfig+0x2dc>)
 8001720:	b17a      	cbz	r2, 8001742 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001726:	f7fe ff0f 	bl	8000548 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4d5b      	ldr	r5, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800172c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001730:	079f      	lsls	r7, r3, #30
 8001732:	f53f af59 	bmi.w	80015e8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7fe ff07 	bl	8000548 <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2802      	cmp	r0, #2
 800173e:	d9f6      	bls.n	800172e <HAL_RCC_OscConfig+0x16a>
 8001740:	e787      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001742:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001744:	f7fe ff00 	bl	8000548 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4d53      	ldr	r5, [pc, #332]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800174a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800174e:	0798      	lsls	r0, r3, #30
 8001750:	f57f af4a 	bpl.w	80015e8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001754:	f7fe fef8 	bl	8000548 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	2802      	cmp	r0, #2
 800175c:	d9f6      	bls.n	800174c <HAL_RCC_OscConfig+0x188>
 800175e:	e778      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 8001762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001764:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001768:	d128      	bne.n	80017bc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	9201      	str	r2, [sp, #4]
 800176c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800177e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4d48      	ldr	r5, [pc, #288]	; (80018a4 <HAL_RCC_OscConfig+0x2e0>)
 8001782:	682b      	ldr	r3, [r5, #0]
 8001784:	05d9      	lsls	r1, r3, #23
 8001786:	d51b      	bpl.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	68a3      	ldr	r3, [r4, #8]
 800178a:	4d43      	ldr	r5, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 800178c:	2b01      	cmp	r3, #1
 800178e:	d127      	bne.n	80017e0 <HAL_RCC_OscConfig+0x21c>
 8001790:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001798:	f7fe fed6 	bl	8000548 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179c:	4d3e      	ldr	r5, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800179e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017a6:	079b      	lsls	r3, r3, #30
 80017a8:	d539      	bpl.n	800181e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80017aa:	2e00      	cmp	r6, #0
 80017ac:	f43f af20 	beq.w	80015f0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b0:	4a39      	ldr	r2, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 80017b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	e719      	b.n	80015f0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2600      	movs	r6, #0
 80017be:	e7df      	b.n	8001780 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80017c8:	f7fe febe 	bl	8000548 <HAL_GetTick>
 80017cc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	682b      	ldr	r3, [r5, #0]
 80017d0:	05da      	lsls	r2, r3, #23
 80017d2:	d4d9      	bmi.n	8001788 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d4:	f7fe feb8 	bl	8000548 <HAL_GetTick>
 80017d8:	1bc0      	subs	r0, r0, r7
 80017da:	2802      	cmp	r0, #2
 80017dc:	d9f7      	bls.n	80017ce <HAL_RCC_OscConfig+0x20a>
 80017de:	e738      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d104      	bne.n	80017ee <HAL_RCC_OscConfig+0x22a>
 80017e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	672b      	str	r3, [r5, #112]	; 0x70
 80017ec:	e7d0      	b.n	8001790 <HAL_RCC_OscConfig+0x1cc>
 80017ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	672a      	str	r2, [r5, #112]	; 0x70
 80017f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017f8:	f022 0204 	bic.w	r2, r2, #4
 80017fc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ca      	bne.n	8001798 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001802:	f7fe fea1 	bl	8000548 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800180a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800180e:	0798      	lsls	r0, r3, #30
 8001810:	d5cb      	bpl.n	80017aa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7fe fe99 	bl	8000548 <HAL_GetTick>
 8001816:	1bc0      	subs	r0, r0, r7
 8001818:	4540      	cmp	r0, r8
 800181a:	d9f7      	bls.n	800180c <HAL_RCC_OscConfig+0x248>
 800181c:	e719      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7fe fe93 	bl	8000548 <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	4540      	cmp	r0, r8
 8001826:	d9bd      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1e0>
 8001828:	e713      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182a:	4d1b      	ldr	r5, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
 800182c:	68ab      	ldr	r3, [r5, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	f43f aeca 	beq.w	80015cc <HAL_RCC_OscConfig+0x8>
 8001838:	4e1b      	ldr	r6, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 800183a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800183e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	d134      	bne.n	80018ac <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001842:	f7fe fe81 	bl	8000548 <HAL_GetTick>
 8001846:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	0199      	lsls	r1, r3, #6
 800184c:	d41e      	bmi.n	800188c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	6a22      	ldr	r2, [r4, #32]
 8001850:	69e3      	ldr	r3, [r4, #28]
 8001852:	4313      	orrs	r3, r2
 8001854:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001856:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800185a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800185c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001860:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4c0d      	ldr	r4, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001864:	0852      	lsrs	r2, r2, #1
 8001866:	3a01      	subs	r2, #1
 8001868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800186c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800186e:	2301      	movs	r3, #1
 8001870:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001872:	f7fe fe69 	bl	8000548 <HAL_GetTick>
 8001876:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	019a      	lsls	r2, r3, #6
 800187c:	f53f aebc 	bmi.w	80015f8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7fe fe62 	bl	8000548 <HAL_GetTick>
 8001884:	1b40      	subs	r0, r0, r5
 8001886:	2802      	cmp	r0, #2
 8001888:	d9f6      	bls.n	8001878 <HAL_RCC_OscConfig+0x2b4>
 800188a:	e6e2      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7fe fe5c 	bl	8000548 <HAL_GetTick>
 8001890:	1bc0      	subs	r0, r0, r7
 8001892:	2802      	cmp	r0, #2
 8001894:	d9d8      	bls.n	8001848 <HAL_RCC_OscConfig+0x284>
 8001896:	e6dc      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
 8001898:	40023800 	.word	0x40023800
 800189c:	42470000 	.word	0x42470000
 80018a0:	42470e80 	.word	0x42470e80
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80018ac:	f7fe fe4c 	bl	8000548 <HAL_GetTick>
 80018b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	f57f ae9f 	bpl.w	80015f8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7fe fe45 	bl	8000548 <HAL_GetTick>
 80018be:	1b00      	subs	r0, r0, r4
 80018c0:	2802      	cmp	r0, #2
 80018c2:	d9f6      	bls.n	80018b2 <HAL_RCC_OscConfig+0x2ee>
 80018c4:	e6c5      	b.n	8001652 <HAL_RCC_OscConfig+0x8e>
 80018c6:	bf00      	nop

080018c8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c8:	4913      	ldr	r1, [pc, #76]	; (8001918 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80018ca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018cc:	688b      	ldr	r3, [r1, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x16>
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018da:	4810      	ldr	r0, [pc, #64]	; (800191c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018dc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <HAL_RCC_GetSysClockFreq+0x58>)
 80018e0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ec:	bf14      	ite	ne
 80018ee:	480c      	ldrne	r0, [pc, #48]	; (8001920 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	480a      	ldreq	r0, [pc, #40]	; (800191c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018f6:	bf18      	it	ne
 80018f8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fe:	fba1 0100 	umull	r0, r1, r1, r0
 8001902:	f7fe fc73 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_RCC_GetSysClockFreq+0x50>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800190e:	3301      	adds	r3, #1
 8001910:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001912:	fbb0 f0f3 	udiv	r0, r0, r3
 8001916:	bd08      	pop	{r3, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	00f42400 	.word	0x00f42400
 8001920:	007a1200 	.word	0x007a1200

08001924 <HAL_RCC_ClockConfig>:
{
 8001924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001928:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800192a:	4604      	mov	r4, r0
 800192c:	b910      	cbnz	r0, 8001934 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800192e:	2001      	movs	r0, #1
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_ClockConfig+0x124>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f002 020f 	and.w	r2, r2, #15
 800193c:	428a      	cmp	r2, r1
 800193e:	d328      	bcc.n	8001992 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	6821      	ldr	r1, [r4, #0]
 8001942:	078f      	lsls	r7, r1, #30
 8001944:	d42d      	bmi.n	80019a2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	07c8      	lsls	r0, r1, #31
 8001948:	d440      	bmi.n	80019cc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x124>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f002 020f 	and.w	r2, r2, #15
 8001952:	4295      	cmp	r5, r2
 8001954:	d366      	bcc.n	8001a24 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	6822      	ldr	r2, [r4, #0]
 8001958:	0751      	lsls	r1, r2, #29
 800195a:	d46c      	bmi.n	8001a36 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	0713      	lsls	r3, r2, #28
 800195e:	d507      	bpl.n	8001970 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001960:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_RCC_ClockConfig+0x128>)
 8001962:	6921      	ldr	r1, [r4, #16]
 8001964:	6893      	ldr	r3, [r2, #8]
 8001966:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800196a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800196e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001970:	f7ff ffaa 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_RCC_ClockConfig+0x128>)
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <HAL_RCC_ClockConfig+0x12c>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	40d8      	lsrs	r0, r3
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_ClockConfig+0x130>)
 8001984:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001986:	2000      	movs	r0, #0
 8001988:	f002 ff3e 	bl	8004808 <HAL_InitTick>
  return HAL_OK;
 800198c:	2000      	movs	r0, #0
 800198e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	4299      	cmp	r1, r3
 800199e:	d1c6      	bne.n	800192e <HAL_RCC_ClockConfig+0xa>
 80019a0:	e7ce      	b.n	8001940 <HAL_RCC_ClockConfig+0x1c>
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	bf1e      	ittt	ne
 80019aa:	689a      	ldrne	r2, [r3, #8]
 80019ac:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80019b0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	bf42      	ittt	mi
 80019b6:	689a      	ldrmi	r2, [r3, #8]
 80019b8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80019bc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	68a0      	ldr	r0, [r4, #8]
 80019c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019c6:	4302      	orrs	r2, r0
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	e7bc      	b.n	8001946 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019cc:	6862      	ldr	r2, [r4, #4]
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_ClockConfig+0x128>)
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d11d      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	d0a8      	beq.n	800192e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019dc:	4e1b      	ldr	r6, [pc, #108]	; (8001a4c <HAL_RCC_ClockConfig+0x128>)
 80019de:	68b3      	ldr	r3, [r6, #8]
 80019e0:	f023 0303 	bic.w	r3, r3, #3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019e8:	f7fe fdae 	bl	8000548 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019f0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	68b3      	ldr	r3, [r6, #8]
 80019f4:	6862      	ldr	r2, [r4, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019fe:	d0a4      	beq.n	800194a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7fe fda2 	bl	8000548 <HAL_GetTick>
 8001a04:	1bc0      	subs	r0, r0, r7
 8001a06:	4540      	cmp	r0, r8
 8001a08:	d9f3      	bls.n	80019f2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
}
 8001a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a10:	1e91      	subs	r1, r2, #2
 8001a12:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	d802      	bhi.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a1c:	e7dd      	b.n	80019da <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	f013 0f02 	tst.w	r3, #2
 8001a22:	e7da      	b.n	80019da <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a24:	b2ea      	uxtb	r2, r5
 8001a26:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	429d      	cmp	r5, r3
 8001a30:	f47f af7d 	bne.w	800192e <HAL_RCC_ClockConfig+0xa>
 8001a34:	e78f      	b.n	8001956 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a36:	4905      	ldr	r1, [pc, #20]	; (8001a4c <HAL_RCC_ClockConfig+0x128>)
 8001a38:	68e0      	ldr	r0, [r4, #12]
 8001a3a:	688b      	ldr	r3, [r1, #8]
 8001a3c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a40:	4303      	orrs	r3, r0
 8001a42:	608b      	str	r3, [r1, #8]
 8001a44:	e78a      	b.n	800195c <HAL_RCC_ClockConfig+0x38>
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004e9c 	.word	0x08004e9c
 8001a54:	20000024 	.word	0x20000024

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a66:	6810      	ldr	r0, [r2, #0]
}
 8001a68:	40d8      	lsrs	r0, r3
 8001a6a:	4770      	bx	lr
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	08004eac 	.word	0x08004eac
 8001a74:	20000024 	.word	0x20000024

08001a78 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a86:	6810      	ldr	r0, [r2, #0]
}
 8001a88:	40d8      	lsrs	r0, r3
 8001a8a:	4770      	bx	lr
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08004eac 	.word	0x08004eac
 8001a94:	20000024 	.word	0x20000024

08001a98 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a98:	230f      	movs	r3, #15
 8001a9a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_GetClockConfig+0x34>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001aac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001ab4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001abe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_GetClockConfig+0x38>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	600b      	str	r3, [r1, #0]
 8001aca:	4770      	bx	lr
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ad4:	6803      	ldr	r3, [r0, #0]
{
 8001ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ad8:	079a      	lsls	r2, r3, #30
{
 8001ada:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001adc:	f040 8088 	bne.w	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	f013 0f0c 	tst.w	r3, #12
 8001ae6:	d044      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ae8:	4d80      	ldr	r5, [pc, #512]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001aea:	4e81      	ldr	r6, [pc, #516]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001af0:	f7fe fd2a 	bl	8000548 <HAL_GetTick>
 8001af4:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001af6:	6833      	ldr	r3, [r6, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f100 80bd 	bmi.w	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001afe:	6821      	ldr	r1, [r4, #0]
 8001b00:	074f      	lsls	r7, r1, #29
 8001b02:	d515      	bpl.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b04:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b06:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b0a:	6920      	ldr	r0, [r4, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001b12:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b1c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8001b20:	6a22      	ldr	r2, [r4, #32]
 8001b22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b26:	3a01      	subs	r2, #1
 8001b28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b2c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b30:	070e      	lsls	r6, r1, #28
 8001b32:	d514      	bpl.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b34:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b36:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b38:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b3c:	6920      	ldr	r0, [r4, #16]
 8001b3e:	071b      	lsls	r3, r3, #28
 8001b40:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001b44:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b54:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b5e:	2301      	movs	r3, #1
 8001b60:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b62:	f7fe fcf1 	bl	8000548 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b66:	4d62      	ldr	r5, [pc, #392]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001b68:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b6a:	682b      	ldr	r3, [r5, #0]
 8001b6c:	0098      	lsls	r0, r3, #2
 8001b6e:	f140 808a 	bpl.w	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	069a      	lsls	r2, r3, #26
 8001b76:	d531      	bpl.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b7e:	4d5d      	ldr	r5, [pc, #372]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b9a:	f7fe fcd5 	bl	8000548 <HAL_GetTick>
 8001b9e:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	05d9      	lsls	r1, r3, #23
 8001ba4:	d576      	bpl.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ba6:	4d52      	ldr	r5, [pc, #328]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001ba8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001baa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bae:	d177      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bb2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001bb6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001bbc:	f040 8091 	bne.w	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8001bc0:	6891      	ldr	r1, [r2, #8]
 8001bc2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001bc6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001bca:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001bce:	4301      	orrs	r1, r0
 8001bd0:	6091      	str	r1, [r2, #8]
 8001bd2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001be2:	bf1f      	itttt	ne
 8001be4:	4b44      	ldrne	r3, [pc, #272]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001be6:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8001bea:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8001bec:	2000      	movne	r0, #0
 8001bee:	e041      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8001bf0:	4d42      	ldr	r5, [pc, #264]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bf2:	4e3f      	ldr	r6, [pc, #252]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001bf8:	f7fe fca6 	bl	8000548 <HAL_GetTick>
 8001bfc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bfe:	6833      	ldr	r3, [r6, #0]
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	d431      	bmi.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	07d7      	lsls	r7, r2, #31
 8001c08:	d506      	bpl.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001c0a:	68a3      	ldr	r3, [r4, #8]
 8001c0c:	6861      	ldr	r1, [r4, #4]
 8001c0e:	071b      	lsls	r3, r3, #28
 8001c10:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c14:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001c18:	0790      	lsls	r0, r2, #30
 8001c1a:	d515      	bpl.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c1c:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001c1e:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c20:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001c24:	6860      	ldr	r0, [r4, #4]
 8001c26:	061b      	lsls	r3, r3, #24
 8001c28:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001c2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c30:	430b      	orrs	r3, r1
 8001c32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c36:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001c3a:	69e3      	ldr	r3, [r4, #28]
 8001c3c:	f021 011f 	bic.w	r1, r1, #31
 8001c40:	3b01      	subs	r3, #1
 8001c42:	430b      	orrs	r3, r1
 8001c44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8001c48:	2301      	movs	r3, #1
 8001c4a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001c4c:	f7fe fc7c 	bl	8000548 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c50:	4d27      	ldr	r5, [pc, #156]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001c52:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	0119      	lsls	r1, r3, #4
 8001c58:	f53f af42 	bmi.w	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c5c:	f7fe fc74 	bl	8000548 <HAL_GetTick>
 8001c60:	1b80      	subs	r0, r0, r6
 8001c62:	2802      	cmp	r0, #2
 8001c64:	d9f6      	bls.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001c66:	e004      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c68:	f7fe fc6e 	bl	8000548 <HAL_GetTick>
 8001c6c:	1bc0      	subs	r0, r0, r7
 8001c6e:	2802      	cmp	r0, #2
 8001c70:	d9c5      	bls.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
}
 8001c74:	b003      	add	sp, #12
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c78:	f7fe fc66 	bl	8000548 <HAL_GetTick>
 8001c7c:	1bc0      	subs	r0, r0, r7
 8001c7e:	2802      	cmp	r0, #2
 8001c80:	f67f af39 	bls.w	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001c84:	e7f5      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c86:	f7fe fc5f 	bl	8000548 <HAL_GetTick>
 8001c8a:	1b80      	subs	r0, r0, r6
 8001c8c:	2802      	cmp	r0, #2
 8001c8e:	f67f af6c 	bls.w	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x96>
 8001c92:	e7ee      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c94:	f7fe fc58 	bl	8000548 <HAL_GetTick>
 8001c98:	1b80      	subs	r0, r0, r6
 8001c9a:	2802      	cmp	r0, #2
 8001c9c:	d980      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001c9e:	e7e8      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ca2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d082      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001caa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001cba:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cbe:	07da      	lsls	r2, r3, #31
 8001cc0:	f57f af76 	bpl.w	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fc40 	bl	8000548 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ccc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cd0:	079b      	lsls	r3, r3, #30
 8001cd2:	f53f af6d 	bmi.w	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fc37 	bl	8000548 <HAL_GetTick>
 8001cda:	1b80      	subs	r0, r0, r6
 8001cdc:	42b8      	cmp	r0, r7
 8001cde:	d9f6      	bls.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001ce0:	e7c7      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce2:	6891      	ldr	r1, [r2, #8]
 8001ce4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001ce8:	e772      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001cea:	bf00      	nop
 8001cec:	42470070 	.word	0x42470070
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	424711e0 	.word	0x424711e0
 8001cfc:	42470068 	.word	0x42470068
 8001d00:	42470e40 	.word	0x42470e40

08001d04 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8001d08:	4604      	mov	r4, r0
 8001d0a:	b1c8      	cbz	r0, 8001d40 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001d0c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001d10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d14:	b91b      	cbnz	r3, 8001d1e <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001d16:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001d1a:	f002 fd05 	bl	8004728 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001d24:	1d21      	adds	r1, r4, #4
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	f000 fce0 	bl	80026ec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001d2c:	6862      	ldr	r2, [r4, #4]
 8001d2e:	6820      	ldr	r0, [r4, #0]
 8001d30:	4629      	mov	r1, r5
 8001d32:	f000 fd1a 	bl	800276a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
}
 8001d42:	bd38      	pop	{r3, r4, r5, pc}

08001d44 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	4604      	mov	r4, r0
 8001d48:	460e      	mov	r6, r1
 8001d4a:	4615      	mov	r5, r2
 8001d4c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d4e:	6821      	ldr	r1, [r4, #0]
 8001d50:	688a      	ldr	r2, [r1, #8]
 8001d52:	ea36 0302 	bics.w	r3, r6, r2
 8001d56:	d001      	beq.n	8001d5c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
}
 8001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001d5c:	1c6b      	adds	r3, r5, #1
 8001d5e:	d0f7      	beq.n	8001d50 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d60:	f7fe fbf2 	bl	8000548 <HAL_GetTick>
 8001d64:	1bc0      	subs	r0, r0, r7
 8001d66:	4285      	cmp	r5, r0
 8001d68:	d8f1      	bhi.n	8001d4e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d72:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d74:	6862      	ldr	r2, [r4, #4]
 8001d76:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001d7a:	d10a      	bne.n	8001d92 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001d7c:	68a2      	ldr	r2, [r4, #8]
 8001d7e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d82:	d002      	beq.n	8001d8a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d88:	d103      	bne.n	8001d92 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d90:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d98:	d107      	bne.n	8001daa <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001db0:	2300      	movs	r3, #0
 8001db2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001db6:	2003      	movs	r0, #3
 8001db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dbe:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <SPI_EndRxTxTransaction+0x54>)
 8001dc2:	4e14      	ldr	r6, [pc, #80]	; (8001e14 <SPI_EndRxTxTransaction+0x58>)
 8001dc4:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc6:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001dc8:	fbb5 f6f6 	udiv	r6, r5, r6
 8001dcc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001dd0:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dd2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001dd6:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001dd8:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dda:	d10d      	bne.n	8001df8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ddc:	460a      	mov	r2, r1
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	f7ff ffb0 	bl	8001d44 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001de4:	b910      	cbnz	r0, 8001dec <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001de6:	2000      	movs	r0, #0
}
 8001de8:	b002      	add	sp, #8
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001df4:	2003      	movs	r0, #3
 8001df6:	e7f7      	b.n	8001de8 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001df8:	9b01      	ldr	r3, [sp, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f3      	beq.n	8001de6 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001dfe:	9b01      	ldr	r3, [sp, #4]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	d4f5      	bmi.n	8001df8 <SPI_EndRxTxTransaction+0x3c>
 8001e0c:	e7eb      	b.n	8001de6 <SPI_EndRxTxTransaction+0x2a>
 8001e0e:	bf00      	nop
 8001e10:	20000024 	.word	0x20000024
 8001e14:	016e3600 	.word	0x016e3600

08001e18 <HAL_SPI_Init>:
{
 8001e18:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d036      	beq.n	8001e8e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e24:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001e28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e2c:	b91b      	cbnz	r3, 8001e36 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001e2e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001e32:	f002 fbf5 	bl	8004620 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001e36:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e38:	68a0      	ldr	r0, [r4, #8]
 8001e3a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001e42:	680b      	ldr	r3, [r1, #0]
 8001e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	68e0      	ldr	r0, [r4, #12]
 8001e50:	4303      	orrs	r3, r0
 8001e52:	6920      	ldr	r0, [r4, #16]
 8001e54:	4303      	orrs	r3, r0
 8001e56:	6960      	ldr	r0, [r4, #20]
 8001e58:	4303      	orrs	r3, r0
 8001e5a:	69e0      	ldr	r0, [r4, #28]
 8001e5c:	4303      	orrs	r3, r0
 8001e5e:	6a20      	ldr	r0, [r4, #32]
 8001e60:	4303      	orrs	r3, r0
 8001e62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e64:	4303      	orrs	r3, r0
 8001e66:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e6e:	0c12      	lsrs	r2, r2, #16
 8001e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e72:	f002 0204 	and.w	r2, r2, #4
 8001e76:	431a      	orrs	r2, r3
 8001e78:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e7a:	69cb      	ldr	r3, [r1, #28]
 8001e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e80:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e82:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001e84:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e86:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001e8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1
}
 8001e90:	bd10      	pop	{r4, pc}

08001e92 <HAL_SPI_TransmitReceive>:
{
 8001e92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e96:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001e98:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001e9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001e9e:	2b01      	cmp	r3, #1
{
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001ea6:	f000 80e2 	beq.w	800206e <HAL_SPI_TransmitReceive+0x1dc>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001eb0:	f7fe fb4a 	bl	8000548 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001eb4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001eb8:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001eba:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ebc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001ebe:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x46>
 8001ec2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001ec6:	f040 80d0 	bne.w	800206a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eca:	68a0      	ldr	r0, [r4, #8]
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	f040 80cc 	bne.w	800206a <HAL_SPI_TransmitReceive+0x1d8>
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	f040 80c9 	bne.w	800206a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ed8:	2d00      	cmp	r5, #0
 8001eda:	f000 80c4 	beq.w	8002066 <HAL_SPI_TransmitReceive+0x1d4>
 8001ede:	f1b9 0f00 	cmp.w	r9, #0
 8001ee2:	f000 80c0 	beq.w	8002066 <HAL_SPI_TransmitReceive+0x1d4>
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	f000 80bd 	beq.w	8002066 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ef0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef6:	bf1c      	itt	ne
 8001ef8:	2305      	movne	r3, #5
 8001efa:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001f02:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f04:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f06:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001f08:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001f0a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f0c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001f0e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f10:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001f12:	bf58      	it	pl
 8001f14:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f16:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001f18:	bf58      	it	pl
 8001f1a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001f1e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001f20:	bf58      	it	pl
 8001f22:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f24:	68e2      	ldr	r2, [r4, #12]
 8001f26:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001f2a:	d158      	bne.n	8001fde <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f2c:	b109      	cbz	r1, 8001f32 <HAL_SPI_TransmitReceive+0xa0>
 8001f2e:	2e01      	cmp	r6, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f32:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f36:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f3a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f42:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	b9ab      	cbnz	r3, 8001f76 <HAL_SPI_TransmitReceive+0xe4>
 8001f4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b993      	cbnz	r3, 8001f76 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f50:	4642      	mov	r2, r8
 8001f52:	4639      	mov	r1, r7
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff ff31 	bl	8001dbc <SPI_EndRxTxTransaction>
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	f040 8081 	bne.w	8002062 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d132      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	9001      	str	r0, [sp, #4]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	9201      	str	r2, [sp, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	9b01      	ldr	r3, [sp, #4]
 8001f74:	e02a      	b.n	8001fcc <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f76:	6822      	ldr	r2, [r4, #0]
 8001f78:	6893      	ldr	r3, [r2, #8]
 8001f7a:	0799      	lsls	r1, r3, #30
 8001f7c:	d50d      	bpl.n	8001f9a <HAL_SPI_TransmitReceive+0x108>
 8001f7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b153      	cbz	r3, 8001f9a <HAL_SPI_TransmitReceive+0x108>
 8001f84:	b14d      	cbz	r5, 8001f9a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f88:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001f8c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001f90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001f98:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f9a:	6893      	ldr	r3, [r2, #8]
 8001f9c:	07db      	lsls	r3, r3, #31
 8001f9e:	d50c      	bpl.n	8001fba <HAL_SPI_TransmitReceive+0x128>
 8001fa0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b14b      	cbz	r3, 8001fba <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fa8:	68d2      	ldr	r2, [r2, #12]
 8001faa:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001fb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001fb8:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fba:	f7fe fac5 	bl	8000548 <HAL_GetTick>
 8001fbe:	eba0 0008 	sub.w	r0, r0, r8
 8001fc2:	4287      	cmp	r7, r0
 8001fc4:	d8be      	bhi.n	8001f44 <HAL_SPI_TransmitReceive+0xb2>
 8001fc6:	1c7e      	adds	r6, r7, #1
 8001fc8:	d0bc      	beq.n	8001f44 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001fd8:	b003      	add	sp, #12
 8001fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fde:	b109      	cbz	r1, 8001fe4 <HAL_SPI_TransmitReceive+0x152>
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d108      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe4:	782a      	ldrb	r2, [r5, #0]
 8001fe6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fea:	3301      	adds	r3, #1
 8001fec:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001fee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001ff6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ff8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b91b      	cbnz	r3, 8002006 <HAL_SPI_TransmitReceive+0x174>
 8001ffe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0a4      	beq.n	8001f50 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002006:	6822      	ldr	r2, [r4, #0]
 8002008:	6893      	ldr	r3, [r2, #8]
 800200a:	0798      	lsls	r0, r3, #30
 800200c:	d50e      	bpl.n	800202c <HAL_SPI_TransmitReceive+0x19a>
 800200e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002010:	b29b      	uxth	r3, r3
 8002012:	b15b      	cbz	r3, 800202c <HAL_SPI_TransmitReceive+0x19a>
 8002014:	b155      	cbz	r5, 800202c <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002016:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800201c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800201e:	3301      	adds	r3, #1
 8002020:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002022:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002024:	3b01      	subs	r3, #1
 8002026:	b29b      	uxth	r3, r3
 8002028:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800202a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800202c:	6822      	ldr	r2, [r4, #0]
 800202e:	6893      	ldr	r3, [r2, #8]
 8002030:	07d9      	lsls	r1, r3, #31
 8002032:	d50d      	bpl.n	8002050 <HAL_SPI_TransmitReceive+0x1be>
 8002034:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002036:	b29b      	uxth	r3, r3
 8002038:	b153      	cbz	r3, 8002050 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800203a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800203c:	68d2      	ldr	r2, [r2, #12]
 800203e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002042:	3301      	adds	r3, #1
 8002044:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002046:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002048:	3b01      	subs	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800204e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002050:	f7fe fa7a 	bl	8000548 <HAL_GetTick>
 8002054:	eba0 0008 	sub.w	r0, r0, r8
 8002058:	4287      	cmp	r7, r0
 800205a:	d8cd      	bhi.n	8001ff8 <HAL_SPI_TransmitReceive+0x166>
 800205c:	1c7b      	adds	r3, r7, #1
 800205e:	d0cb      	beq.n	8001ff8 <HAL_SPI_TransmitReceive+0x166>
 8002060:	e7b3      	b.n	8001fca <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002062:	2320      	movs	r3, #32
 8002064:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002066:	2001      	movs	r0, #1
 8002068:	e7b0      	b.n	8001fcc <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800206a:	2002      	movs	r0, #2
 800206c:	e7ae      	b.n	8001fcc <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800206e:	2002      	movs	r0, #2
 8002070:	e7b2      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x146>

08002072 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002084:	bf1e      	ittt	ne
 8002086:	681a      	ldrne	r2, [r3, #0]
 8002088:	f042 0201 	orrne.w	r2, r2, #1
 800208c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800208e:	2000      	movs	r0, #0
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_OC_DelayElapsedCallback>:
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_IC_CaptureCallback>:
 8002094:	4770      	bx	lr

08002096 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_TriggerCallback>:
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	0791      	lsls	r1, r2, #30
{
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a4:	d50e      	bpl.n	80020c4 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	0792      	lsls	r2, r2, #30
 80020aa:	d50b      	bpl.n	80020c4 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ba:	d077      	beq.n	80021ac <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020bc:	f7ff ffea 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c0:	2300      	movs	r3, #0
 80020c2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	0750      	lsls	r0, r2, #29
 80020ca:	d510      	bpl.n	80020ee <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	0751      	lsls	r1, r2, #29
 80020d0:	d50d      	bpl.n	80020ee <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d2:	f06f 0204 	mvn.w	r2, #4
 80020d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020da:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020dc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e4:	d068      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	f7ff ffd5 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	2300      	movs	r3, #0
 80020ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	0712      	lsls	r2, r2, #28
 80020f4:	d50f      	bpl.n	8002116 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	0710      	lsls	r0, r2, #28
 80020fa:	d50c      	bpl.n	8002116 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020fc:	f06f 0208 	mvn.w	r2, #8
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002102:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002104:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002106:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002108:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800210c:	d05a      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	f7ff ffc1 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	2300      	movs	r3, #0
 8002114:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	06d2      	lsls	r2, r2, #27
 800211c:	d510      	bpl.n	8002140 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	06d0      	lsls	r0, r2, #27
 8002122:	d50d      	bpl.n	8002140 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002124:	f06f 0210 	mvn.w	r2, #16
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800212a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800212e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002134:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002136:	d04b      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002138:	f7ff ffac 	bl	8002094 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213c:	2300      	movs	r3, #0
 800213e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	07d1      	lsls	r1, r2, #31
 8002146:	d508      	bpl.n	800215a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	07d2      	lsls	r2, r2, #31
 800214c:	d505      	bpl.n	800215a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214e:	f06f 0201 	mvn.w	r2, #1
 8002152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002154:	4620      	mov	r0, r4
 8002156:	f002 f909 	bl	800436c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	0610      	lsls	r0, r2, #24
 8002160:	d508      	bpl.n	8002174 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	0611      	lsls	r1, r2, #24
 8002166:	d505      	bpl.n	8002174 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800216e:	4620      	mov	r0, r4
 8002170:	f000 f973 	bl	800245a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	0652      	lsls	r2, r2, #25
 800217a:	d508      	bpl.n	800218e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	0650      	lsls	r0, r2, #25
 8002180:	d505      	bpl.n	800218e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ff85 	bl	8002098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	0691      	lsls	r1, r2, #26
 8002194:	d522      	bpl.n	80021dc <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	0692      	lsls	r2, r2, #26
 800219a:	d51f      	bpl.n	80021dc <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a2:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80021a8:	f000 b956 	b.w	8002458 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ac:	f7ff ff71 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff ff70 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
 80021b6:	e783      	b.n	80020c0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b8:	f7ff ff6b 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ff6a 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
 80021c2:	e792      	b.n	80020ea <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c4:	f7ff ff65 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff ff64 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
 80021ce:	e7a0      	b.n	8002112 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d0:	f7ff ff5f 	bl	8002092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ff5e 	bl	8002096 <HAL_TIM_PWM_PulseFinishedCallback>
 80021da:	e7af      	b.n	800213c <HAL_TIM_IRQHandler+0xa2>
 80021dc:	bd10      	pop	{r4, pc}
	...

080021e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e0:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80021e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	4290      	cmp	r0, r2
 80021e6:	d012      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ec:	d00f      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 80021fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002202:	4290      	cmp	r0, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x2e>
 8002206:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800220a:	4290      	cmp	r0, r2
 800220c:	d119      	bne.n	8002242 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800220e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002214:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
 8002218:	4290      	cmp	r0, r2
 800221a:	d029      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 800221c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002220:	d026      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002222:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002226:	4290      	cmp	r0, r2
 8002228:	d022      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 800222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222e:	4290      	cmp	r0, r2
 8002230:	d01e      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002236:	4290      	cmp	r0, r2
 8002238:	d01a      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 800223a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800223e:	4290      	cmp	r0, r2
 8002240:	d016      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <TIM_Base_SetConfig+0xc8>)
 8002244:	4290      	cmp	r0, r2
 8002246:	d013      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800224c:	4290      	cmp	r0, r2
 800224e:	d00f      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002254:	4290      	cmp	r0, r2
 8002256:	d00b      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002258:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800225c:	4290      	cmp	r0, r2
 800225e:	d007      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002264:	4290      	cmp	r0, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0x90>
 8002268:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226c:	4290      	cmp	r0, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002270:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002276:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	694a      	ldr	r2, [r1, #20]
 800227a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800227e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002280:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002282:	688b      	ldr	r3, [r1, #8]
 8002284:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002286:	680b      	ldr	r3, [r1, #0]
 8002288:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <TIM_Base_SetConfig+0xc4>)
 800228c:	4298      	cmp	r0, r3
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0xb8>
 8002290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002294:	4298      	cmp	r0, r3
 8002296:	d101      	bne.n	800229c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002298:	690b      	ldr	r3, [r1, #16]
 800229a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800229c:	2301      	movs	r3, #1
 800229e:	6143      	str	r3, [r0, #20]
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40014000 	.word	0x40014000

080022ac <HAL_TIM_Base_Init>:
{
 80022ac:	b510      	push	{r4, lr}
  if (htim == NULL)
 80022ae:	4604      	mov	r4, r0
 80022b0:	b1a0      	cbz	r0, 80022dc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ba:	b91b      	cbnz	r3, 80022c4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022c0:	f002 f9e2 	bl	8004688 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	2302      	movs	r3, #2
 80022c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	1d21      	adds	r1, r4, #4
 80022ce:	f7ff ff87 	bl	80021e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
 80022da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
}
 80022de:	bd10      	pop	{r4, pc}

080022e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022e0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022e2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022e4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80022ee:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022f0:	6083      	str	r3, [r0, #8]
 80022f2:	bd10      	pop	{r4, pc}

080022f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80022f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
{
 80022fa:	b570      	push	{r4, r5, r6, lr}
 80022fc:	4604      	mov	r4, r0
 80022fe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002302:	d019      	beq.n	8002338 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002308:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800230a:	2301      	movs	r3, #1
 800230c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002310:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800231a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800231c:	680b      	ldr	r3, [r1, #0]
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d065      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xfa>
 8002322:	d815      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x5c>
 8002324:	2b10      	cmp	r3, #16
 8002326:	d00c      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x4e>
 8002328:	d807      	bhi.n	800233a <HAL_TIM_ConfigClockSource+0x46>
 800232a:	b153      	cbz	r3, 8002342 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800232c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800232e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002330:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002334:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002338:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800233a:	2b20      	cmp	r3, #32
 800233c:	d001      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x4e>
 800233e:	2b30      	cmp	r3, #48	; 0x30
 8002340:	d1f4      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002342:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002344:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800234c:	4313      	orrs	r3, r2
 800234e:	e01a      	b.n	8002386 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002350:	2b60      	cmp	r3, #96	; 0x60
 8002352:	d034      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xca>
 8002354:	d819      	bhi.n	800238a <HAL_TIM_ConfigClockSource+0x96>
 8002356:	2b50      	cmp	r3, #80	; 0x50
 8002358:	d1e8      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	684a      	ldr	r2, [r1, #4]
 800235c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800235e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002360:	6a05      	ldr	r5, [r0, #32]
 8002362:	f025 0501 	bic.w	r5, r5, #1
 8002366:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002368:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800236a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800236e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002372:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002376:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002378:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800237a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800237c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002382:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002386:	6083      	str	r3, [r0, #8]
 8002388:	e7d0      	b.n	800232c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800238a:	2b70      	cmp	r3, #112	; 0x70
 800238c:	d00c      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0xb4>
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002392:	d1cb      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	68cb      	ldr	r3, [r1, #12]
 8002396:	684a      	ldr	r2, [r1, #4]
 8002398:	6889      	ldr	r1, [r1, #8]
 800239a:	f7ff ffa1 	bl	80022e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	6893      	ldr	r3, [r2, #8]
 80023a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a6:	e008      	b.n	80023ba <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80023a8:	68cb      	ldr	r3, [r1, #12]
 80023aa:	684a      	ldr	r2, [r1, #4]
 80023ac:	6889      	ldr	r1, [r1, #8]
 80023ae:	f7ff ff97 	bl	80022e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ba:	6093      	str	r3, [r2, #8]
      break;
 80023bc:	e7b6      	b.n	800232c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023be:	684d      	ldr	r5, [r1, #4]
 80023c0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c2:	6a01      	ldr	r1, [r0, #32]
 80023c4:	f021 0110 	bic.w	r1, r1, #16
 80023c8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ca:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80023cc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ce:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023da:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80023de:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023e0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80023e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80023ec:	e7cb      	b.n	8002386 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	684a      	ldr	r2, [r1, #4]
 80023f0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023f2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f4:	6a05      	ldr	r5, [r0, #32]
 80023f6:	f025 0501 	bic.w	r5, r5, #1
 80023fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023fc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002406:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800240a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800240c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800240e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002410:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002416:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800241a:	e7b4      	b.n	8002386 <HAL_TIM_ConfigClockSource+0x92>

0800241c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800241c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
{
 8002422:	b530      	push	{r4, r5, lr}
 8002424:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002428:	d014      	beq.n	8002454 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800242a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002430:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002432:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002434:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002436:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002438:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800243c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002440:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002442:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002444:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002446:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002448:	2301      	movs	r3, #1
 800244a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800244e:	2300      	movs	r3, #0
 8002450:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002454:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002456:	bd30      	pop	{r4, r5, pc}

08002458 <HAL_TIMEx_CommutCallback>:
 8002458:	4770      	bx	lr

0800245a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800245a:	4770      	bx	lr

0800245c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800245c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	6806      	ldr	r6, [r0, #0]
 8002462:	68c2      	ldr	r2, [r0, #12]
 8002464:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002466:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800246c:	4313      	orrs	r3, r2
 800246e:	6133      	str	r3, [r6, #16]
{
 8002470:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002472:	6883      	ldr	r3, [r0, #8]
 8002474:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002476:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002478:	4303      	orrs	r3, r0
 800247a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800247c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002480:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002482:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002486:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002488:	4313      	orrs	r3, r2
 800248a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248c:	6973      	ldr	r3, [r6, #20]
 800248e:	69a2      	ldr	r2, [r4, #24]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002496:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800249a:	6173      	str	r3, [r6, #20]
 800249c:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249e:	d17c      	bne.n	800259a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024a0:	429e      	cmp	r6, r3
 80024a2:	d003      	beq.n	80024ac <UART_SetConfig+0x50>
 80024a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a8:	429e      	cmp	r6, r3
 80024aa:	d144      	bne.n	8002536 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80024ac:	f7ff fae4 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80024b0:	2519      	movs	r5, #25
 80024b2:	fb05 f300 	mul.w	r3, r5, r0
 80024b6:	6860      	ldr	r0, [r4, #4]
 80024b8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024bc:	0040      	lsls	r0, r0, #1
 80024be:	fbb3 f3f0 	udiv	r3, r3, r0
 80024c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80024c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024ca:	f7ff fad5 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	4368      	muls	r0, r5
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fbb0 f7f3 	udiv	r7, r0, r3
 80024d8:	f7ff face 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80024dc:	6863      	ldr	r3, [r4, #4]
 80024de:	4368      	muls	r0, r5
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80024ea:	fb09 7313 	mls	r3, r9, r3, r7
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3332      	adds	r3, #50	; 0x32
 80024f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80024fc:	f7ff fabc 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 8002500:	6862      	ldr	r2, [r4, #4]
 8002502:	4368      	muls	r0, r5
 8002504:	0052      	lsls	r2, r2, #1
 8002506:	fbb0 faf2 	udiv	sl, r0, r2
 800250a:	f7ff fab5 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	4368      	muls	r0, r5
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb0 f3f3 	udiv	r3, r0, r3
 8002518:	fbb3 f3f9 	udiv	r3, r3, r9
 800251c:	fb09 a313 	mls	r3, r9, r3, sl
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	3332      	adds	r3, #50	; 0x32
 8002524:	fbb3 f3f9 	udiv	r3, r3, r9
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800252e:	443b      	add	r3, r7
 8002530:	60b3      	str	r3, [r6, #8]
 8002532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002536:	f7ff fa8f 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 800253a:	2519      	movs	r5, #25
 800253c:	fb05 f300 	mul.w	r3, r5, r0
 8002540:	6860      	ldr	r0, [r4, #4]
 8002542:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002546:	0040      	lsls	r0, r0, #1
 8002548:	fbb3 f3f0 	udiv	r3, r3, r0
 800254c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002550:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002554:	f7ff fa80 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	4368      	muls	r0, r5
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002562:	f7ff fa79 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	4368      	muls	r0, r5
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002570:	fbb3 f3f9 	udiv	r3, r3, r9
 8002574:	fb09 7313 	mls	r3, r9, r3, r7
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	3332      	adds	r3, #50	; 0x32
 800257c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002586:	f7ff fa67 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 800258a:	6862      	ldr	r2, [r4, #4]
 800258c:	4368      	muls	r0, r5
 800258e:	0052      	lsls	r2, r2, #1
 8002590:	fbb0 faf2 	udiv	sl, r0, r2
 8002594:	f7ff fa60 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002598:	e7b9      	b.n	800250e <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259a:	429e      	cmp	r6, r3
 800259c:	d002      	beq.n	80025a4 <UART_SetConfig+0x148>
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <UART_SetConfig+0x230>)
 80025a0:	429e      	cmp	r6, r3
 80025a2:	d140      	bne.n	8002626 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80025a4:	f7ff fa68 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80025a8:	6867      	ldr	r7, [r4, #4]
 80025aa:	2519      	movs	r5, #25
 80025ac:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025b0:	fb05 f300 	mul.w	r3, r5, r0
 80025b4:	00bf      	lsls	r7, r7, #2
 80025b6:	fbb3 f3f7 	udiv	r3, r3, r7
 80025ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80025be:	011f      	lsls	r7, r3, #4
 80025c0:	f7ff fa5a 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	4368      	muls	r0, r5
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	fbb0 f8f3 	udiv	r8, r0, r3
 80025ce:	f7ff fa53 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	4368      	muls	r0, r5
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80025e0:	fb09 8313 	mls	r3, r9, r3, r8
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	3332      	adds	r3, #50	; 0x32
 80025e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025ec:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80025f0:	f7ff fa42 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80025f4:	6862      	ldr	r2, [r4, #4]
 80025f6:	4368      	muls	r0, r5
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	fbb0 faf2 	udiv	sl, r0, r2
 80025fe:	f7ff fa3b 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002602:	6863      	ldr	r3, [r4, #4]
 8002604:	4368      	muls	r0, r5
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fbb0 f3f3 	udiv	r3, r0, r3
 800260c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002610:	fb09 a313 	mls	r3, r9, r3, sl
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	3332      	adds	r3, #50	; 0x32
 8002618:	fbb3 f3f9 	udiv	r3, r3, r9
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	ea43 0308 	orr.w	r3, r3, r8
 8002624:	e783      	b.n	800252e <UART_SetConfig+0xd2>
 8002626:	f7ff fa17 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 800262a:	6867      	ldr	r7, [r4, #4]
 800262c:	2519      	movs	r5, #25
 800262e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002632:	fb05 f300 	mul.w	r3, r5, r0
 8002636:	00bf      	lsls	r7, r7, #2
 8002638:	fbb3 f3f7 	udiv	r3, r3, r7
 800263c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002640:	011f      	lsls	r7, r3, #4
 8002642:	f7ff fa09 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002646:	6863      	ldr	r3, [r4, #4]
 8002648:	4368      	muls	r0, r5
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002650:	f7ff fa02 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002654:	6863      	ldr	r3, [r4, #4]
 8002656:	4368      	muls	r0, r5
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002662:	fb09 8313 	mls	r3, r9, r3, r8
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	fbb3 f3f9 	udiv	r3, r3, r9
 800266e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002672:	f7ff f9f1 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002676:	6862      	ldr	r2, [r4, #4]
 8002678:	4368      	muls	r0, r5
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	fbb0 faf2 	udiv	sl, r0, r2
 8002680:	f7ff f9ea 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002684:	e7bd      	b.n	8002602 <UART_SetConfig+0x1a6>
 8002686:	bf00      	nop
 8002688:	40011000 	.word	0x40011000
 800268c:	40011400 	.word	0x40011400

08002690 <HAL_UART_Init>:
{
 8002690:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002692:	4604      	mov	r4, r0
 8002694:	b340      	cbz	r0, 80026e8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002696:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800269a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800269e:	b91b      	cbnz	r3, 80026a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80026a4:	f002 f808 	bl	80046b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80026a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026aa:	2324      	movs	r3, #36	; 0x24
 80026ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80026b0:	68d3      	ldr	r3, [r2, #12]
 80026b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff fecf 	bl	800245c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80026da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80026e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
}
 80026ea:	bd10      	pop	{r4, pc}

080026ec <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80026ec:	680b      	ldr	r3, [r1, #0]
 80026ee:	684a      	ldr	r2, [r1, #4]
 80026f0:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80026f4:	2b01      	cmp	r3, #1
{
 80026f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80026fa:	6803      	ldr	r3, [r0, #0]
 80026fc:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8002700:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002704:	694d      	ldr	r5, [r1, #20]
 8002706:	698c      	ldr	r4, [r1, #24]
 8002708:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 800270c:	6a0f      	ldr	r7, [r1, #32]
 800270e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002710:	d014      	beq.n	800273c <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002712:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800271a:	431a      	orrs	r2, r3
 800271c:	ea42 0209 	orr.w	r2, r2, r9
 8002720:	ea42 0208 	orr.w	r2, r2, r8
 8002724:	ea42 030c 	orr.w	r3, r2, ip
 8002728:	432b      	orrs	r3, r5
 800272a:	4323      	orrs	r3, r4
 800272c:	ea43 030e 	orr.w	r3, r3, lr
 8002730:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002732:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002734:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8002736:	2000      	movs	r0, #0
 8002738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800273c:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800273e:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002742:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800274a:	430a      	orrs	r2, r1
 800274c:	ea43 030e 	orr.w	r3, r3, lr
 8002750:	ea42 0209 	orr.w	r2, r2, r9
 8002754:	433b      	orrs	r3, r7
 8002756:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800275a:	431e      	orrs	r6, r3
 800275c:	ea42 030c 	orr.w	r3, r2, ip
 8002760:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002762:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002764:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002766:	6043      	str	r3, [r0, #4]
 8002768:	e7e5      	b.n	8002736 <FMC_SDRAM_Init+0x4a>

0800276a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800276a:	2a01      	cmp	r2, #1
{
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002772:	688f      	ldr	r7, [r1, #8]
 8002774:	690d      	ldr	r5, [r1, #16]
 8002776:	694e      	ldr	r6, [r1, #20]
 8002778:	e891 4008 	ldmia.w	r1, {r3, lr}
 800277c:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 800277e:	d01b      	beq.n	80027b8 <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002780:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002782:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002786:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800278a:	3b01      	subs	r3, #1
 800278c:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8002790:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002792:	1e7b      	subs	r3, r7, #1
 8002794:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002798:	f10c 3cff 	add.w	ip, ip, #4294967295
 800279c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80027a0:	3d01      	subs	r5, #1
 80027a2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80027a6:	3e01      	subs	r6, #1
 80027a8:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 80027ac:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80027ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80027b2:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80027b8:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80027ba:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80027bc:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80027c0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80027c4:	3b01      	subs	r3, #1
 80027c6:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80027ca:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80027cc:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80027d0:	1e7b      	subs	r3, r7, #1
 80027d2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80027d6:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80027da:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80027de:	1e6b      	subs	r3, r5, #1
 80027e0:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80027e4:	3e01      	subs	r6, #1
 80027e6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80027ea:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80027ec:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80027f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80027f4:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80027f6:	60c3      	str	r3, [r0, #12]
 80027f8:	e7dc      	b.n	80027b4 <FMC_SDRAM_Timing_Init+0x4a>
	...

080027fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80027fe:	3b01      	subs	r3, #1
 8002800:	d101      	bne.n	8002806 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002802:	2003      	movs	r0, #3
 8002804:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002806:	6902      	ldr	r2, [r0, #16]
 8002808:	2a00      	cmp	r2, #0
 800280a:	daf8      	bge.n	80027fe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800280c:	6903      	ldr	r3, [r0, #16]
 800280e:	4a06      	ldr	r2, [pc, #24]	; (8002828 <USB_CoreReset+0x2c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002816:	3a01      	subs	r2, #1
 8002818:	d0f3      	beq.n	8002802 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800281a:	6903      	ldr	r3, [r0, #16]
 800281c:	f013 0301 	ands.w	r3, r3, #1
 8002820:	d1f9      	bne.n	8002816 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002822:	4618      	mov	r0, r3
}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	00030d41 	.word	0x00030d41

0800282c <USB_CoreInit>:
{
 800282c:	b084      	sub	sp, #16
 800282e:	b538      	push	{r3, r4, r5, lr}
 8002830:	ad05      	add	r5, sp, #20
 8002832:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002838:	2b01      	cmp	r3, #1
{
 800283a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800283c:	d125      	bne.n	800288a <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800283e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002844:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002846:	68c3      	ldr	r3, [r0, #12]
 8002848:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002850:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002852:	68c3      	ldr	r3, [r0, #12]
 8002854:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002858:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800285a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800285c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800285e:	bf02      	ittt	eq
 8002860:	68c3      	ldreq	r3, [r0, #12]
 8002862:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002866:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002868:	f7ff ffc8 	bl	80027fc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800286c:	9b08      	ldr	r3, [sp, #32]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002872:	68a3      	ldr	r3, [r4, #8]
 8002874:	f043 0306 	orr.w	r3, r3, #6
 8002878:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800287a:	68a3      	ldr	r3, [r4, #8]
 800287c:	f043 0320 	orr.w	r3, r3, #32
 8002880:	60a3      	str	r3, [r4, #8]
}
 8002882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002886:	b004      	add	sp, #16
 8002888:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800288a:	68c3      	ldr	r3, [r0, #12]
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002892:	f7ff ffb3 	bl	80027fc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002898:	b923      	cbnz	r3, 80028a4 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800289a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80028a2:	e7e3      	b.n	800286c <USB_CoreInit+0x40>
 80028a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	e7f9      	b.n	80028a0 <USB_CoreInit+0x74>

080028ac <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028ac:	6883      	ldr	r3, [r0, #8]
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6083      	str	r3, [r0, #8]
}
 80028b4:	2000      	movs	r0, #0
 80028b6:	4770      	bx	lr

080028b8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028b8:	6883      	ldr	r3, [r0, #8]
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	6083      	str	r3, [r0, #8]
}
 80028c0:	2000      	movs	r0, #0
 80028c2:	4770      	bx	lr

080028c4 <USB_SetCurrentMode>:
{
 80028c4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80028c6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80028c8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80028ca:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80028ce:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80028d0:	d108      	bne.n	80028e4 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80028d2:	68c3      	ldr	r3, [r0, #12]
 80028d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80028d8:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80028da:	2032      	movs	r0, #50	; 0x32
 80028dc:	f7fd fe3a 	bl	8000554 <HAL_Delay>
  return HAL_OK;
 80028e0:	2000      	movs	r0, #0
 80028e2:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80028e4:	b919      	cbnz	r1, 80028ee <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80028e6:	68c3      	ldr	r3, [r0, #12]
 80028e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ec:	e7f4      	b.n	80028d8 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
}
 80028f0:	bd08      	pop	{r3, pc}
	...

080028f4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80028f4:	0189      	lsls	r1, r1, #6
 80028f6:	f041 0120 	orr.w	r1, r1, #32
 80028fa:	4a06      	ldr	r2, [pc, #24]	; (8002914 <USB_FlushTxFifo+0x20>)
 80028fc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80028fe:	3a01      	subs	r2, #1
 8002900:	d005      	beq.n	800290e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002902:	6903      	ldr	r3, [r0, #16]
 8002904:	f013 0320 	ands.w	r3, r3, #32
 8002908:	d1f9      	bne.n	80028fe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800290a:	4618      	mov	r0, r3
 800290c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800290e:	2003      	movs	r0, #3
}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	00030d41 	.word	0x00030d41

08002918 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002918:	2310      	movs	r3, #16
 800291a:	4a06      	ldr	r2, [pc, #24]	; (8002934 <USB_FlushRxFifo+0x1c>)
 800291c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800291e:	3a01      	subs	r2, #1
 8002920:	d005      	beq.n	800292e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002922:	6903      	ldr	r3, [r0, #16]
 8002924:	f013 0310 	ands.w	r3, r3, #16
 8002928:	d1f9      	bne.n	800291e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800292a:	4618      	mov	r0, r3
 800292c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800292e:	2003      	movs	r0, #3
}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	00030d41 	.word	0x00030d41

08002938 <USB_WritePacket>:
{
 8002938:	b510      	push	{r4, lr}
 800293a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800293e:	b94c      	cbnz	r4, 8002954 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002940:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002942:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800294e:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002950:	4299      	cmp	r1, r3
 8002952:	d101      	bne.n	8002958 <USB_WritePacket+0x20>
}
 8002954:	2000      	movs	r0, #0
 8002956:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002958:	f851 2b04 	ldr.w	r2, [r1], #4
 800295c:	6002      	str	r2, [r0, #0]
 800295e:	e7f7      	b.n	8002950 <USB_WritePacket+0x18>

08002960 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002960:	3203      	adds	r2, #3
 8002962:	f022 0203 	bic.w	r2, r2, #3
 8002966:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002968:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 800296c:	4291      	cmp	r1, r2
 800296e:	d101      	bne.n	8002974 <USB_ReadPacket+0x14>
}
 8002970:	4608      	mov	r0, r1
 8002972:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002974:	6803      	ldr	r3, [r0, #0]
 8002976:	f841 3b04 	str.w	r3, [r1], #4
 800297a:	e7f7      	b.n	800296c <USB_ReadPacket+0xc>

0800297c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800297c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800297e:	6980      	ldr	r0, [r0, #24]
}
 8002980:	4010      	ands	r0, r2
 8002982:	4770      	bx	lr

08002984 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002984:	6940      	ldr	r0, [r0, #20]
}
 8002986:	f000 0001 	and.w	r0, r0, #1
 800298a:	4770      	bx	lr

0800298c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800298c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002990:	f023 0303 	bic.w	r3, r3, #3
{
 8002994:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002996:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800299a:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800299e:	f001 0303 	and.w	r3, r1, #3
 80029a2:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80029a4:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80029a6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80029aa:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80029ae:	d104      	bne.n	80029ba <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80029b0:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80029b4:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80029b6:	2000      	movs	r0, #0
 80029b8:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80029ba:	2902      	cmp	r1, #2
 80029bc:	d1fb      	bne.n	80029b6 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80029be:	f241 7370 	movw	r3, #6000	; 0x1770
 80029c2:	e7f7      	b.n	80029b4 <USB_InitFSLSPClkSel+0x28>

080029c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80029c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80029c6:	2500      	movs	r5, #0
 80029c8:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80029ca:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80029ce:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80029d0:	9b01      	ldr	r3, [sp, #4]
 80029d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029d6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80029de:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80029e0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	f7fd fdb5 	bl	8000554 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80029ea:	9b01      	ldr	r3, [sp, #4]
 80029ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80029f4:	200a      	movs	r0, #10
 80029f6:	f7fd fdad 	bl	8000554 <HAL_Delay>

  return HAL_OK;
}
 80029fa:	4628      	mov	r0, r5
 80029fc:	b003      	add	sp, #12
 80029fe:	bd30      	pop	{r4, r5, pc}

08002a00 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002a00:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002a06:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002a0a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002a0c:	9b01      	ldr	r3, [sp, #4]
 8002a0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a12:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002a14:	9b01      	ldr	r3, [sp, #4]
 8002a16:	04da      	lsls	r2, r3, #19
 8002a18:	d406      	bmi.n	8002a28 <USB_DriveVbus+0x28>
 8002a1a:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002a1c:	bf02      	ittt	eq
 8002a1e:	9b01      	ldreq	r3, [sp, #4]
 8002a20:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002a24:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002a28:	9b01      	ldr	r3, [sp, #4]
 8002a2a:	04db      	lsls	r3, r3, #19
 8002a2c:	d505      	bpl.n	8002a3a <USB_DriveVbus+0x3a>
 8002a2e:	b921      	cbnz	r1, 8002a3a <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a36:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	b002      	add	sp, #8
 8002a3e:	4770      	bx	lr

08002a40 <USB_HostInit>:
{
 8002a40:	b084      	sub	sp, #16
 8002a42:	b538      	push	{r3, r4, r5, lr}
 8002a44:	4604      	mov	r4, r0
 8002a46:	a805      	add	r0, sp, #20
 8002a48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a58:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a60:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a6c:	05da      	lsls	r2, r3, #23
 8002a6e:	d53f      	bpl.n	8002af0 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002a70:	9b07      	ldr	r3, [sp, #28]
 8002a72:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002a74:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002a78:	d13c      	bne.n	8002af4 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002a7e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002a82:	2110      	movs	r1, #16
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff ff35 	bl	80028f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff ff44 	bl	8002918 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	9906      	ldr	r1, [sp, #24]
 8002a94:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8002a9c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d12b      	bne.n	8002afa <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7ff ffab 	bl	8002a00 <USB_DriveVbus>
  HAL_Delay(200U);
 8002aaa:	20c8      	movs	r0, #200	; 0xc8
 8002aac:	f7fd fd52 	bl	8000554 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002aba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	d521      	bpl.n	8002b04 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8002ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac4:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002ac6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002aca:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002ace:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002ad2:	9b08      	ldr	r3, [sp, #32]
 8002ad4:	b91b      	cbnz	r3, 8002ade <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ad6:	69a3      	ldr	r3, [r4, #24]
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002ade:	69a2      	ldr	r2, [r4, #24]
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <USB_HostInit+0xd8>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61a3      	str	r3, [r4, #24]
}
 8002ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aea:	2000      	movs	r0, #0
 8002aec:	b004      	add	sp, #16
 8002aee:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002af0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	e7c1      	b.n	8002a7e <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002afa:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002afc:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002afe:	60d5      	str	r5, [r2, #12]
 8002b00:	3220      	adds	r2, #32
 8002b02:	e7cc      	b.n	8002a9e <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002b08:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002b0c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002b0e:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <USB_HostInit+0xdc>)
 8002b10:	e7dd      	b.n	8002ace <USB_HostInit+0x8e>
 8002b12:	bf00      	nop
 8002b14:	00e00300 	.word	0x00e00300
 8002b18:	a3200008 	.word	0xa3200008
 8002b1c:	004000e0 	.word	0x004000e0

08002b20 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002b20:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002b26:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002b2a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002b2c:	9801      	ldr	r0, [sp, #4]
}
 8002b2e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002b32:	b002      	add	sp, #8
 8002b34:	4770      	bx	lr

08002b36 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002b36:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b3a:	6880      	ldr	r0, [r0, #8]
}
 8002b3c:	b280      	uxth	r0, r0
 8002b3e:	4770      	bx	lr

08002b40 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002b44:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8002b48:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002b4c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002b50:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002b52:	f04f 30ff 	mov.w	r0, #4294967295
 8002b56:	60a0      	str	r0, [r4, #8]
 8002b58:	fa4f f882 	sxtb.w	r8, r2
 8002b5c:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002b60:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002b64:	2e03      	cmp	r6, #3
 8002b66:	d86c      	bhi.n	8002c42 <USB_HC_Init+0x102>
 8002b68:	e8df f006 	tbb	[pc, r6]
 8002b6c:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002b70:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002b74:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002b78:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002b7a:	da03      	bge.n	8002b84 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002b7c:	68e1      	ldr	r1, [r4, #12]
 8002b7e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002b82:	e005      	b.n	8002b90 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002b84:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8002b86:	05c9      	lsls	r1, r1, #23
 8002b88:	d542      	bpl.n	8002c10 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002b8a:	68e1      	ldr	r1, [r4, #12]
 8002b8c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002b90:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b92:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002b94:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f10e 	lsl.w	r1, r1, lr
 8002b9e:	4321      	orrs	r1, r4
 8002ba0:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002ba4:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8002ba6:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002baa:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002bae:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002bb0:	bfb4      	ite	lt
 8002bb2:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8002bb6:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002bb8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8002bbc:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002bc0:	059b      	lsls	r3, r3, #22
 8002bc2:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002bc6:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002bca:	02d2      	lsls	r2, r2, #11
 8002bcc:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002bd0:	432b      	orrs	r3, r5
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	04b2      	lsls	r2, r6, #18
 8002bd6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8002bda:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002bdc:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8002be0:	bf0c      	ite	eq
 8002be2:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8002be6:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002be8:	4323      	orrs	r3, r4
 8002bea:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8002bec:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002bee:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002bf2:	d128      	bne.n	8002c46 <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002bf4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002bf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bfc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002c04:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8002c08:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002c0c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002c0e:	dbb5      	blt.n	8002b7c <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002c10:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f10e 	lsl.w	r1, r1, lr
 8002c1a:	4301      	orrs	r1, r0
 8002c1c:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002c20:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c22:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002c24:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002c28:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	e7c4      	b.n	8002bb8 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002c2e:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8002c32:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002c36:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002c38:	daea      	bge.n	8002c10 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002c3a:	68e1      	ldr	r1, [r4, #12]
 8002c3c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002c40:	e7a6      	b.n	8002b90 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
 8002c44:	e7a6      	b.n	8002b94 <USB_HC_Init+0x54>
}
 8002c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c4a <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002c4a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002c4e:	6940      	ldr	r0, [r0, #20]
}
 8002c50:	b280      	uxth	r0, r0
 8002c52:	4770      	bx	lr

08002c54 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002c54:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002c58:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002c5c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002c60:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002c64:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c6c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002c70:	d11e      	bne.n	8002cb0 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002c72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c74:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002c78:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002c7c:	d137      	bne.n	8002cee <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c82:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c86:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002c92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002c96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002c9e:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	d002      	beq.n	8002cac <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ca6:	6811      	ldr	r1, [r2, #0]
 8002ca8:	2900      	cmp	r1, #0
 8002caa:	dbfa      	blt.n	8002ca2 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002cac:	2000      	movs	r0, #0
 8002cae:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002cb0:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002cb4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002cb8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002cbc:	d117      	bne.n	8002cee <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002cc6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002cd2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cda:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002cde:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	d0e2      	beq.n	8002cac <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ce6:	6811      	ldr	r1, [r2, #0]
 8002ce8:	2900      	cmp	r1, #0
 8002cea:	dbfa      	blt.n	8002ce2 <USB_HC_Halt+0x8e>
 8002cec:	e7de      	b.n	8002cac <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002cf6:	e7d9      	b.n	8002cac <USB_HC_Halt+0x58>

08002cf8 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002cf8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <USB_DoPing+0x20>)
 8002cfe:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d02:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d0e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002d12:	2000      	movs	r0, #0
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	80080000 	.word	0x80080000

08002d1c <USB_HC_StartXfer>:
{
 8002d1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002d20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002d22:	05db      	lsls	r3, r3, #23
{
 8002d24:	4616      	mov	r6, r2
 8002d26:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002d28:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002d2a:	d517      	bpl.n	8002d5c <USB_HC_StartXfer+0x40>
 8002d2c:	790d      	ldrb	r5, [r1, #4]
 8002d2e:	b9ad      	cbnz	r5, 8002d5c <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002d30:	b94e      	cbnz	r6, 8002d46 <USB_HC_StartXfer+0x2a>
 8002d32:	794b      	ldrb	r3, [r1, #5]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d111      	bne.n	8002d5c <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002d38:	4611      	mov	r1, r2
 8002d3a:	f7ff ffdd 	bl	8002cf8 <USB_DoPing>
}
 8002d3e:	2000      	movs	r0, #0
 8002d40:	b002      	add	sp, #8
 8002d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8002d46:	2e01      	cmp	r6, #1
 8002d48:	d108      	bne.n	8002d5c <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002d4a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002d4e:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002d52:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002d56:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002d5a:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002d5c:	6908      	ldr	r0, [r1, #16]
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d066      	beq.n	8002e30 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002d62:	890b      	ldrh	r3, [r1, #8]
 8002d64:	3801      	subs	r0, #1
 8002d66:	4418      	add	r0, r3
 8002d68:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d6c:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002d6e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002d72:	d903      	bls.n	8002d7c <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8002d78:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002d7c:	78cf      	ldrb	r7, [r1, #3]
 8002d7e:	b117      	cbz	r7, 8002d86 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002d80:	890b      	ldrh	r3, [r1, #8]
 8002d82:	4343      	muls	r3, r0
 8002d84:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002d86:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002d8a:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002d8c:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002d90:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002d94:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002d98:	ea4e 0e08 	orr.w	lr, lr, r8
 8002d9c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002e7c <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002da0:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002da4:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8002da8:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002dac:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002db0:	b116      	cbz	r6, 8002db8 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002db2:	68c8      	ldr	r0, [r1, #12]
 8002db4:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002db8:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002dbc:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002dc0:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002dc4:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8002dc8:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002dcc:	43c0      	mvns	r0, r0
 8002dce:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002dd2:	0740      	lsls	r0, r0, #29
 8002dd4:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002dd8:	ea40 000c 	orr.w	r0, r0, ip
 8002ddc:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de0:	4825      	ldr	r0, [pc, #148]	; (8002e78 <USB_HC_StartXfer+0x15c>)
 8002de2:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002de6:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dea:	f8d0 c000 	ldr.w	ip, [r0]
 8002dee:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002df2:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002df6:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8002dfa:	b1df      	cbz	r7, 8002e34 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002dfc:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002e00:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e04:	f8d0 c000 	ldr.w	ip, [r0]
 8002e08:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002e0c:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e10:	6800      	ldr	r0, [r0, #0]
 8002e12:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8002e16:	2e00      	cmp	r6, #0
 8002e18:	d191      	bne.n	8002d3e <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002e1a:	2f00      	cmp	r7, #0
 8002e1c:	d18f      	bne.n	8002d3e <USB_HC_StartXfer+0x22>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d08d      	beq.n	8002d3e <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8002e22:	79c8      	ldrb	r0, [r1, #7]
 8002e24:	2803      	cmp	r0, #3
 8002e26:	d813      	bhi.n	8002e50 <USB_HC_StartXfer+0x134>
 8002e28:	e8df f000 	tbb	[pc, r0]
 8002e2c:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8002e30:	2001      	movs	r0, #1
 8002e32:	e7a3      	b.n	8002d7c <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002e34:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8002e38:	e7e2      	b.n	8002e00 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002e3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002e3c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002e3e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002e42:	b280      	uxth	r0, r0
 8002e44:	4285      	cmp	r5, r0
 8002e46:	d903      	bls.n	8002e50 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002e48:	69a0      	ldr	r0, [r4, #24]
 8002e4a:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002e4e:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002e50:	2000      	movs	r0, #0
 8002e52:	9000      	str	r0, [sp, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	68c9      	ldr	r1, [r1, #12]
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7ff fd6d 	bl	8002938 <USB_WritePacket>
 8002e5e:	e76e      	b.n	8002d3e <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002e60:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002e64:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002e66:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002e6a:	b280      	uxth	r0, r0
 8002e6c:	4285      	cmp	r5, r0
 8002e6e:	d9ef      	bls.n	8002e50 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002e70:	69a0      	ldr	r0, [r4, #24]
 8002e72:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002e76:	e7ea      	b.n	8002e4e <USB_HC_StartXfer+0x132>
 8002e78:	200000a8 	.word	0x200000a8
 8002e7c:	1ff80000 	.word	0x1ff80000

08002e80 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e80:	6883      	ldr	r3, [r0, #8]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002e86:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e88:	2110      	movs	r1, #16
{
 8002e8a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e8c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e8e:	f7ff fd31 	bl	80028f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff fd40 	bl	8002918 <USB_FlushRxFifo>
 8002e98:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002e9c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002ea0:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002ea2:	6811      	ldr	r1, [r2, #0]
 8002ea4:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002ea8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002eac:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002eb0:	4290      	cmp	r0, r2
 8002eb2:	d1f6      	bne.n	8002ea2 <USB_StopHost+0x22>
 8002eb4:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002ebc:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002ec0:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002ec2:	3001      	adds	r0, #1
 8002ec4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ec8:	d802      	bhi.n	8002ed0 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002eca:	6819      	ldr	r1, [r3, #0]
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	dbf8      	blt.n	8002ec2 <USB_StopHost+0x42>
 8002ed0:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d1ef      	bne.n	8002eb6 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002ede:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ee0:	68a3      	ldr	r3, [r4, #8]
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002ee8:	2000      	movs	r0, #0
 8002eea:	bd10      	pop	{r4, pc}

08002eec <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	4770      	bx	lr

08002ef0 <USBH_CDC_InterfaceDeInit>:
{
 8002ef0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002ef2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002ef6:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8002ef8:	7821      	ldrb	r1, [r4, #0]
{
 8002efa:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002efc:	b139      	cbz	r1, 8002f0e <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002efe:	f000 fe17 	bl	8003b30 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002f02:	7821      	ldrb	r1, [r4, #0]
 8002f04:	4628      	mov	r0, r5
 8002f06:	f000 fe2f 	bl	8003b68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002f0e:	7b21      	ldrb	r1, [r4, #12]
 8002f10:	b141      	cbz	r1, 8002f24 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 fe0c 	bl	8003b30 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8002f18:	7b21      	ldrb	r1, [r4, #12]
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 fe24 	bl	8003b68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8002f20:	2300      	movs	r3, #0
 8002f22:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8002f24:	7b61      	ldrb	r1, [r4, #13]
 8002f26:	b141      	cbz	r1, 8002f3a <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f000 fe01 	bl	8003b30 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8002f2e:	7b61      	ldrb	r1, [r4, #13]
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 fe19 	bl	8003b68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8002f36:	2300      	movs	r3, #0
 8002f38:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8002f3a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002f3e:	69d8      	ldr	r0, [r3, #28]
 8002f40:	b128      	cbz	r0, 8002f4e <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8002f42:	f001 febb 	bl	8004cbc <free>
    phost->pActiveClass->pData = 0U;
 8002f46:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
}
 8002f4e:	2000      	movs	r0, #0
 8002f50:	bd38      	pop	{r3, r4, r5, pc}

08002f52 <USBH_CDC_InterfaceInit>:
{
 8002f52:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8002f54:	2202      	movs	r2, #2
{
 8002f56:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4611      	mov	r1, r2
{
 8002f5c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8002f5e:	f000 f9b2 	bl	80032c6 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8002f62:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8002f64:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8002f66:	d102      	bne.n	8002f6e <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002f68:	2002      	movs	r0, #2
}
 8002f6a:	b005      	add	sp, #20
 8002f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8002f6e:	4601      	mov	r1, r0
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 f99f 	bl	80032b4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002f76:	2050      	movs	r0, #80	; 0x50
 8002f78:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8002f7c:	f001 fe96 	bl	8004cac <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002f80:	231a      	movs	r3, #26
 8002f82:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002f86:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002f88:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8002f8c:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002f8e:	bf42      	ittt	mi
 8002f90:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002f92:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8002f96:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002f98:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8002f9a:	7841      	ldrb	r1, [r0, #1]
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 fdcc 	bl	8003b3a <USBH_AllocPipe>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8002fa6:	8960      	ldrh	r0, [r4, #10]
 8002fa8:	9002      	str	r0, [sp, #8]
 8002faa:	2003      	movs	r0, #3
 8002fac:	9001      	str	r0, [sp, #4]
 8002fae:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002fb2:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002fb6:	7862      	ldrb	r2, [r4, #1]
 8002fb8:	9000      	str	r0, [sp, #0]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f000 fda9 	bl	8003b12 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	7821      	ldrb	r1, [r4, #0]
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f001 fe01 	bl	8004bcc <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8002fca:	2300      	movs	r3, #0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	210a      	movs	r1, #10
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f978 	bl	80032c6 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8002fd6:	28ff      	cmp	r0, #255	; 0xff
 8002fd8:	d0c6      	beq.n	8002f68 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002fda:	231a      	movs	r3, #26
 8002fdc:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002fe0:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002fe4:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002fe8:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8002fec:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002ff0:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002ff4:	bf0d      	iteet	eq
 8002ff6:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002ff8:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002ffa:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002ffc:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002ffe:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003002:	bf08      	it	eq
 8003004:	73a3      	strbeq	r3, [r4, #14]
 8003006:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800300a:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800300c:	bf18      	it	ne
 800300e:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003010:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003012:	bf14      	ite	ne
 8003014:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003016:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003018:	f000 fd8f 	bl	8003b3a <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800301c:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800301e:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003020:	4628      	mov	r0, r5
 8003022:	f000 fd8a 	bl	8003b3a <USBH_AllocPipe>
 8003026:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003028:	8b20      	ldrh	r0, [r4, #24]
 800302a:	9002      	str	r0, [sp, #8]
 800302c:	2602      	movs	r6, #2
 800302e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003032:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003036:	7ba2      	ldrb	r2, [r4, #14]
 8003038:	7b61      	ldrb	r1, [r4, #13]
 800303a:	9601      	str	r6, [sp, #4]
 800303c:	9000      	str	r0, [sp, #0]
 800303e:	4628      	mov	r0, r5
 8003040:	f000 fd67 	bl	8003b12 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003044:	8b60      	ldrh	r0, [r4, #26]
 8003046:	9002      	str	r0, [sp, #8]
 8003048:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800304c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003050:	7be2      	ldrb	r2, [r4, #15]
 8003052:	7b21      	ldrb	r1, [r4, #12]
 8003054:	9601      	str	r6, [sp, #4]
 8003056:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003058:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800305a:	4628      	mov	r0, r5
 800305c:	f000 fd59 	bl	8003b12 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003060:	4632      	mov	r2, r6
 8003062:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003064:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003068:	4628      	mov	r0, r5
 800306a:	f001 fdaf 	bl	8004bcc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800306e:	4632      	mov	r2, r6
 8003070:	7b21      	ldrb	r1, [r4, #12]
 8003072:	4628      	mov	r0, r5
 8003074:	f001 fdaa 	bl	8004bcc <USBH_LL_SetToggle>
      status = USBH_OK;
 8003078:	4630      	mov	r0, r6
 800307a:	e776      	b.n	8002f6a <USBH_CDC_InterfaceInit+0x18>

0800307c <USBH_CDC_ClassRequest>:
{
 800307c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800307e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003082:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003084:	23a1      	movs	r3, #161	; 0xa1
 8003086:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003088:	2321      	movs	r3, #33	; 0x21
 800308a:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800308c:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003092:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003094:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003096:	3140      	adds	r1, #64	; 0x40
{
 8003098:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800309a:	f000 fac9 	bl	8003630 <USBH_CtlReq>
  if(status == USBH_OK)
 800309e:	4605      	mov	r5, r0
 80030a0:	b920      	cbnz	r0, 80030ac <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80030a2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80030a6:	2102      	movs	r1, #2
 80030a8:	4620      	mov	r0, r4
 80030aa:	4798      	blx	r3
}
 80030ac:	4628      	mov	r0, r5
 80030ae:	bd38      	pop	{r3, r4, r5, pc}

080030b0 <USBH_CDC_TransmitCallback>:
 80030b0:	4770      	bx	lr

080030b2 <USBH_CDC_ReceiveCallback>:
 80030b2:	4770      	bx	lr

080030b4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80030b4:	4770      	bx	lr

080030b6 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80030b6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80030ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80030bc:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80030be:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80030c2:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d83d      	bhi.n	8003144 <USBH_CDC_Process+0x8e>
 80030c8:	e8df f003 	tbb	[pc, r3]
 80030cc:	42170603 	.word	0x42170603
 80030d0:	a6          	.byte	0xa6
 80030d1:	00          	.byte	0x00
    status = USBH_OK;
 80030d2:	2000      	movs	r0, #0
}
 80030d4:	b002      	add	sp, #8
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80030d8:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80030da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80030dc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80030de:	2320      	movs	r3, #32
 80030e0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80030e2:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80030e8:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80030ea:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80030ec:	f000 faa0 	bl	8003630 <USBH_CtlReq>
    if(req_status == USBH_OK)
 80030f0:	bb50      	cbnz	r0, 8003148 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80030f2:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 80030f4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80030f8:	e024      	b.n	8003144 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80030fa:	23a1      	movs	r3, #161	; 0xa1
 80030fc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80030fe:	2321      	movs	r3, #33	; 0x21
 8003100:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003102:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003108:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800310a:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800310c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003110:	f000 fa8e 	bl	8003630 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003114:	b9c0      	cbnz	r0, 8003148 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003116:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003118:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 800311a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800311e:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8003128:	4291      	cmp	r1, r2
 800312a:	d10b      	bne.n	8003144 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800312c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003130:	795a      	ldrb	r2, [r3, #5]
 8003132:	4291      	cmp	r1, r2
 8003134:	d106      	bne.n	8003144 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003136:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d102      	bne.n	8003144 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 800313e:	4628      	mov	r0, r5
 8003140:	f7ff ffb8 	bl	80030b4 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003144:	2001      	movs	r0, #1
 8003146:	e7c5      	b.n	80030d4 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8003148:	2801      	cmp	r0, #1
 800314a:	d0fb      	beq.n	8003144 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 800314c:	2304      	movs	r3, #4
 800314e:	e7d1      	b.n	80030f4 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8003150:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003154:	2901      	cmp	r1, #1
 8003156:	d021      	beq.n	800319c <USBH_CDC_Process+0xe6>
 8003158:	2902      	cmp	r1, #2
 800315a:	d02e      	beq.n	80031ba <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800315c:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003160:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003162:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8003166:	2b03      	cmp	r3, #3
 8003168:	d045      	beq.n	80031f6 <USBH_CDC_Process+0x140>
 800316a:	2b04      	cmp	r3, #4
 800316c:	d1ea      	bne.n	8003144 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800316e:	7b31      	ldrb	r1, [r6, #12]
 8003170:	4628      	mov	r0, r5
 8003172:	f001 fd1b 	bl	8004bac <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003176:	2801      	cmp	r0, #1
 8003178:	d1e4      	bne.n	8003144 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800317a:	7b31      	ldrb	r1, [r6, #12]
 800317c:	4628      	mov	r0, r5
 800317e:	f001 fcd1 	bl	8004b24 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8003182:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003184:	4298      	cmp	r0, r3
 8003186:	d040      	beq.n	800320a <USBH_CDC_Process+0x154>
 8003188:	8b72      	ldrh	r2, [r6, #26]
 800318a:	4290      	cmp	r0, r2
 800318c:	d93d      	bls.n	800320a <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 800318e:	1a1b      	subs	r3, r3, r0
 8003190:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003192:	6a33      	ldr	r3, [r6, #32]
 8003194:	4418      	add	r0, r3
 8003196:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003198:	2303      	movs	r3, #3
 800319a:	e033      	b.n	8003204 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800319c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800319e:	8b22      	ldrh	r2, [r4, #24]
 80031a0:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80031a2:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80031a4:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80031a6:	bf98      	it	ls
 80031a8:	b282      	uxthls	r2, r0
 80031aa:	69e1      	ldr	r1, [r4, #28]
 80031ac:	4628      	mov	r0, r5
 80031ae:	f000 fc89 	bl	8003ac4 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80031b2:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80031b4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80031b8:	e7d0      	b.n	800315c <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80031ba:	7b61      	ldrb	r1, [r4, #13]
 80031bc:	f001 fcf6 	bl	8004bac <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 80031c0:	2801      	cmp	r0, #1
 80031c2:	d115      	bne.n	80031f0 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80031c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031c6:	8b22      	ldrh	r2, [r4, #24]
 80031c8:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80031ca:	bf83      	ittte	hi
 80031cc:	1a9b      	subhi	r3, r3, r2
 80031ce:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80031d0:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 80031d2:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80031d4:	bf8a      	itet	hi
 80031d6:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 80031d8:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80031da:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80031dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031de:	b10b      	cbz	r3, 80031e4 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e7e7      	b.n	80031b4 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80031e4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80031e8:	4628      	mov	r0, r5
 80031ea:	f7ff ff61 	bl	80030b0 <USBH_CDC_TransmitCallback>
 80031ee:	e7b5      	b.n	800315c <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 80031f0:	2802      	cmp	r0, #2
 80031f2:	d1b3      	bne.n	800315c <USBH_CDC_Process+0xa6>
 80031f4:	e7f4      	b.n	80031e0 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 80031f6:	7b33      	ldrb	r3, [r6, #12]
 80031f8:	8b72      	ldrh	r2, [r6, #26]
 80031fa:	6a31      	ldr	r1, [r6, #32]
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 fc78 	bl	8003af2 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003202:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003204:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8003208:	e79c      	b.n	8003144 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800320a:	2300      	movs	r3, #0
 800320c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003210:	4628      	mov	r0, r5
 8003212:	f7ff ff4e 	bl	80030b2 <USBH_CDC_ReceiveCallback>
 8003216:	e795      	b.n	8003144 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8003218:	2100      	movs	r1, #0
 800321a:	f000 fc0d 	bl	8003a38 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 800321e:	2800      	cmp	r0, #0
 8003220:	d190      	bne.n	8003144 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003222:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8003226:	e78d      	b.n	8003144 <USBH_CDC_Process+0x8e>

08003228 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003228:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800322c:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003230:	2100      	movs	r1, #0
 8003232:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003236:	4293      	cmp	r3, r2
 8003238:	d1fb      	bne.n	8003232 <DeInitStateMachine+0xa>
 800323a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800323e:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003248:	4291      	cmp	r1, r2
 800324a:	d1fb      	bne.n	8003244 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800324c:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800324e:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003250:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003252:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003254:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8003256:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800325a:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800325c:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800325e:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003260:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003264:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8003268:	2000      	movs	r0, #0
 800326a:	4770      	bx	lr

0800326c <USBH_Init>:
{
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	460d      	mov	r5, r1
  if(phost == NULL)
 8003270:	4604      	mov	r4, r0
 8003272:	b180      	cbz	r0, 8003296 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8003274:	2300      	movs	r3, #0
  phost->id = id;
 8003276:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 800327a:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800327e:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8003282:	f7ff ffd1 	bl	8003228 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003286:	b10d      	cbz	r5, 800328c <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003288:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 800328c:	4620      	mov	r0, r4
 800328e:	f001 fbe7 	bl	8004a60 <USBH_LL_Init>
  return USBH_OK;
 8003292:	2000      	movs	r0, #0
 8003294:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8003296:	2002      	movs	r0, #2
}
 8003298:	bd38      	pop	{r3, r4, r5, pc}

0800329a <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800329a:	b149      	cbz	r1, 80032b0 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800329c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80032a0:	b933      	cbnz	r3, 80032b0 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80032a2:	2201      	movs	r2, #1
 80032a4:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 80032a8:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 80032ac:	4618      	mov	r0, r3
 80032ae:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80032b0:	2002      	movs	r0, #2
  }

  return status;
}
 80032b2:	4770      	bx	lr

080032b4 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80032b4:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80032b8:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80032ba:	bf86      	itte	hi
 80032bc:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80032c0:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80032c2:	2002      	movls	r0, #2
  }
  return status;
}
 80032c4:	4770      	bx	lr

080032c6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80032c6:	b570      	push	{r4, r5, r6, lr}
 80032c8:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80032ca:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 80032ce:	428e      	cmp	r6, r1
 80032d0:	b2e5      	uxtb	r5, r4
 80032d2:	d001      	beq.n	80032d8 <USBH_FindInterface+0x12>
 80032d4:	29ff      	cmp	r1, #255	; 0xff
 80032d6:	d10b      	bne.n	80032f0 <USBH_FindInterface+0x2a>
 80032d8:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80032dc:	4296      	cmp	r6, r2
 80032de:	d001      	beq.n	80032e4 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80032e0:	2aff      	cmp	r2, #255	; 0xff
 80032e2:	d105      	bne.n	80032f0 <USBH_FindInterface+0x2a>
 80032e4:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 80032e8:	429e      	cmp	r6, r3
 80032ea:	d007      	beq.n	80032fc <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80032ec:	2bff      	cmp	r3, #255	; 0xff
 80032ee:	d005      	beq.n	80032fc <USBH_FindInterface+0x36>
 80032f0:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80032f2:	2c02      	cmp	r4, #2
 80032f4:	f100 001a 	add.w	r0, r0, #26
 80032f8:	d1e7      	bne.n	80032ca <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80032fa:	25ff      	movs	r5, #255	; 0xff
}
 80032fc:	4628      	mov	r0, r5
 80032fe:	bd70      	pop	{r4, r5, r6, pc}

08003300 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003300:	b510      	push	{r4, lr}
 8003302:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003304:	f001 fbd6 	bl	8004ab4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8003308:	2101      	movs	r1, #1
 800330a:	4620      	mov	r0, r4
 800330c:	f001 fc52 	bl	8004bb4 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003310:	2000      	movs	r0, #0
 8003312:	bd10      	pop	{r4, pc}

08003314 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003314:	b530      	push	{r4, r5, lr}
 8003316:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003318:	2302      	movs	r3, #2
 800331a:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 800331e:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8003322:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003324:	b933      	cbnz	r3, 8003334 <USBH_Process+0x20>
 8003326:	7802      	ldrb	r2, [r0, #0]
 8003328:	b122      	cbz	r2, 8003334 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800332a:	7802      	ldrb	r2, [r0, #0]
 800332c:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 800332e:	bf1c      	itt	ne
 8003330:	2203      	movne	r2, #3
 8003332:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003334:	7822      	ldrb	r2, [r4, #0]
 8003336:	2a0b      	cmp	r2, #11
 8003338:	d818      	bhi.n	800336c <USBH_Process+0x58>
 800333a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800333e:	000c      	.short	0x000c
 8003340:	001f001a 	.word	0x001f001a
 8003344:	00170121 	.word	0x00170121
 8003348:	0107004f 	.word	0x0107004f
 800334c:	00d000c6 	.word	0x00d000c6
 8003350:	00e700da 	.word	0x00e700da
 8003354:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8003356:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800335a:	b13b      	cbz	r3, 800336c <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800335c:	2301      	movs	r3, #1
      USBH_Delay(200U);
 800335e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003360:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8003362:	f001 fc42 	bl	8004bea <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003366:	4620      	mov	r0, r4
 8003368:	f001 fbce 	bl	8004b08 <USBH_LL_ResetPort>
}
 800336c:	2000      	movs	r0, #0
 800336e:	b007      	add	sp, #28
 8003370:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8003372:	2b01      	cmp	r3, #1
 8003374:	d1fa      	bne.n	800336c <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8003376:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8003378:	7023      	strb	r3, [r4, #0]
 800337a:	e7f7      	b.n	800336c <USBH_Process+0x58>
    USBH_Delay(100U);
 800337c:	2064      	movs	r0, #100	; 0x64
 800337e:	f001 fc34 	bl	8004bea <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003382:	4620      	mov	r0, r4
 8003384:	f001 fbb2 	bl	8004aec <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003388:	2305      	movs	r3, #5
 800338a:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800338c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003390:	2100      	movs	r1, #0
 8003392:	4620      	mov	r0, r4
 8003394:	f000 fbd1 	bl	8003b3a <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003398:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800339a:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800339c:	4620      	mov	r0, r4
 800339e:	f000 fbcc 	bl	8003b3a <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80033a2:	79a2      	ldrb	r2, [r4, #6]
 80033a4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80033a8:	7120      	strb	r0, [r4, #4]
 80033aa:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80033ac:	9202      	str	r2, [sp, #8]
 80033ae:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 80033b0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80033b4:	9200      	str	r2, [sp, #0]
 80033b6:	9501      	str	r5, [sp, #4]
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	4620      	mov	r0, r4
 80033bc:	f000 fba9 	bl	8003b12 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80033c0:	79a2      	ldrb	r2, [r4, #6]
 80033c2:	9202      	str	r2, [sp, #8]
 80033c4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80033c8:	9200      	str	r2, [sp, #0]
 80033ca:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80033ce:	7961      	ldrb	r1, [r4, #5]
 80033d0:	9501      	str	r5, [sp, #4]
 80033d2:	462a      	mov	r2, r5
 80033d4:	4620      	mov	r0, r4
 80033d6:	f000 fb9c 	bl	8003b12 <USBH_OpenPipe>
 80033da:	e7c7      	b.n	800336c <USBH_Process+0x58>
  switch (phost->EnumState)
 80033dc:	7863      	ldrb	r3, [r4, #1]
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d8c4      	bhi.n	800336c <USBH_Process+0x58>
 80033e2:	e8df f003 	tbb	[pc, r3]
 80033e6:	1504      	.short	0x1504
 80033e8:	4138301e 	.word	0x4138301e
 80033ec:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80033ee:	2108      	movs	r1, #8
 80033f0:	4620      	mov	r0, r4
 80033f2:	f000 f9fa 	bl	80037ea <USBH_Get_DevDesc>
 80033f6:	4605      	mov	r5, r0
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d1b7      	bne.n	800336c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80033fc:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80033fe:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003402:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8003404:	7921      	ldrb	r1, [r4, #4]
 8003406:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800340a:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800340c:	9202      	str	r2, [sp, #8]
 800340e:	e7cf      	b.n	80033b0 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003410:	2112      	movs	r1, #18
 8003412:	4620      	mov	r0, r4
 8003414:	f000 f9e9 	bl	80037ea <USBH_Get_DevDesc>
 8003418:	2800      	cmp	r0, #0
 800341a:	d1a7      	bne.n	800336c <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 800341c:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800341e:	7063      	strb	r3, [r4, #1]
 8003420:	e7a4      	b.n	800336c <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003422:	2101      	movs	r1, #1
 8003424:	4620      	mov	r0, r4
 8003426:	f000 fadd 	bl	80039e4 <USBH_SetAddress>
 800342a:	4605      	mov	r5, r0
 800342c:	2800      	cmp	r0, #0
 800342e:	d19d      	bne.n	800336c <USBH_Process+0x58>
      USBH_Delay(2U);
 8003430:	2002      	movs	r0, #2
 8003432:	f001 fbda 	bl	8004bea <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003436:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003438:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800343a:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800343c:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003440:	7921      	ldrb	r1, [r4, #4]
 8003442:	79a2      	ldrb	r2, [r4, #6]
 8003444:	e7e2      	b.n	800340c <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8003446:	2109      	movs	r1, #9
 8003448:	4620      	mov	r0, r4
 800344a:	f000 fa16 	bl	800387a <USBH_Get_CfgDesc>
 800344e:	2800      	cmp	r0, #0
 8003450:	d18c      	bne.n	800336c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003452:	2304      	movs	r3, #4
 8003454:	e7e3      	b.n	800341e <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8003456:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800345a:	4620      	mov	r0, r4
 800345c:	f000 fa0d 	bl	800387a <USBH_Get_CfgDesc>
 8003460:	2800      	cmp	r0, #0
 8003462:	d183      	bne.n	800336c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003464:	2305      	movs	r3, #5
 8003466:	e7da      	b.n	800341e <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8003468:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800346c:	b141      	cbz	r1, 8003480 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 800346e:	23ff      	movs	r3, #255	; 0xff
 8003470:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003474:	4620      	mov	r0, r4
 8003476:	f000 fa8e 	bl	8003996 <USBH_Get_StringDesc>
 800347a:	2800      	cmp	r0, #0
 800347c:	f47f af76 	bne.w	800336c <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003480:	2306      	movs	r3, #6
 8003482:	e7cc      	b.n	800341e <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8003484:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8003488:	b141      	cbz	r1, 800349c <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 800348a:	23ff      	movs	r3, #255	; 0xff
 800348c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003490:	4620      	mov	r0, r4
 8003492:	f000 fa80 	bl	8003996 <USBH_Get_StringDesc>
 8003496:	2800      	cmp	r0, #0
 8003498:	f47f af68 	bne.w	800336c <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800349c:	2307      	movs	r3, #7
 800349e:	e7be      	b.n	800341e <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80034a0:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80034a4:	b141      	cbz	r1, 80034b8 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80034a6:	23ff      	movs	r3, #255	; 0xff
 80034a8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 fa72 	bl	8003996 <USBH_Get_StringDesc>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	f47f af5a 	bne.w	800336c <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80034be:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d009      	beq.n	80034da <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80034c6:	2307      	movs	r3, #7
 80034c8:	e756      	b.n	8003378 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80034ca:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f43f af4c 	beq.w	800336c <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80034d4:	2101      	movs	r1, #1
 80034d6:	4620      	mov	r0, r4
 80034d8:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80034da:	2308      	movs	r3, #8
 80034dc:	e74c      	b.n	8003378 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80034de:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fa8c 	bl	8003a00 <USBH_SetCfg>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	f47f af3f 	bne.w	800336c <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80034ee:	2309      	movs	r3, #9
 80034f0:	e742      	b.n	8003378 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80034f2:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80034f6:	069b      	lsls	r3, r3, #26
 80034f8:	d506      	bpl.n	8003508 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80034fa:	2101      	movs	r1, #1
 80034fc:	4620      	mov	r0, r4
 80034fe:	f000 fa8d 	bl	8003a1c <USBH_SetFeature>
 8003502:	2800      	cmp	r0, #0
 8003504:	f47f af32 	bne.w	800336c <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8003508:	230a      	movs	r3, #10
 800350a:	e735      	b.n	8003378 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 800350c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003510:	2b00      	cmp	r3, #0
 8003512:	f43f af2b 	beq.w	800336c <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800351c:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003520:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8003524:	7919      	ldrb	r1, [r3, #4]
 8003526:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8003528:	bf08      	it	eq
 800352a:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800352e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003532:	b1d3      	cbz	r3, 800356a <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4620      	mov	r0, r4
 8003538:	4798      	blx	r3
 800353a:	b9b0      	cbnz	r0, 800356a <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 800353c:	2306      	movs	r3, #6
 800353e:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003540:	2103      	movs	r1, #3
 8003542:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003546:	4620      	mov	r0, r4
 8003548:	4798      	blx	r3
 800354a:	e70f      	b.n	800336c <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 800354c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003550:	b15b      	cbz	r3, 800356a <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	4620      	mov	r0, r4
 8003556:	4798      	blx	r3
 8003558:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800355c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f47f af03 	bne.w	800336c <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 8003566:	230b      	movs	r3, #11
 8003568:	e706      	b.n	8003378 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800356a:	230d      	movs	r3, #13
 800356c:	e704      	b.n	8003378 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 800356e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003572:	2b00      	cmp	r3, #0
 8003574:	f43f aefa 	beq.w	800336c <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4620      	mov	r0, r4
 800357c:	4798      	blx	r3
 800357e:	e6f5      	b.n	800336c <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8003580:	4620      	mov	r0, r4
 8003582:	f7ff fe51 	bl	8003228 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8003586:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800358a:	2b00      	cmp	r3, #0
 800358c:	f43f aeee 	beq.w	800336c <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4620      	mov	r0, r4
 8003594:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 800359c:	e6e6      	b.n	800336c <USBH_Process+0x58>

0800359e <USBH_LL_SetTimer>:
  phost->Timer = time;
 800359e:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80035a2:	4770      	bx	lr

080035a4 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80035a4:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80035a8:	3201      	adds	r2, #1
 80035aa:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80035ae:	7802      	ldrb	r2, [r0, #0]
 80035b0:	2a0b      	cmp	r2, #11
 80035b2:	d104      	bne.n	80035be <USBH_LL_IncTimer+0x1a>
 80035b4:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80035b8:	b10b      	cbz	r3, 80035be <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4718      	bx	r3
 80035be:	4770      	bx	lr

080035c0 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80035c6:	4770      	bx	lr

080035c8 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80035ce:	4770      	bx	lr

080035d0 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80035d0:	7802      	ldrb	r2, [r0, #0]
{
 80035d2:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80035d4:	b94a      	cbnz	r2, 80035ea <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80035d6:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80035da:	2201      	movs	r2, #1
 80035dc:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80035e0:	b10b      	cbz	r3, 80035e6 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80035e2:	2104      	movs	r1, #4
 80035e4:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80035e6:	2000      	movs	r0, #0
 80035e8:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80035ea:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 80035ee:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 80035f0:	bf04      	itt	eq
 80035f2:	2202      	moveq	r2, #2
 80035f4:	7002      	strbeq	r2, [r0, #0]
 80035f6:	e7f6      	b.n	80035e6 <USBH_LL_Connect+0x16>

080035f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 80035fc:	f001 fa68 	bl	8004ad0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003600:	7921      	ldrb	r1, [r4, #4]
 8003602:	4620      	mov	r0, r4
 8003604:	f000 fab0 	bl	8003b68 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8003608:	7961      	ldrb	r1, [r4, #5]
 800360a:	4620      	mov	r0, r4
 800360c:	f000 faac 	bl	8003b68 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8003616:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800361a:	b113      	cbz	r3, 8003622 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800361c:	2105      	movs	r1, #5
 800361e:	4620      	mov	r0, r4
 8003620:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003622:	4620      	mov	r0, r4
 8003624:	f001 fa46 	bl	8004ab4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8003628:	2303      	movs	r3, #3
 800362a:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800362c:	2000      	movs	r0, #0
 800362e:	bd10      	pop	{r4, pc}

08003630 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003630:	b513      	push	{r0, r1, r4, lr}
 8003632:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003634:	7880      	ldrb	r0, [r0, #2]
 8003636:	2801      	cmp	r0, #1
 8003638:	d003      	beq.n	8003642 <USBH_CtlReq+0x12>
 800363a:	2802      	cmp	r0, #2
 800363c:	d008      	beq.n	8003650 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800363e:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003640:	e004      	b.n	800364c <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8003642:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8003644:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8003646:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8003648:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800364a:	70a3      	strb	r3, [r4, #2]
}
 800364c:	b002      	add	sp, #8
 800364e:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003650:	7e23      	ldrb	r3, [r4, #24]
 8003652:	3b01      	subs	r3, #1
 8003654:	2101      	movs	r1, #1
 8003656:	2b0a      	cmp	r3, #10
 8003658:	d8f1      	bhi.n	800363e <USBH_CtlReq+0xe>
 800365a:	e8df f003 	tbb	[pc, r3]
 800365e:	0f06      	.short	0x0f06
 8003660:	4c40362b 	.word	0x4c40362b
 8003664:	8c806f64 	.word	0x8c806f64
 8003668:	95          	.byte	0x95
 8003669:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800366a:	7962      	ldrb	r2, [r4, #5]
 800366c:	f104 0110 	add.w	r1, r4, #16
 8003670:	4620      	mov	r0, r4
 8003672:	f000 f9ef 	bl	8003a54 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8003676:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8003678:	7623      	strb	r3, [r4, #24]
 800367a:	e7e0      	b.n	800363e <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800367c:	7961      	ldrb	r1, [r4, #5]
 800367e:	4620      	mov	r0, r4
 8003680:	f001 fa94 	bl	8004bac <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003684:	2801      	cmp	r0, #1
 8003686:	d10f      	bne.n	80036a8 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 8003688:	8ae2      	ldrh	r2, [r4, #22]
 800368a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800368e:	b12a      	cbz	r2, 800369c <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8003690:	2b00      	cmp	r3, #0
 8003692:	da01      	bge.n	8003698 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8003694:	2303      	movs	r3, #3
 8003696:	e7ef      	b.n	8003678 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8003698:	2305      	movs	r3, #5
 800369a:	e7ed      	b.n	8003678 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800369c:	2b00      	cmp	r3, #0
 800369e:	da01      	bge.n	80036a4 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80036a0:	2309      	movs	r3, #9
 80036a2:	e7e9      	b.n	8003678 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80036a4:	2307      	movs	r3, #7
 80036a6:	e7e7      	b.n	8003678 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80036a8:	2804      	cmp	r0, #4
 80036aa:	d001      	beq.n	80036b0 <USBH_CtlReq+0x80>
 80036ac:	2802      	cmp	r0, #2
 80036ae:	d1c6      	bne.n	800363e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80036b0:	230b      	movs	r3, #11
 80036b2:	e7e1      	b.n	8003678 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80036b4:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80036b8:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80036ba:	89a2      	ldrh	r2, [r4, #12]
 80036bc:	7923      	ldrb	r3, [r4, #4]
 80036be:	68a1      	ldr	r1, [r4, #8]
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 f9ef 	bl	8003aa4 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80036c6:	2304      	movs	r3, #4
 80036c8:	e7d6      	b.n	8003678 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80036ca:	7921      	ldrb	r1, [r4, #4]
 80036cc:	4620      	mov	r0, r4
 80036ce:	f001 fa6d 	bl	8004bac <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80036d2:	2801      	cmp	r0, #1
 80036d4:	d0e4      	beq.n	80036a0 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80036d6:	2805      	cmp	r0, #5
 80036d8:	d015      	beq.n	8003706 <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80036da:	2804      	cmp	r0, #4
 80036dc:	e7e7      	b.n	80036ae <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80036de:	7963      	ldrb	r3, [r4, #5]
 80036e0:	9100      	str	r1, [sp, #0]
 80036e2:	89a2      	ldrh	r2, [r4, #12]
 80036e4:	68a1      	ldr	r1, [r4, #8]
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 f9c5 	bl	8003a76 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80036ec:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80036f0:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80036f2:	2306      	movs	r3, #6
 80036f4:	e7c0      	b.n	8003678 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80036f6:	7961      	ldrb	r1, [r4, #5]
 80036f8:	4620      	mov	r0, r4
 80036fa:	f001 fa57 	bl	8004bac <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80036fe:	2801      	cmp	r0, #1
 8003700:	d0d0      	beq.n	80036a4 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8003702:	2805      	cmp	r0, #5
 8003704:	d105      	bne.n	8003712 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 8003706:	2301      	movs	r3, #1
 8003708:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800370a:	2300      	movs	r3, #0
 800370c:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800370e:	2003      	movs	r0, #3
 8003710:	e79c      	b.n	800364c <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003712:	2802      	cmp	r0, #2
 8003714:	d0c0      	beq.n	8003698 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 8003716:	2804      	cmp	r0, #4
 8003718:	d191      	bne.n	800363e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800371a:	230b      	movs	r3, #11
 800371c:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800371e:	2301      	movs	r3, #1
 8003720:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8003722:	2002      	movs	r0, #2
 8003724:	e792      	b.n	800364c <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8003726:	2200      	movs	r2, #0
 8003728:	7923      	ldrb	r3, [r4, #4]
 800372a:	4611      	mov	r1, r2
 800372c:	4620      	mov	r0, r4
 800372e:	f000 f9b9 	bl	8003aa4 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003732:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003736:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003738:	2308      	movs	r3, #8
 800373a:	e79d      	b.n	8003678 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800373c:	7921      	ldrb	r1, [r4, #4]
 800373e:	4620      	mov	r0, r4
 8003740:	f001 fa34 	bl	8004bac <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003744:	2801      	cmp	r0, #1
 8003746:	d104      	bne.n	8003752 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8003748:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800374a:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 800374c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800374e:	7620      	strb	r0, [r4, #24]
 8003750:	e77c      	b.n	800364c <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003752:	2804      	cmp	r0, #4
 8003754:	d0ac      	beq.n	80036b0 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 8003756:	2805      	cmp	r0, #5
 8003758:	f47f af71 	bne.w	800363e <USBH_CtlReq+0xe>
 800375c:	e7d3      	b.n	8003706 <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 800375e:	2200      	movs	r2, #0
 8003760:	7963      	ldrb	r3, [r4, #5]
 8003762:	9100      	str	r1, [sp, #0]
 8003764:	4620      	mov	r0, r4
 8003766:	4611      	mov	r1, r2
 8003768:	f000 f985 	bl	8003a76 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800376c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003770:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003772:	230a      	movs	r3, #10
 8003774:	e780      	b.n	8003678 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8003776:	7961      	ldrb	r1, [r4, #5]
 8003778:	4620      	mov	r0, r4
 800377a:	f001 fa17 	bl	8004bac <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800377e:	2801      	cmp	r0, #1
 8003780:	d0e2      	beq.n	8003748 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003782:	2802      	cmp	r0, #2
 8003784:	d1a9      	bne.n	80036da <USBH_CtlReq+0xaa>
 8003786:	e78b      	b.n	80036a0 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003788:	7e63      	ldrb	r3, [r4, #25]
 800378a:	3301      	adds	r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	7663      	strb	r3, [r4, #25]
 8003792:	d806      	bhi.n	80037a2 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003794:	4620      	mov	r0, r4
 8003796:	f001 f99b 	bl	8004ad0 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800379a:	2301      	movs	r3, #1
 800379c:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 800379e:	70a3      	strb	r3, [r4, #2]
 80037a0:	e74d      	b.n	800363e <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80037a2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80037a6:	2106      	movs	r1, #6
 80037a8:	4620      	mov	r0, r4
 80037aa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	7663      	strb	r3, [r4, #25]
 80037b0:	e7b5      	b.n	800371e <USBH_CtlReq+0xee>

080037b2 <USBH_GetDescriptor>:
{
 80037b2:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80037b4:	7884      	ldrb	r4, [r0, #2]
{
 80037b6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80037ba:	2c01      	cmp	r4, #1
 80037bc:	d110      	bne.n	80037e0 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80037be:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80037c2:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80037c4:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80037c8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80037cc:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80037ce:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80037d2:	bf0c      	ite	eq
 80037d4:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80037d8:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80037da:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80037dc:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80037de:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80037e0:	462a      	mov	r2, r5
 80037e2:	4619      	mov	r1, r3
}
 80037e4:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80037e6:	f7ff bf23 	b.w	8003630 <USBH_CtlReq>

080037ea <USBH_Get_DevDesc>:
{
 80037ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80037ec:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80037f0:	460d      	mov	r5, r1
 80037f2:	9100      	str	r1, [sp, #0]
 80037f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f8:	2100      	movs	r1, #0
{
 80037fa:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80037fc:	f7ff ffd9 	bl	80037b2 <USBH_GetDescriptor>
 8003800:	bbc8      	cbnz	r0, 8003876 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003802:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8003806:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800380a:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800380e:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003812:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8003816:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800381a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800381e:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003822:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003826:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800382a:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800382e:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8003832:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003834:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003838:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 800383c:	d91b      	bls.n	8003876 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 800383e:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8003842:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8003846:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800384a:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800384e:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003852:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003856:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800385a:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800385e:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003862:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003866:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800386a:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800386e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003872:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8003876:	b003      	add	sp, #12
 8003878:	bd30      	pop	{r4, r5, pc}

0800387a <USBH_Get_CfgDesc>:
{
 800387a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 800387e:	f100 051c 	add.w	r5, r0, #28
{
 8003882:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8003884:	9100      	str	r1, [sp, #0]
 8003886:	462b      	mov	r3, r5
 8003888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388c:	2100      	movs	r1, #0
{
 800388e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003890:	f7ff ff8f 	bl	80037b2 <USBH_GetDescriptor>
 8003894:	bb48      	cbnz	r0, 80038ea <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003896:	7f23      	ldrb	r3, [r4, #28]
 8003898:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800389c:	7f63      	ldrb	r3, [r4, #29]
 800389e:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80038a2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80038a6:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80038aa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80038ae:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80038b2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80038b6:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80038ba:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80038be:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80038c2:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80038c6:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80038c8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80038cc:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80038d0:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80038d4:	d909      	bls.n	80038ea <USBH_Get_CfgDesc+0x70>
 80038d6:	4627      	mov	r7, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	4606      	mov	r6, r0
 80038dc:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80038de:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80038e2:	2e02      	cmp	r6, #2
 80038e4:	d001      	beq.n	80038ea <USBH_Get_CfgDesc+0x70>
 80038e6:	4596      	cmp	lr, r2
 80038e8:	d802      	bhi.n	80038f0 <USBH_Get_CfgDesc+0x76>
}
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80038f0:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80038f2:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80038f4:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80038f6:	7859      	ldrb	r1, [r3, #1]
 80038f8:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80038fa:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80038fc:	d1f1      	bne.n	80038e2 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80038fe:	7819      	ldrb	r1, [r3, #0]
 8003900:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8003904:	7859      	ldrb	r1, [r3, #1]
 8003906:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800390a:	7899      	ldrb	r1, [r3, #2]
 800390c:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003910:	78d9      	ldrb	r1, [r3, #3]
 8003912:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8003916:	7919      	ldrb	r1, [r3, #4]
 8003918:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800391c:	7959      	ldrb	r1, [r3, #5]
 800391e:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003922:	7999      	ldrb	r1, [r3, #6]
 8003924:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8003928:	79d9      	ldrb	r1, [r3, #7]
 800392a:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800392e:	7a19      	ldrb	r1, [r3, #8]
 8003930:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003934:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8003938:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800393a:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 800393e:	428d      	cmp	r5, r1
 8003940:	d802      	bhi.n	8003948 <USBH_Get_CfgDesc+0xce>
 8003942:	3601      	adds	r6, #1
 8003944:	371a      	adds	r7, #26
 8003946:	e7cc      	b.n	80038e2 <USBH_Get_CfgDesc+0x68>
 8003948:	4596      	cmp	lr, r2
 800394a:	d9fa      	bls.n	8003942 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800394c:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800394e:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003950:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003952:	785d      	ldrb	r5, [r3, #1]
 8003954:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003956:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003958:	d1ef      	bne.n	800393a <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800395a:	1c4d      	adds	r5, r1, #1
 800395c:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003960:	4421      	add	r1, r4
 8003962:	f893 9000 	ldrb.w	r9, [r3]
 8003966:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800396a:	f893 9001 	ldrb.w	r9, [r3, #1]
 800396e:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003972:	f893 9002 	ldrb.w	r9, [r3, #2]
 8003976:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800397a:	f893 9003 	ldrb.w	r9, [r3, #3]
 800397e:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003982:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003986:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800398a:	f893 9006 	ldrb.w	r9, [r3, #6]
 800398e:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003992:	b2e9      	uxtb	r1, r5
 8003994:	e7d1      	b.n	800393a <USBH_Get_CfgDesc+0xc0>

08003996 <USBH_Get_StringDesc>:
{
 8003996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003998:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 800399c:	4614      	mov	r4, r2
 800399e:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80039a6:	462b      	mov	r3, r5
 80039a8:	2100      	movs	r1, #0
{
 80039aa:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 80039ac:	f7ff ff01 	bl	80037b2 <USBH_GetDescriptor>
 80039b0:	b978      	cbnz	r0, 80039d2 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80039b2:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d10b      	bne.n	80039d2 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80039ba:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80039be:	3b02      	subs	r3, #2
 80039c0:	42bb      	cmp	r3, r7
 80039c2:	bf28      	it	cs
 80039c4:	463b      	movcs	r3, r7
 80039c6:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80039c8:	4602      	mov	r2, r0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d803      	bhi.n	80039d6 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 80039ce:	2300      	movs	r3, #0
 80039d0:	7023      	strb	r3, [r4, #0]
}
 80039d2:	b003      	add	sp, #12
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80039d6:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80039d8:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80039da:	7889      	ldrb	r1, [r1, #2]
 80039dc:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80039e0:	b292      	uxth	r2, r2
 80039e2:	e7f2      	b.n	80039ca <USBH_Get_StringDesc+0x34>

080039e4 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80039e4:	7883      	ldrb	r3, [r0, #2]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d106      	bne.n	80039f8 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80039ea:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80039ec:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80039ee:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80039f0:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80039f2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80039f4:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80039f6:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80039f8:	2200      	movs	r2, #0
 80039fa:	4611      	mov	r1, r2
 80039fc:	f7ff be18 	b.w	8003630 <USBH_CtlReq>

08003a00 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003a00:	7883      	ldrb	r3, [r0, #2]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d106      	bne.n	8003a14 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003a06:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003a08:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003a0a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003a0c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003a0e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003a10:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003a12:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003a14:	2200      	movs	r2, #0
 8003a16:	4611      	mov	r1, r2
 8003a18:	f7ff be0a 	b.w	8003630 <USBH_CtlReq>

08003a1c <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003a1c:	7883      	ldrb	r3, [r0, #2]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d106      	bne.n	8003a30 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003a22:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003a24:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003a26:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003a28:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8003a2a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003a2c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003a2e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	4611      	mov	r1, r2
 8003a34:	f7ff bdfc 	b.w	8003630 <USBH_CtlReq>

08003a38 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003a38:	7883      	ldrb	r3, [r0, #2]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d106      	bne.n	8003a4c <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003a3e:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003a40:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003a42:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003a44:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003a46:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003a48:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003a4a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	4611      	mov	r1, r2
 8003a50:	f7ff bdee 	b.w	8003630 <USBH_CtlReq>

08003a54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003a54:	b530      	push	{r4, r5, lr}
 8003a56:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a58:	2400      	movs	r4, #0
{
 8003a5a:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	9302      	str	r3, [sp, #8]
 8003a60:	9101      	str	r1, [sp, #4]
 8003a62:	9403      	str	r4, [sp, #12]
 8003a64:	9400      	str	r4, [sp, #0]
 8003a66:	4623      	mov	r3, r4
 8003a68:	4622      	mov	r2, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f001 f884 	bl	8004b78 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003a70:	4620      	mov	r0, r4
 8003a72:	b005      	add	sp, #20
 8003a74:	bd30      	pop	{r4, r5, pc}

08003a76 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003a76:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003a78:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003a7c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003a7e:	2d00      	cmp	r5, #0
{
 8003a80:	461c      	mov	r4, r3
 8003a82:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a86:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003a88:	bf18      	it	ne
 8003a8a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003a8c:	9303      	str	r3, [sp, #12]
 8003a8e:	2301      	movs	r3, #1
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9101      	str	r1, [sp, #4]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4621      	mov	r1, r4
 8003a9a:	f001 f86d 	bl	8004b78 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	b005      	add	sp, #20
 8003aa2:	bd30      	pop	{r4, r5, pc}

08003aa4 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003aa4:	b530      	push	{r4, r5, lr}
 8003aa6:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003aa8:	2400      	movs	r4, #0
{
 8003aaa:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003aac:	9202      	str	r2, [sp, #8]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	9101      	str	r1, [sp, #4]
 8003ab2:	9403      	str	r4, [sp, #12]
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f001 f85d 	bl	8004b78 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003abe:	4620      	mov	r0, r4
 8003ac0:	b005      	add	sp, #20
 8003ac2:	bd30      	pop	{r4, r5, pc}

08003ac4 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8003ac4:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003ac6:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003aca:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003acc:	2d00      	cmp	r5, #0
{
 8003ace:	461c      	mov	r4, r3
 8003ad0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ad4:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003ad6:	bf18      	it	ne
 8003ad8:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	2301      	movs	r3, #1
 8003ade:	9101      	str	r1, [sp, #4]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	f001 f846 	bl	8004b78 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003aec:	2000      	movs	r0, #0
 8003aee:	b005      	add	sp, #20
 8003af0:	bd30      	pop	{r4, r5, pc}

08003af2 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003af2:	b530      	push	{r4, r5, lr}
 8003af4:	b085      	sub	sp, #20
 8003af6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003af8:	2400      	movs	r4, #0
 8003afa:	9202      	str	r2, [sp, #8]
 8003afc:	2201      	movs	r2, #1
 8003afe:	9101      	str	r1, [sp, #4]
 8003b00:	9403      	str	r4, [sp, #12]
 8003b02:	9200      	str	r2, [sp, #0]
 8003b04:	2302      	movs	r3, #2
 8003b06:	4629      	mov	r1, r5
 8003b08:	f001 f836 	bl	8004b78 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	b005      	add	sp, #20
 8003b10:	bd30      	pop	{r4, r5, pc}

08003b12 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003b12:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003b14:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003b18:	9402      	str	r4, [sp, #8]
 8003b1a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003b1e:	9401      	str	r4, [sp, #4]
 8003b20:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003b24:	9400      	str	r4, [sp, #0]
 8003b26:	f001 f801 	bl	8004b2c <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	b004      	add	sp, #16
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003b30:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003b32:	f001 f813 	bl	8004b5c <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8003b36:	2000      	movs	r0, #0
 8003b38:	bd08      	pop	{r3, pc}

08003b3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8003b3a:	b530      	push	{r4, r5, lr}
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8003b42:	f854 5b04 	ldr.w	r5, [r4], #4
 8003b46:	042d      	lsls	r5, r5, #16
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	d407      	bmi.n	8003b5c <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8003b4c:	33e0      	adds	r3, #224	; 0xe0
 8003b4e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003b52:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8003b56:	b292      	uxth	r2, r2
}
 8003b58:	b2d0      	uxtb	r0, r2
 8003b5a:	bd30      	pop	{r4, r5, pc}
 8003b5c:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8003b5e:	2b0b      	cmp	r3, #11
 8003b60:	d1ef      	bne.n	8003b42 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8003b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b66:	e7f7      	b.n	8003b58 <USBH_AllocPipe+0x1e>

08003b68 <USBH_FreePipe>:
   if(idx < 11U)
 8003b68:	290a      	cmp	r1, #10
 8003b6a:	bf9f      	itttt	ls
 8003b6c:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8003b70:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8003b74:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003b78:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	4770      	bx	lr

08003b80 <LCD_WriteCommand>:
#include "lcd_ili9341.h"

extern SPI_HandleTypeDef hspi5;

void LCD_WriteCommand(uint8_t command)
{
 8003b80:	b510      	push	{r4, lr}
 8003b82:	b086      	sub	sp, #24
  uint8_t dummy;

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);        //DCX LOW
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);         //CSX LOW
 8003b84:	4c0f      	ldr	r4, [pc, #60]	; (8003bc4 <LCD_WriteCommand+0x44>)
{
 8003b86:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);        //DCX LOW
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b90:	480d      	ldr	r0, [pc, #52]	; (8003bc8 <LCD_WriteCommand+0x48>)
 8003b92:	f7fc fe45 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);         //CSX LOW
 8003b96:	4620      	mov	r0, r4
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	f7fc fe40 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi5, &command, &dummy, 1, 0xFFFF);
 8003ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f10d 0217 	add.w	r2, sp, #23
 8003baa:	2301      	movs	r3, #1
 8003bac:	f10d 010f 	add.w	r1, sp, #15
 8003bb0:	4806      	ldr	r0, [pc, #24]	; (8003bcc <LCD_WriteCommand+0x4c>)
 8003bb2:	f7fe f96e 	bl	8001e92 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);           //CSX HIGH
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2104      	movs	r1, #4
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7fc fe30 	bl	8000820 <HAL_GPIO_WritePin>
}
 8003bc0:	b006      	add	sp, #24
 8003bc2:	bd10      	pop	{r4, pc}
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	40020c00 	.word	0x40020c00
 8003bcc:	20000118 	.word	0x20000118

08003bd0 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	b086      	sub	sp, #24
  uint8_t dummy;

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);          //DCX HIGH
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);         //CSX LOW
 8003bd4:	4c0f      	ldr	r4, [pc, #60]	; (8003c14 <LCD_WriteData+0x44>)
{
 8003bd6:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);          //DCX HIGH
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <LCD_WriteData+0x48>)
 8003be2:	f7fc fe1d 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);         //CSX LOW
 8003be6:	4620      	mov	r0, r4
 8003be8:	2200      	movs	r2, #0
 8003bea:	2104      	movs	r1, #4
 8003bec:	f7fc fe18 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi5, &data, &dummy, 1, 50);
 8003bf0:	2332      	movs	r3, #50	; 0x32
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	f10d 0217 	add.w	r2, sp, #23
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f10d 010f 	add.w	r1, sp, #15
 8003bfe:	4807      	ldr	r0, [pc, #28]	; (8003c1c <LCD_WriteData+0x4c>)
 8003c00:	f7fe f947 	bl	8001e92 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);           //CSX HIGH
 8003c04:	2201      	movs	r2, #1
 8003c06:	2104      	movs	r1, #4
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f7fc fe09 	bl	8000820 <HAL_GPIO_WritePin>
}
 8003c0e:	b006      	add	sp, #24
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	bf00      	nop
 8003c14:	40020800 	.word	0x40020800
 8003c18:	40020c00 	.word	0x40020c00
 8003c1c:	20000118 	.word	0x20000118

08003c20 <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 8003c20:	b508      	push	{r3, lr}
  LCD_WriteCommand(0xCA);
 8003c22:	20ca      	movs	r0, #202	; 0xca
 8003c24:	f7ff ffac 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8003c28:	20c3      	movs	r0, #195	; 0xc3
 8003c2a:	f7ff ffd1 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x08);
 8003c2e:	2008      	movs	r0, #8
 8003c30:	f7ff ffce 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x50);
 8003c34:	2050      	movs	r0, #80	; 0x50
 8003c36:	f7ff ffcb 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8003c3a:	20cf      	movs	r0, #207	; 0xcf
 8003c3c:	f7ff ffa0 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7ff ffc5 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8003c46:	20c1      	movs	r0, #193	; 0xc1
 8003c48:	f7ff ffc2 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x30);
 8003c4c:	2030      	movs	r0, #48	; 0x30
 8003c4e:	f7ff ffbf 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8003c52:	20ed      	movs	r0, #237	; 0xed
 8003c54:	f7ff ff94 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8003c58:	2064      	movs	r0, #100	; 0x64
 8003c5a:	f7ff ffb9 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x03);
 8003c5e:	2003      	movs	r0, #3
 8003c60:	f7ff ffb6 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x12);
 8003c64:	2012      	movs	r0, #18
 8003c66:	f7ff ffb3 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x81);
 8003c6a:	2081      	movs	r0, #129	; 0x81
 8003c6c:	f7ff ffb0 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 8003c70:	20e8      	movs	r0, #232	; 0xe8
 8003c72:	f7ff ff85 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8003c76:	2085      	movs	r0, #133	; 0x85
 8003c78:	f7ff ffaa 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7ff ffa7 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8003c82:	2078      	movs	r0, #120	; 0x78
 8003c84:	f7ff ffa4 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8003c88:	20cb      	movs	r0, #203	; 0xcb
 8003c8a:	f7ff ff79 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8003c8e:	2039      	movs	r0, #57	; 0x39
 8003c90:	f7ff ff9e 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8003c94:	202c      	movs	r0, #44	; 0x2c
 8003c96:	f7ff ff9b 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7ff ff98 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x34);
 8003ca0:	2034      	movs	r0, #52	; 0x34
 8003ca2:	f7ff ff95 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x02);
 8003ca6:	2002      	movs	r0, #2
 8003ca8:	f7ff ff92 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 8003cac:	20f7      	movs	r0, #247	; 0xf7
 8003cae:	f7ff ff67 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8003cb2:	2020      	movs	r0, #32
 8003cb4:	f7ff ff8c 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8003cb8:	20ea      	movs	r0, #234	; 0xea
 8003cba:	f7ff ff61 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7ff ff86 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7ff ff83 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8003cca:	20b1      	movs	r0, #177	; 0xb1
 8003ccc:	f7ff ff58 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7ff ff7d 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8003cd6:	201b      	movs	r0, #27
 8003cd8:	f7ff ff7a 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8003cdc:	20b6      	movs	r0, #182	; 0xb6
 8003cde:	f7ff ff4f 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8003ce2:	200a      	movs	r0, #10
 8003ce4:	f7ff ff74 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8003ce8:	20a2      	movs	r0, #162	; 0xa2
 8003cea:	f7ff ff71 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8003cee:	20c0      	movs	r0, #192	; 0xc0
 8003cf0:	f7ff ff46 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8003cf4:	2010      	movs	r0, #16
 8003cf6:	f7ff ff6b 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8003cfa:	20c1      	movs	r0, #193	; 0xc1
 8003cfc:	f7ff ff40 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8003d00:	2010      	movs	r0, #16
 8003d02:	f7ff ff65 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8003d06:	20c5      	movs	r0, #197	; 0xc5
 8003d08:	f7ff ff3a 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8003d0c:	2045      	movs	r0, #69	; 0x45
 8003d0e:	f7ff ff5f 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x15);
 8003d12:	2015      	movs	r0, #21
 8003d14:	f7ff ff5c 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8003d18:	20c7      	movs	r0, #199	; 0xc7
 8003d1a:	f7ff ff31 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8003d1e:	2090      	movs	r0, #144	; 0x90
 8003d20:	f7ff ff56 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8003d24:	2036      	movs	r0, #54	; 0x36
 8003d26:	f7ff ff2b 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8003d2a:	20c8      	movs	r0, #200	; 0xc8
 8003d2c:	f7ff ff50 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8003d30:	20f2      	movs	r0, #242	; 0xf2
 8003d32:	f7ff ff25 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7ff ff4a 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 8003d3c:	20b0      	movs	r0, #176	; 0xb0
 8003d3e:	f7ff ff1f 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8003d42:	20c2      	movs	r0, #194	; 0xc2
 8003d44:	f7ff ff44 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8003d48:	20b6      	movs	r0, #182	; 0xb6
 8003d4a:	f7ff ff19 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8003d4e:	200a      	movs	r0, #10
 8003d50:	f7ff ff3e 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8003d54:	20a7      	movs	r0, #167	; 0xa7
 8003d56:	f7ff ff3b 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x27);
 8003d5a:	2027      	movs	r0, #39	; 0x27
 8003d5c:	f7ff ff38 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8003d60:	2004      	movs	r0, #4
 8003d62:	f7ff ff35 	bl	8003bd0 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8003d66:	202a      	movs	r0, #42	; 0x2a
 8003d68:	f7ff ff0a 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7ff ff2f 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7ff ff2c 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff ff29 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8003d7e:	20ef      	movs	r0, #239	; 0xef
 8003d80:	f7ff ff26 	bl	8003bd0 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8003d84:	202b      	movs	r0, #43	; 0x2b
 8003d86:	f7ff fefb 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7ff ff20 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7ff ff1d 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x01);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f7ff ff1a 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8003d9c:	203f      	movs	r0, #63	; 0x3f
 8003d9e:	f7ff ff17 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8003da2:	20f6      	movs	r0, #246	; 0xf6
 8003da4:	f7ff feec 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7ff ff11 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7ff ff0e 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x06);
 8003db4:	2006      	movs	r0, #6
 8003db6:	f7ff ff0b 	bl	8003bd0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8003dba:	202c      	movs	r0, #44	; 0x2c
 8003dbc:	f7ff fee0 	bl	8003b80 <LCD_WriteCommand>
  HAL_Delay(200);
 8003dc0:	20c8      	movs	r0, #200	; 0xc8
 8003dc2:	f7fc fbc7 	bl	8000554 <HAL_Delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8003dc6:	2026      	movs	r0, #38	; 0x26
 8003dc8:	f7ff feda 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f7ff feff 	bl	8003bd0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8003dd2:	20e0      	movs	r0, #224	; 0xe0
 8003dd4:	f7ff fed4 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8003dd8:	200f      	movs	r0, #15
 8003dda:	f7ff fef9 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x29);
 8003dde:	2029      	movs	r0, #41	; 0x29
 8003de0:	f7ff fef6 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x24);
 8003de4:	2024      	movs	r0, #36	; 0x24
 8003de6:	f7ff fef3 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8003dea:	200c      	movs	r0, #12
 8003dec:	f7ff fef0 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8003df0:	200e      	movs	r0, #14
 8003df2:	f7ff feed 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x09);
 8003df6:	2009      	movs	r0, #9
 8003df8:	f7ff feea 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8003dfc:	204e      	movs	r0, #78	; 0x4e
 8003dfe:	f7ff fee7 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8003e02:	2078      	movs	r0, #120	; 0x78
 8003e04:	f7ff fee4 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8003e08:	203c      	movs	r0, #60	; 0x3c
 8003e0a:	f7ff fee1 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x09);
 8003e0e:	2009      	movs	r0, #9
 8003e10:	f7ff fede 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x13);
 8003e14:	2013      	movs	r0, #19
 8003e16:	f7ff fedb 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x05);
 8003e1a:	2005      	movs	r0, #5
 8003e1c:	f7ff fed8 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x17);
 8003e20:	2017      	movs	r0, #23
 8003e22:	f7ff fed5 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x11);
 8003e26:	2011      	movs	r0, #17
 8003e28:	f7ff fed2 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f7ff fecf 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8003e32:	20e1      	movs	r0, #225	; 0xe1
 8003e34:	f7ff fea4 	bl	8003b80 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7ff fec9 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x16);
 8003e3e:	2016      	movs	r0, #22
 8003e40:	f7ff fec6 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8003e44:	201b      	movs	r0, #27
 8003e46:	f7ff fec3 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8003e4a:	2004      	movs	r0, #4
 8003e4c:	f7ff fec0 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x11);
 8003e50:	2011      	movs	r0, #17
 8003e52:	f7ff febd 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x07);
 8003e56:	2007      	movs	r0, #7
 8003e58:	f7ff feba 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x31);
 8003e5c:	2031      	movs	r0, #49	; 0x31
 8003e5e:	f7ff feb7 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x33);
 8003e62:	2033      	movs	r0, #51	; 0x33
 8003e64:	f7ff feb4 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x42);
 8003e68:	2042      	movs	r0, #66	; 0x42
 8003e6a:	f7ff feb1 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x05);
 8003e6e:	2005      	movs	r0, #5
 8003e70:	f7ff feae 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8003e74:	200c      	movs	r0, #12
 8003e76:	f7ff feab 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8003e7a:	200a      	movs	r0, #10
 8003e7c:	f7ff fea8 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x28);
 8003e80:	2028      	movs	r0, #40	; 0x28
 8003e82:	f7ff fea5 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8003e86:	202f      	movs	r0, #47	; 0x2f
 8003e88:	f7ff fea2 	bl	8003bd0 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8003e8c:	200f      	movs	r0, #15
 8003e8e:	f7ff fe9f 	bl	8003bd0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8003e92:	2011      	movs	r0, #17
 8003e94:	f7ff fe74 	bl	8003b80 <LCD_WriteCommand>
  HAL_Delay(200);
 8003e98:	20c8      	movs	r0, #200	; 0xc8
 8003e9a:	f7fc fb5b 	bl	8000554 <HAL_Delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8003e9e:	2029      	movs	r0, #41	; 0x29
 8003ea0:	f7ff fe6e 	bl	8003b80 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8003ea4:	202c      	movs	r0, #44	; 0x2c
}
 8003ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_WriteCommand(LCD_GRAM);
 8003eaa:	f7ff be69 	b.w	8003b80 <LCD_WriteCommand>
	...

08003eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003eb0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eb2:	2430      	movs	r4, #48	; 0x30
{
 8003eb4:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	2100      	movs	r1, #0
 8003eba:	a808      	add	r0, sp, #32
 8003ebc:	f000 ff06 	bl	8004ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ec0:	2214      	movs	r2, #20
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	a803      	add	r0, sp, #12
 8003ec6:	f000 ff01 	bl	8004ccc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eca:	4622      	mov	r2, r4
 8003ecc:	2100      	movs	r1, #0
 8003ece:	a814      	add	r0, sp, #80	; 0x50
 8003ed0:	f000 fefc 	bl	8004ccc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <SystemClock_Config+0xb0>)
 8003ed8:	9501      	str	r5, [sp, #4]
 8003eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003edc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003eee:	9502      	str	r5, [sp, #8]
 8003ef0:	6813      	ldr	r3, [r2, #0]
 8003ef2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	6813      	ldr	r3, [r2, #0]
 8003efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f02:	9302      	str	r3, [sp, #8]
 8003f04:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f0e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f10:	2304      	movs	r3, #4
 8003f12:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003f14:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f16:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f18:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003f1c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f1e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f20:	2303      	movs	r3, #3
 8003f22:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f24:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f26:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f28:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f2a:	f7fd fb4b 	bl	80015c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f2e:	230f      	movs	r3, #15
 8003f30:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f32:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f38:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f3a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f3c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f3e:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f40:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f42:	f7fd fcef 	bl	8001924 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f46:	2308      	movs	r3, #8
 8003f48:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8003f4a:	233c      	movs	r3, #60	; 0x3c
 8003f4c:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f4e:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003f50:	2305      	movs	r3, #5
 8003f52:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003f54:	961d      	str	r6, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f56:	f7fd fdbd 	bl	8001ad4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003f5a:	b020      	add	sp, #128	; 0x80
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40007000 	.word	0x40007000

08003f68 <main>:
{
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int color[] = {
 8003f6c:	4dae      	ldr	r5, [pc, #696]	; (8004228 <main+0x2c0>)
 8003f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8003f70:	b0a3      	sub	sp, #140	; 0x8c
	int color[] = {
 8003f72:	ac0b      	add	r4, sp, #44	; 0x2c
 8003f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f7e:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_Init();
 8003f82:	f7fc fabb 	bl	80004fc <HAL_Init>
  SystemClock_Config();
 8003f86:	f7ff ff93 	bl	8003eb0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8a:	2214      	movs	r2, #20
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	a815      	add	r0, sp, #84	; 0x54

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f90:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f92:	f000 fe9b 	bl	8004ccc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f96:	4ba5      	ldr	r3, [pc, #660]	; (800422c <main+0x2c4>)
 8003f98:	9401      	str	r4, [sp, #4]
 8003f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003f9c:	48a4      	ldr	r0, [pc, #656]	; (8004230 <main+0x2c8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f9e:	4da5      	ldr	r5, [pc, #660]	; (8004234 <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa0:	f042 0204 	orr.w	r2, r2, #4
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa8:	f002 0204 	and.w	r2, r2, #4
 8003fac:	9201      	str	r2, [sp, #4]
 8003fae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fb0:	9402      	str	r4, [sp, #8]
 8003fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb4:	f042 0220 	orr.w	r2, r2, #32
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	f002 0220 	and.w	r2, r2, #32
 8003fc0:	9202      	str	r2, [sp, #8]
 8003fc2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fc4:	9403      	str	r4, [sp, #12]
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003fd4:	9203      	str	r2, [sp, #12]
 8003fd6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd8:	9404      	str	r4, [sp, #16]
 8003fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	f002 0201 	and.w	r2, r2, #1
 8003fe8:	9204      	str	r2, [sp, #16]
 8003fea:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fec:	9405      	str	r4, [sp, #20]
 8003fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff0:	f042 0202 	orr.w	r2, r2, #2
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff8:	f002 0202 	and.w	r2, r2, #2
 8003ffc:	9205      	str	r2, [sp, #20]
 8003ffe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004000:	9406      	str	r4, [sp, #24]
 8004002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
 800400a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004010:	9206      	str	r2, [sp, #24]
 8004012:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004014:	9407      	str	r4, [sp, #28]
 8004016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004018:	f042 0210 	orr.w	r2, r2, #16
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
 800401e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004020:	f002 0210 	and.w	r2, r2, #16
 8004024:	9207      	str	r2, [sp, #28]
 8004026:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004028:	9408      	str	r4, [sp, #32]
 800402a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402c:	f042 0208 	orr.w	r2, r2, #8
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800403a:	4622      	mov	r2, r4
 800403c:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800403e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8004040:	f7fc fbee 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8004044:	4622      	mov	r2, r4
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	487b      	ldr	r0, [pc, #492]	; (8004238 <main+0x2d0>)
 800404a:	f7fc fbe9 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800404e:	4622      	mov	r2, r4
 8004050:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004054:	4879      	ldr	r0, [pc, #484]	; (800423c <main+0x2d4>)
 8004056:	f7fc fbe3 	bl	8000820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800405a:	4622      	mov	r2, r4
 800405c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004060:	4877      	ldr	r0, [pc, #476]	; (8004240 <main+0x2d8>)
 8004062:	f7fc fbdd 	bl	8000820 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004066:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8004068:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406a:	a915      	add	r1, sp, #84	; 0x54
 800406c:	4870      	ldr	r0, [pc, #448]	; (8004230 <main+0x2c8>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800406e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004070:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004076:	f7fc fae7 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800407a:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	a915      	add	r1, sp, #84	; 0x54
 8004080:	486d      	ldr	r0, [pc, #436]	; (8004238 <main+0x2d0>)
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8004082:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004084:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004088:	f7fc fade 	bl	8000648 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800408c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800408e:	a915      	add	r1, sp, #84	; 0x54
 8004090:	4869      	ldr	r0, [pc, #420]	; (8004238 <main+0x2d0>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004092:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004094:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004098:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800409a:	f7fc fad5 	bl	8000648 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800409e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80040a0:	a915      	add	r1, sp, #84	; 0x54
 80040a2:	4863      	ldr	r0, [pc, #396]	; (8004230 <main+0x2c8>)
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80040a4:	9315      	str	r3, [sp, #84]	; 0x54

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80040a6:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80040a8:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80040ac:	f7fc facc 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80040b0:	a915      	add	r1, sp, #84	; 0x54
 80040b2:	4864      	ldr	r0, [pc, #400]	; (8004244 <main+0x2dc>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80040b4:	9715      	str	r7, [sp, #84]	; 0x54

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80040b6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040ba:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80040be:	f7fc fac3 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80040c2:	a915      	add	r1, sp, #84	; 0x54
 80040c4:	485d      	ldr	r0, [pc, #372]	; (800423c <main+0x2d4>)
  GPIO_InitStruct.Pin = TE_Pin;
 80040c6:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040c8:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80040cc:	f7fc fabc 	bl	8000648 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80040d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040d4:	a915      	add	r1, sp, #84	; 0x54
 80040d6:	4859      	ldr	r0, [pc, #356]	; (800423c <main+0x2d4>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80040d8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040da:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040de:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e0:	f7fc fab2 	bl	8000648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80040e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040e8:	a915      	add	r1, sp, #84	; 0x54
 80040ea:	4855      	ldr	r0, [pc, #340]	; (8004240 <main+0x2d8>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80040ec:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ee:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040f4:	f7fc faa8 	bl	8000648 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80040f8:	4853      	ldr	r0, [pc, #332]	; (8004248 <main+0x2e0>)
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <main+0x2e4>)
 80040fc:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80040fe:	f7fc fa91 	bl	8000624 <HAL_CRC_Init>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8004102:	221c      	movs	r2, #28
 8004104:	4621      	mov	r1, r4
 8004106:	a815      	add	r0, sp, #84	; 0x54
 8004108:	f000 fde0 	bl	8004ccc <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800410c:	4850      	ldr	r0, [pc, #320]	; (8004250 <main+0x2e8>)
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <main+0x2ec>)
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8004110:	6205      	str	r5, [r0, #32]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8004112:	e880 0048 	stmia.w	r0, {r3, r6}
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800411a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.LoadToActiveDelay = 2;
 800411e:	f04f 0802 	mov.w	r8, #2
  SdramTiming.ExitSelfRefreshDelay = 7;
 8004122:	f04f 0907 	mov.w	r9, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004126:	a915      	add	r1, sp, #84	; 0x54
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004128:	f04f 0a10 	mov.w	sl, #16
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800412c:	6183      	str	r3, [r0, #24]
  SdramTiming.WriteRecoveryTime = 3;
 800412e:	f04f 0b03 	mov.w	fp, #3
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8004132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hi2c3.Instance = I2C3;
 8004136:	4d48      	ldr	r5, [pc, #288]	; (8004258 <main+0x2f0>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8004138:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800413a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  SdramTiming.RPDelay = 2;
 800413e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  SdramTiming.RCDDelay = 2;
 8004142:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004146:	6084      	str	r4, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004148:	60c7      	str	r7, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800414a:	f8c0 a010 	str.w	sl, [r0, #16]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800414e:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004150:	6244      	str	r4, [r0, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 8004152:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  SdramTiming.SelfRefreshTime = 4;
 8004156:	9717      	str	r7, [sp, #92]	; 0x5c
  SdramTiming.RowCycleDelay = 7;
 8004158:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  SdramTiming.WriteRecoveryTime = 3;
 800415c:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004160:	f7fd fdd0 	bl	8001d04 <HAL_SDRAM_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8004164:	4a3d      	ldr	r2, [pc, #244]	; (800425c <main+0x2f4>)
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <main+0x2f8>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004168:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.ClockSpeed = 100000;
 800416a:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800416e:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004170:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004174:	612b      	str	r3, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8004176:	60ec      	str	r4, [r5, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004178:	616c      	str	r4, [r5, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800417a:	61ac      	str	r4, [r5, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800417c:	61ec      	str	r4, [r5, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800417e:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004180:	f7fc ffa2 	bl	80010c8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f7fd f842 	bl	8001210 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f7fd f85d 	bl	800124e <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004194:	2234      	movs	r2, #52	; 0x34
 8004196:	4621      	mov	r1, r4
 8004198:	a815      	add	r0, sp, #84	; 0x54
 800419a:	f000 fd97 	bl	8004ccc <memset>
  hltdc.Instance = LTDC;
 800419e:	4d31      	ldr	r5, [pc, #196]	; (8004264 <main+0x2fc>)
 80041a0:	4b31      	ldr	r3, [pc, #196]	; (8004268 <main+0x300>)
  hltdc.Init.VerticalSync = 1;
 80041a2:	61ae      	str	r6, [r5, #24]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80041a4:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 9;
 80041a8:	2309      	movs	r3, #9
 80041aa:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 80041ac:	231d      	movs	r3, #29
 80041ae:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 269;
 80041b0:	f240 130d 	movw	r3, #269	; 0x10d
 80041b4:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80041b6:	f240 1343 	movw	r3, #323	; 0x143
 80041ba:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80041bc:	f240 1317 	movw	r3, #279	; 0x117
 80041c0:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041c2:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 327;
 80041c4:	f240 1347 	movw	r3, #327	; 0x147
 80041c8:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80041ca:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80041cc:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80041ce:	612c      	str	r4, [r5, #16]
  hltdc.Init.AccumulatedVBP = 3;
 80041d0:	f8c5 b020 	str.w	fp, [r5, #32]
  hltdc.Init.Backcolor.Blue = 0;
 80041d4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80041d8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80041dc:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80041e0:	f7fd f8da 	bl	8001398 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80041e4:	21ff      	movs	r1, #255	; 0xff
 80041e6:	911a      	str	r1, [sp, #104]	; 0x68
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80041e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowX1 = 240;
 80041ec:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80041ee:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.FBStartAdress = 0xD0000000;
 80041f0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
  pLayerCfg.WindowY1 = 320;
 80041f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
  pLayerCfg.WindowX1 = 240;
 80041f8:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.FBStartAdress = 0xD0000000;
 80041fa:	911e      	str	r1, [sp, #120]	; 0x78
  pLayerCfg.ImageWidth = 240;
 80041fc:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80041fe:	a915      	add	r1, sp, #84	; 0x54
 8004200:	4622      	mov	r2, r4
 8004202:	4628      	mov	r0, r5
  pLayerCfg.WindowY1 = 320;
 8004204:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8004206:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  pLayerCfg.ImageHeight = 320;
 800420a:	9320      	str	r3, [sp, #128]	; 0x80
  pLayerCfg.WindowX0 = 0;
 800420c:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.WindowY0 = 0;
 800420e:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.Alpha0 = 0;
 8004210:	941b      	str	r4, [sp, #108]	; 0x6c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004212:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
  pLayerCfg.Backcolor.Blue = 0;
 8004216:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Green = 0;
 800421a:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
  pLayerCfg.Backcolor.Red = 0;
 800421e:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004222:	f7fd f985 	bl	8001530 <HAL_LTDC_ConfigLayer>
 8004226:	e021      	b.n	800426c <main+0x304>
 8004228:	08004e70 	.word	0x08004e70
 800422c:	40023800 	.word	0x40023800
 8004230:	40020800 	.word	0x40020800
 8004234:	10120000 	.word	0x10120000
 8004238:	40020000 	.word	0x40020000
 800423c:	40020c00 	.word	0x40020c00
 8004240:	40021800 	.word	0x40021800
 8004244:	40020400 	.word	0x40020400
 8004248:	20000170 	.word	0x20000170
 800424c:	40023000 	.word	0x40023000
 8004250:	20025aa0 	.word	0x20025aa0
 8004254:	a0000140 	.word	0xa0000140
 8004258:	200000c4 	.word	0x200000c4
 800425c:	40005c00 	.word	0x40005c00
 8004260:	000186a0 	.word	0x000186a0
 8004264:	20000178 	.word	0x20000178
 8004268:	40016800 	.word	0x40016800
  hspi5.Instance = SPI5;
 800426c:	4837      	ldr	r0, [pc, #220]	; (800434c <main+0x3e4>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800426e:	4938      	ldr	r1, [pc, #224]	; (8004350 <main+0x3e8>)
  htim1.Instance = TIM1;
 8004270:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004368 <main+0x400>
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004274:	6084      	str	r4, [r0, #8]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004276:	f44f 7382 	mov.w	r3, #260	; 0x104
 800427a:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800427e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004282:	6183      	str	r3, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004284:	2318      	movs	r3, #24
 8004286:	61c3      	str	r3, [r0, #28]
  hspi5.Init.CRCPolynomial = 10;
 8004288:	230a      	movs	r3, #10
 800428a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800428c:	60c4      	str	r4, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800428e:	6104      	str	r4, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004290:	6144      	str	r4, [r0, #20]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004292:	6204      	str	r4, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004294:	6244      	str	r4, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004296:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004298:	f7fd fdbe 	bl	8001e18 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800429c:	4652      	mov	r2, sl
 800429e:	4621      	mov	r1, r4
 80042a0:	a815      	add	r0, sp, #84	; 0x54
 80042a2:	f000 fd13 	bl	8004ccc <memset>
  htim1.Instance = TIM1;
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <main+0x3ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a8:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042aa:	4640      	mov	r0, r8
  htim1.Init.Prescaler = 0;
 80042ac:	e888 0018 	stmia.w	r8, {r3, r4}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b0:	940a      	str	r4, [sp, #40]	; 0x28
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b2:	f8c8 4008 	str.w	r4, [r8, #8]
  htim1.Init.Period = 0;
 80042b6:	f8c8 400c 	str.w	r4, [r8, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ba:	f8c8 4010 	str.w	r4, [r8, #16]
  htim1.Init.RepetitionCounter = 0;
 80042be:	f8c8 4014 	str.w	r4, [r8, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c2:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042c6:	f7fd fff1 	bl	80022ac <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042ce:	a915      	add	r1, sp, #84	; 0x54
 80042d0:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042d4:	f7fe f80e 	bl	80022f4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042d8:	a909      	add	r1, sp, #36	; 0x24
 80042da:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042dc:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042de:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042e0:	f7fe f89c 	bl	800241c <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Instance = USART1;
 80042e4:	481c      	ldr	r0, [pc, #112]	; (8004358 <main+0x3f0>)
  huart1.Init.BaudRate = 115200;
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <main+0x3f4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042e8:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80042ea:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80042ee:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042f2:	230c      	movs	r3, #12
 80042f4:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042f6:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042f8:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fa:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042fc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042fe:	f7fe f9c7 	bl	8002690 <HAL_UART_Init>
  MX_USB_HOST_Init();
 8004302:	f000 fb29 	bl	8004958 <MX_USB_HOST_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8004306:	4632      	mov	r2, r6
 8004308:	4639      	mov	r1, r7
 800430a:	4815      	ldr	r0, [pc, #84]	; (8004360 <main+0x3f8>)
				frame_buffer[j] = color[i];
 800430c:	4e15      	ldr	r6, [pc, #84]	; (8004364 <main+0x3fc>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800430e:	f7fc fa87 	bl	8000820 <HAL_GPIO_WritePin>
  LCD_PowerOn();
 8004312:	f7ff fc85 	bl	8003c20 <LCD_PowerOn>
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)frame_buffer, 0);
 8004316:	4628      	mov	r0, r5
 8004318:	4622      	mov	r2, r4
 800431a:	4912      	ldr	r1, [pc, #72]	; (8004364 <main+0x3fc>)
 800431c:	f7fd f931 	bl	8001582 <HAL_LTDC_SetAddress>
 8004320:	ad0b      	add	r5, sp, #44	; 0x2c
	  MX_USB_HOST_Process();
 8004322:	f000 fb39 	bl	8004998 <MX_USB_HOST_Process>
		for(int i=0; i<10; i++) {
 8004326:	2400      	movs	r4, #0
				frame_buffer[j] = color[i];
 8004328:	f835 2024 	ldrh.w	r2, [r5, r4, lsl #2]
 800432c:	2300      	movs	r3, #0
 800432e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
			for(int j=0; j<LCD_FRAMEBUFFER_SIZE; j++) {
 8004332:	3301      	adds	r3, #1
 8004334:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8004338:	d1f9      	bne.n	800432e <main+0x3c6>
			HAL_Delay(1000);
 800433a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		for(int i=0; i<10; i++) {
 800433e:	3401      	adds	r4, #1
			HAL_Delay(1000);
 8004340:	f7fc f908 	bl	8000554 <HAL_Delay>
		for(int i=0; i<10; i++) {
 8004344:	2c0a      	cmp	r4, #10
 8004346:	d1ef      	bne.n	8004328 <main+0x3c0>
 8004348:	e7eb      	b.n	8004322 <main+0x3ba>
 800434a:	bf00      	nop
 800434c:	20000118 	.word	0x20000118
 8004350:	40015000 	.word	0x40015000
 8004354:	40010000 	.word	0x40010000
 8004358:	20000220 	.word	0x20000220
 800435c:	40011000 	.word	0x40011000
 8004360:	40020800 	.word	0x40020800
 8004364:	200002a0 	.word	0x200002a0
 8004368:	20000260 	.word	0x20000260

0800436c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800436c:	6802      	ldr	r2, [r0, #0]
 800436e:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004370:	429a      	cmp	r2, r3
 8004372:	d101      	bne.n	8004378 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004374:	f7fc b8dc 	b.w	8000530 <HAL_IncTick>
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40001000 	.word	0x40001000

08004380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004380:	4770      	bx	lr
	...

08004384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004384:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <HAL_MspInit+0x34>)
 8004388:	2100      	movs	r1, #0
 800438a:	9100      	str	r1, [sp, #0]
 800438c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
 8004394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004396:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800439a:	9200      	str	r2, [sp, #0]
 800439c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	9101      	str	r1, [sp, #4]
 80043a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043b2:	b002      	add	sp, #8
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800

080043bc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80043bc:	6802      	ldr	r2, [r0, #0]
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_CRC_MspInit+0x28>)
 80043c0:	429a      	cmp	r2, r3
{
 80043c2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80043c4:	d10b      	bne.n	80043de <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <HAL_CRC_MspInit+0x2c>)
 80043cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80043de:	b002      	add	sp, #8
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40023000 	.word	0x40023000
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f0:	4604      	mov	r4, r0
 80043f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f4:	2214      	movs	r2, #20
 80043f6:	2100      	movs	r1, #0
 80043f8:	a803      	add	r0, sp, #12
 80043fa:	f000 fc67 	bl	8004ccc <memset>
  if(hi2c->Instance==I2C3)
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_I2C_MspInit+0x98>)
 8004402:	429a      	cmp	r2, r3
 8004404:	d13a      	bne.n	800447c <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	4c20      	ldr	r4, [pc, #128]	; (8004488 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004408:	4820      	ldr	r0, [pc, #128]	; (800448c <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800440a:	2500      	movs	r5, #0
 800440c:	9500      	str	r5, [sp, #0]
 800440e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6323      	str	r3, [r4, #48]	; 0x30
 8004416:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004420:	9501      	str	r5, [sp, #4]
 8004422:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6323      	str	r3, [r4, #48]	; 0x30
 800442a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004434:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004438:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800443c:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800443e:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004440:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004442:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004444:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004448:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800444a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800444c:	f7fc f8fc 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004450:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004454:	a903      	add	r1, sp, #12
 8004456:	480e      	ldr	r0, [pc, #56]	; (8004490 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004458:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800445a:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004460:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004462:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004464:	f7fc f8f0 	bl	8000648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004468:	9502      	str	r5, [sp, #8]
 800446a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004470:	6423      	str	r3, [r4, #64]	; 0x40
 8004472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004478:	9302      	str	r3, [sp, #8]
 800447a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800447c:	b008      	add	sp, #32
 800447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004482:	bf00      	nop
 8004484:	40005c00 	.word	0x40005c00
 8004488:	40023800 	.word	0x40023800
 800448c:	40020800 	.word	0x40020800
 8004490:	40020000 	.word	0x40020000

08004494 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	4604      	mov	r4, r0
 8004498:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449a:	2214      	movs	r2, #20
 800449c:	2100      	movs	r1, #0
 800449e:	a807      	add	r0, sp, #28
 80044a0:	f000 fc14 	bl	8004ccc <memset>
  if(hltdc->Instance==LTDC)
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	4b57      	ldr	r3, [pc, #348]	; (8004604 <HAL_LTDC_MspInit+0x170>)
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f040 80a8 	bne.w	80045fe <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80044ae:	2400      	movs	r4, #0
 80044b0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80044b4:	9400      	str	r4, [sp, #0]
 80044b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80044b8:	4853      	ldr	r0, [pc, #332]	; (8004608 <HAL_LTDC_MspInit+0x174>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80044ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
 80044c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80044c6:	9200      	str	r2, [sp, #0]
 80044c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044ca:	9401      	str	r4, [sp, #4]
 80044cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
 80044d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d6:	f002 0220 	and.w	r2, r2, #32
 80044da:	9201      	str	r2, [sp, #4]
 80044dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	9402      	str	r4, [sp, #8]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
 80044e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ea:	f002 0201 	and.w	r2, r2, #1
 80044ee:	9202      	str	r2, [sp, #8]
 80044f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f2:	9403      	str	r4, [sp, #12]
 80044f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f6:	f042 0202 	orr.w	r2, r2, #2
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	f002 0202 	and.w	r2, r2, #2
 8004502:	9203      	str	r2, [sp, #12]
 8004504:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004506:	9404      	str	r4, [sp, #16]
 8004508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
 8004510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004512:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004516:	9204      	str	r2, [sp, #16]
 8004518:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451a:	9405      	str	r4, [sp, #20]
 800451c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451e:	f042 0204 	orr.w	r2, r2, #4
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
 8004524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004526:	f002 0204 	and.w	r2, r2, #4
 800452a:	9205      	str	r2, [sp, #20]
 800452c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800452e:	9406      	str	r4, [sp, #24]
 8004530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004542:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004544:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004546:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004548:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800454c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800454e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004550:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004552:	f7fc f879 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8004556:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455a:	a907      	add	r1, sp, #28
 800455c:	482b      	ldr	r0, [pc, #172]	; (800460c <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800455e:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004560:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004568:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456a:	f7fc f86d 	bl	8000648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800456e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004570:	a907      	add	r1, sp, #28
 8004572:	4827      	ldr	r0, [pc, #156]	; (8004610 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004574:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800457c:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457e:	f7fc f863 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004582:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004586:	a907      	add	r1, sp, #28
 8004588:	4821      	ldr	r0, [pc, #132]	; (8004610 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800458a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004590:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004592:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004594:	f7fc f858 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004598:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800459c:	a907      	add	r1, sp, #28
 800459e:	481d      	ldr	r0, [pc, #116]	; (8004614 <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80045a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80045a8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045aa:	f7fc f84d 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80045ae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b2:	a907      	add	r1, sp, #28
 80045b4:	4818      	ldr	r0, [pc, #96]	; (8004618 <HAL_LTDC_MspInit+0x184>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80045b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045bc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80045be:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045c0:	f7fc f842 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80045c4:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045c6:	a907      	add	r1, sp, #28
 80045c8:	4814      	ldr	r0, [pc, #80]	; (800461c <HAL_LTDC_MspInit+0x188>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80045ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045cc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80045d2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045d4:	f7fc f838 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80045d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045dc:	a907      	add	r1, sp, #28
 80045de:	480d      	ldr	r0, [pc, #52]	; (8004614 <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80045e0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80045e8:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045ea:	f7fc f82d 	bl	8000648 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80045ee:	2058      	movs	r0, #88	; 0x58
 80045f0:	4622      	mov	r2, r4
 80045f2:	2105      	movs	r1, #5
 80045f4:	f7fb ffd4 	bl	80005a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80045f8:	2058      	movs	r0, #88	; 0x58
 80045fa:	f7fc f805 	bl	8000608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80045fe:	b00d      	add	sp, #52	; 0x34
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004602:	bf00      	nop
 8004604:	40016800 	.word	0x40016800
 8004608:	40021400 	.word	0x40021400
 800460c:	40020000 	.word	0x40020000
 8004610:	40020400 	.word	0x40020400
 8004614:	40021800 	.word	0x40021800
 8004618:	40020800 	.word	0x40020800
 800461c:	40020c00 	.word	0x40020c00

08004620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004620:	b510      	push	{r4, lr}
 8004622:	4604      	mov	r4, r0
 8004624:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004626:	2214      	movs	r2, #20
 8004628:	2100      	movs	r1, #0
 800462a:	a803      	add	r0, sp, #12
 800462c:	f000 fb4e 	bl	8004ccc <memset>
  if(hspi->Instance==SPI5)
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_SPI_MspInit+0x60>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d121      	bne.n	800467c <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004638:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800463c:	2100      	movs	r1, #0
 800463e:	9101      	str	r1, [sp, #4]
 8004640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004642:	4810      	ldr	r0, [pc, #64]	; (8004684 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004644:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
 800464a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004650:	9201      	str	r2, [sp, #4]
 8004652:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004654:	9102      	str	r1, [sp, #8]
 8004656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004658:	f042 0220 	orr.w	r2, r2, #32
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004668:	f44f 7360 	mov.w	r3, #896	; 0x380
 800466c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004672:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004674:	2305      	movs	r3, #5
 8004676:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004678:	f7fb ffe6 	bl	8000648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800467c:	b008      	add	sp, #32
 800467e:	bd10      	pop	{r4, pc}
 8004680:	40015000 	.word	0x40015000
 8004684:	40021400 	.word	0x40021400

08004688 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8004688:	6802      	ldr	r2, [r0, #0]
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_TIM_Base_MspInit+0x28>)
 800468c:	429a      	cmp	r2, r3
{
 800468e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8004690:	d10b      	bne.n	80046aa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <HAL_TIM_Base_MspInit+0x2c>)
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80046aa:	b002      	add	sp, #8
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40023800 	.word	0x40023800

080046b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
 80046bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046be:	2214      	movs	r2, #20
 80046c0:	2100      	movs	r1, #0
 80046c2:	a803      	add	r0, sp, #12
 80046c4:	f000 fb02 	bl	8004ccc <memset>
  if(huart->Instance==USART1)
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_UART_MspInit+0x68>)
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d125      	bne.n	800471c <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046d0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80046d4:	2100      	movs	r1, #0
 80046d6:	9101      	str	r1, [sp, #4]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046da:	4812      	ldr	r0, [pc, #72]	; (8004724 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80046dc:	f042 0210 	orr.w	r2, r2, #16
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
 80046e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e4:	f002 0210 	and.w	r2, r2, #16
 80046e8:	9201      	str	r2, [sp, #4]
 80046ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ec:	9102      	str	r1, [sp, #8]
 80046ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	9302      	str	r3, [sp, #8]
 80046fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004700:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004704:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800470a:	2301      	movs	r3, #1
 800470c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470e:	2303      	movs	r3, #3
 8004710:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004712:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004714:	2307      	movs	r3, #7
 8004716:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004718:	f7fb ff96 	bl	8000648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800471c:	b008      	add	sp, #32
 800471e:	bd10      	pop	{r4, pc}
 8004720:	40011000 	.word	0x40011000
 8004724:	40020000 	.word	0x40020000

08004728 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800472e:	2214      	movs	r2, #20
 8004730:	2100      	movs	r1, #0
 8004732:	a801      	add	r0, sp, #4
 8004734:	f000 faca 	bl	8004ccc <memset>
  if (FMC_Initialized) {
 8004738:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <HAL_SDRAM_MspInit+0xc0>)
 800473a:	681c      	ldr	r4, [r3, #0]
 800473c:	2c00      	cmp	r4, #0
 800473e:	d150      	bne.n	80047e2 <HAL_SDRAM_MspInit+0xba>
  FMC_Initialized = 1;
 8004740:	f04f 0801 	mov.w	r8, #1
 8004744:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_SDRAM_MspInit+0xc4>)
 800474a:	9400      	str	r4, [sp, #0]
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800474e:	4828      	ldr	r0, [pc, #160]	; (80047f0 <HAL_SDRAM_MspInit+0xc8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8004750:	ea42 0208 	orr.w	r2, r2, r8
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	ea03 0308 	and.w	r3, r3, r8
 800475c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004760:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004762:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8004764:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8004768:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800476c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800476e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004770:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004772:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004774:	f7fb ff68 	bl	8000648 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8004778:	a901      	add	r1, sp, #4
 800477a:	481e      	ldr	r0, [pc, #120]	; (80047f4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800477c:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004784:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004786:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8004788:	f7fb ff5e 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800478c:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004790:	a901      	add	r1, sp, #4
 8004792:	4819      	ldr	r0, [pc, #100]	; (80047f8 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8004794:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004796:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800479c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800479e:	f7fb ff53 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80047a2:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047a6:	a901      	add	r1, sp, #4
 80047a8:	4814      	ldr	r0, [pc, #80]	; (80047fc <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80047aa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ac:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047b2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047b4:	f7fb ff48 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80047b8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047bc:	a901      	add	r1, sp, #4
 80047be:	4810      	ldr	r0, [pc, #64]	; (8004800 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80047c0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047c8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047ca:	f7fb ff3d 	bl	8000648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80047ce:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d0:	a901      	add	r1, sp, #4
 80047d2:	480c      	ldr	r0, [pc, #48]	; (8004804 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80047d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047da:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047dc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047de:	f7fb ff33 	bl	8000648 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80047e2:	b006      	add	sp, #24
 80047e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e8:	200000ac 	.word	0x200000ac
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40021400 	.word	0x40021400
 80047f4:	40020800 	.word	0x40020800
 80047f8:	40021800 	.word	0x40021800
 80047fc:	40021000 	.word	0x40021000
 8004800:	40020c00 	.word	0x40020c00
 8004804:	40020400 	.word	0x40020400

08004808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004808:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800480a:	4601      	mov	r1, r0
{
 800480c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800480e:	2200      	movs	r2, #0
 8004810:	2036      	movs	r0, #54	; 0x36
 8004812:	f7fb fec5 	bl	80005a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8004816:	2036      	movs	r0, #54	; 0x36
 8004818:	f7fb fef6 	bl	8000608 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800481c:	2500      	movs	r5, #0
 800481e:	4b15      	ldr	r3, [pc, #84]	; (8004874 <HAL_InitTick+0x6c>)
 8004820:	9502      	str	r5, [sp, #8]
 8004822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004824:	4c14      	ldr	r4, [pc, #80]	; (8004878 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004826:	f042 0210 	orr.w	r2, r2, #16
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004834:	a901      	add	r1, sp, #4
 8004836:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004838:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800483a:	f7fd f92d 	bl	8001a98 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800483e:	f7fd f90b 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <HAL_InitTick+0x74>)
 8004844:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8004846:	f240 33e7 	movw	r3, #999	; 0x3e7
 800484a:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800484c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_InitTick+0x78>)
 8004850:	fbb0 f0f3 	udiv	r0, r0, r3
 8004854:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8004856:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004858:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800485a:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800485c:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800485e:	f7fd fd25 	bl	80022ac <HAL_TIM_Base_Init>
 8004862:	b920      	cbnz	r0, 800486e <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004864:	4620      	mov	r0, r4
 8004866:	f7fd fc04 	bl	8002072 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800486a:	b009      	add	sp, #36	; 0x24
 800486c:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800486e:	2001      	movs	r0, #1
 8004870:	e7fb      	b.n	800486a <HAL_InitTick+0x62>
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	20025ad4 	.word	0x20025ad4
 800487c:	40001000 	.word	0x40001000
 8004880:	000f4240 	.word	0x000f4240

08004884 <NMI_Handler>:
 8004884:	4770      	bx	lr

08004886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004886:	e7fe      	b.n	8004886 <HardFault_Handler>

08004888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004888:	e7fe      	b.n	8004888 <MemManage_Handler>

0800488a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800488a:	e7fe      	b.n	800488a <BusFault_Handler>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	e7fe      	b.n	800488c <UsageFault_Handler>

0800488e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800488e:	4770      	bx	lr

08004890 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004890:	4801      	ldr	r0, [pc, #4]	; (8004898 <TIM6_DAC_IRQHandler+0x8>)
 8004892:	f7fd bc02 	b.w	800209a <HAL_TIM_IRQHandler>
 8004896:	bf00      	nop
 8004898:	20025ad4 	.word	0x20025ad4

0800489c <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800489c:	4801      	ldr	r0, [pc, #4]	; (80048a4 <OTG_HS_IRQHandler+0x8>)
 800489e:	f7fc b8bb 	b.w	8000a18 <HAL_HCD_IRQHandler>
 80048a2:	bf00      	nop
 80048a4:	20025ee0 	.word	0x20025ee0

080048a8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <LTDC_IRQHandler+0x8>)
 80048aa:	f7fc bde4 	b.w	8001476 <HAL_LTDC_IRQHandler>
 80048ae:	bf00      	nop
 80048b0:	20000178 	.word	0x20000178

080048b4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80048b4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <_sbrk+0x2c>)
 80048b8:	6819      	ldr	r1, [r3, #0]
{
 80048ba:	4602      	mov	r2, r0
	if (heap_end == 0)
 80048bc:	b909      	cbnz	r1, 80048c2 <_sbrk+0xe>
		heap_end = &end;
 80048be:	4909      	ldr	r1, [pc, #36]	; (80048e4 <_sbrk+0x30>)
 80048c0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80048c2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80048c4:	4669      	mov	r1, sp
 80048c6:	4402      	add	r2, r0
 80048c8:	428a      	cmp	r2, r1
 80048ca:	d906      	bls.n	80048da <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80048cc:	f000 f9c4 	bl	8004c58 <__errno>
 80048d0:	230c      	movs	r3, #12
 80048d2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80048da:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80048dc:	bd08      	pop	{r3, pc}
 80048de:	bf00      	nop
 80048e0:	200000b0 	.word	0x200000b0
 80048e4:	200261a8 	.word	0x200261a8

080048e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048e8:	490f      	ldr	r1, [pc, #60]	; (8004928 <SystemInit+0x40>)
 80048ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80048ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <SystemInit+0x44>)
 80048f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80048fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004902:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800490a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800490e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004910:	4a07      	ldr	r2, [pc, #28]	; (8004930 <SystemInit+0x48>)
 8004912:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800491a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800491c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800491e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004922:	608b      	str	r3, [r1, #8]
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000ed00 	.word	0xe000ed00
 800492c:	40023800 	.word	0x40023800
 8004930:	24003010 	.word	0x24003010

08004934 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004934:	2904      	cmp	r1, #4
 8004936:	d00a      	beq.n	800494e <USBH_UserProcess+0x1a>
 8004938:	2905      	cmp	r1, #5
 800493a:	d004      	beq.n	8004946 <USBH_UserProcess+0x12>
 800493c:	2902      	cmp	r1, #2
 800493e:	d105      	bne.n	800494c <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <USBH_UserProcess+0x20>)
 8004942:	7019      	strb	r1, [r3, #0]
  break;
 8004944:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8004946:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <USBH_UserProcess+0x20>)
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	4770      	bx	lr
 800494e:	2201      	movs	r2, #1
 8004950:	e7fa      	b.n	8004948 <USBH_UserProcess+0x14>
 8004952:	bf00      	nop
 8004954:	200000b4 	.word	0x200000b4

08004958 <MX_USB_HOST_Init>:
{
 8004958:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800495a:	2200      	movs	r2, #0
 800495c:	490b      	ldr	r1, [pc, #44]	; (800498c <MX_USB_HOST_Init+0x34>)
 800495e:	480c      	ldr	r0, [pc, #48]	; (8004990 <MX_USB_HOST_Init+0x38>)
 8004960:	f7fe fc84 	bl	800326c <USBH_Init>
 8004964:	b108      	cbz	r0, 800496a <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8004966:	f7ff fd0b 	bl	8004380 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800496a:	490a      	ldr	r1, [pc, #40]	; (8004994 <MX_USB_HOST_Init+0x3c>)
 800496c:	4808      	ldr	r0, [pc, #32]	; (8004990 <MX_USB_HOST_Init+0x38>)
 800496e:	f7fe fc94 	bl	800329a <USBH_RegisterClass>
 8004972:	b108      	cbz	r0, 8004978 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8004974:	f7ff fd04 	bl	8004380 <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8004978:	4805      	ldr	r0, [pc, #20]	; (8004990 <MX_USB_HOST_Init+0x38>)
 800497a:	f7fe fcc1 	bl	8003300 <USBH_Start>
 800497e:	b118      	cbz	r0, 8004988 <MX_USB_HOST_Init+0x30>
}
 8004980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004984:	f7ff bcfc 	b.w	8004380 <Error_Handler>
 8004988:	bd08      	pop	{r3, pc}
 800498a:	bf00      	nop
 800498c:	08004935 	.word	0x08004935
 8004990:	20025b14 	.word	0x20025b14
 8004994:	20000004 	.word	0x20000004

08004998 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostHS);
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <MX_USB_HOST_Process+0x8>)
 800499a:	f7fe bcbb 	b.w	8003314 <USBH_Process>
 800499e:	bf00      	nop
 80049a0:	20025b14 	.word	0x20025b14

080049a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80049a4:	b530      	push	{r4, r5, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049aa:	2214      	movs	r2, #20
 80049ac:	2100      	movs	r1, #0
 80049ae:	a803      	add	r0, sp, #12
 80049b0:	f000 f98c 	bl	8004ccc <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_HCD_MspInit+0x84>)
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d132      	bne.n	8004a22 <HAL_HCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049bc:	2500      	movs	r5, #0
 80049be:	4c1b      	ldr	r4, [pc, #108]	; (8004a2c <HAL_HCD_MspInit+0x88>)
 80049c0:	9501      	str	r5, [sp, #4]
 80049c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c4:	481a      	ldr	r0, [pc, #104]	; (8004a30 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	6323      	str	r3, [r4, #48]	; 0x30
 80049cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80049d6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80049da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80049e0:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e2:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80049e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e8:	f7fb fe2e 	bl	8000648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80049ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80049f0:	a903      	add	r1, sp, #12
 80049f2:	480f      	ldr	r0, [pc, #60]	; (8004a30 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80049f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049f6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80049fa:	f7fb fe25 	bl	8000648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80049fe:	9502      	str	r5, [sp, #8]
 8004a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a06:	6323      	str	r3, [r4, #48]	; 0x30
 8004a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0e:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8004a10:	204d      	movs	r0, #77	; 0x4d
 8004a12:	462a      	mov	r2, r5
 8004a14:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8004a16:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8004a18:	f7fb fdc2 	bl	80005a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8004a1c:	204d      	movs	r0, #77	; 0x4d
 8004a1e:	f7fb fdf3 	bl	8000608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8004a22:	b009      	add	sp, #36	; 0x24
 8004a24:	bd30      	pop	{r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	40040000 	.word	0x40040000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020400 	.word	0x40020400

08004a34 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8004a34:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a38:	f7fe bdb4 	b.w	80035a4 <USBH_LL_IncTimer>

08004a3c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8004a3c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a40:	f7fe bdc6 	b.w	80035d0 <USBH_LL_Connect>

08004a44 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8004a44:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a48:	f7fe bdd6 	b.w	80035f8 <USBH_LL_Disconnect>

08004a4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004a4c:	4770      	bx	lr

08004a4e <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8004a4e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a52:	f7fe bdb5 	b.w	80035c0 <USBH_LL_PortEnabled>

08004a56 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8004a56:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a5a:	f7fe bdb5 	b.w	80035c8 <USBH_LL_PortDisabled>
	...

08004a60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004a60:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8004a62:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 8004a66:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 8004a68:	b9eb      	cbnz	r3, 8004aa6 <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8004a6a:	4810      	ldr	r0, [pc, #64]	; (8004aac <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8004a6c:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <USBH_LL_Init+0x50>)
 8004a6e:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8004a70:	220c      	movs	r2, #12
 8004a72:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8004a74:	2201      	movs	r2, #1
 8004a76:	60c2      	str	r2, [r0, #12]
  phost->pData = &hhcd_USB_OTG_HS;
 8004a78:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8004a7c:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.pData = phost;
 8004a7e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8004a82:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8004a84:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8004a86:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8004a88:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8004a8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8004a8c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8004a8e:	f7fb ff16 	bl	80008be <HAL_HCD_Init>
 8004a92:	b108      	cbz	r0, 8004a98 <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 8004a94:	f7ff fc74 	bl	8004380 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8004a98:	4804      	ldr	r0, [pc, #16]	; (8004aac <USBH_LL_Init+0x4c>)
 8004a9a:	f7fc fb0f 	bl	80010bc <HAL_HCD_GetCurrentFrame>
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7fe fd7c 	bl	800359e <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	bd10      	pop	{r4, pc}
 8004aaa:	bf00      	nop
 8004aac:	20025ee0 	.word	0x20025ee0
 8004ab0:	40040000 	.word	0x40040000

08004ab4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004ab4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8004ab6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004aba:	f7fc fac9 	bl	8001050 <HAL_HCD_Start>
 8004abe:	2803      	cmp	r0, #3
 8004ac0:	bf9a      	itte	ls
 8004ac2:	4b02      	ldrls	r3, [pc, #8]	; (8004acc <USBH_LL_Start+0x18>)
 8004ac4:	5c18      	ldrbls	r0, [r3, r0]
 8004ac6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004ac8:	bd08      	pop	{r3, pc}
 8004aca:	bf00      	nop
 8004acc:	08004eb7 	.word	0x08004eb7

08004ad0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004ad0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8004ad2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004ad6:	f7fc fad1 	bl	800107c <HAL_HCD_Stop>
 8004ada:	2803      	cmp	r0, #3
 8004adc:	bf9a      	itte	ls
 8004ade:	4b02      	ldrls	r3, [pc, #8]	; (8004ae8 <USBH_LL_Stop+0x18>)
 8004ae0:	5c18      	ldrbls	r0, [r3, r0]
 8004ae2:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004ae4:	bd08      	pop	{r3, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08004eb7 	.word	0x08004eb7

08004aec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004aec:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004aee:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004af2:	f7fc fae6 	bl	80010c2 <HAL_HCD_GetCurrentSpeed>
 8004af6:	2802      	cmp	r0, #2
 8004af8:	bf9a      	itte	ls
 8004afa:	4b02      	ldrls	r3, [pc, #8]	; (8004b04 <USBH_LL_GetSpeed+0x18>)
 8004afc:	5c18      	ldrbls	r0, [r3, r0]
 8004afe:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8004b00:	bd08      	pop	{r3, pc}
 8004b02:	bf00      	nop
 8004b04:	08004eb4 	.word	0x08004eb4

08004b08 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004b08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004b0a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b0e:	f7fc fac7 	bl	80010a0 <HAL_HCD_ResetPort>
 8004b12:	2803      	cmp	r0, #3
 8004b14:	bf9a      	itte	ls
 8004b16:	4b02      	ldrls	r3, [pc, #8]	; (8004b20 <USBH_LL_ResetPort+0x18>)
 8004b18:	5c18      	ldrbls	r0, [r3, r0]
 8004b1a:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004b1c:	bd08      	pop	{r3, pc}
 8004b1e:	bf00      	nop
 8004b20:	08004eb7 	.word	0x08004eb7

08004b24 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004b24:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b28:	f7fc bac3 	b.w	80010b2 <HAL_HCD_HC_GetXferCount>

08004b2c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004b2e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004b32:	9402      	str	r4, [sp, #8]
 8004b34:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004b38:	9401      	str	r4, [sp, #4]
 8004b3a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b3e:	9400      	str	r4, [sp, #0]
 8004b40:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b44:	f7fb fe71 	bl	800082a <HAL_HCD_HC_Init>
 8004b48:	2803      	cmp	r0, #3
 8004b4a:	bf9a      	itte	ls
 8004b4c:	4b02      	ldrls	r3, [pc, #8]	; (8004b58 <USBH_LL_OpenPipe+0x2c>)
 8004b4e:	5c18      	ldrbls	r0, [r3, r0]
 8004b50:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004b52:	b004      	add	sp, #16
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	08004eb7 	.word	0x08004eb7

08004b5c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004b5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004b5e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b62:	f7fb fe9a 	bl	800089a <HAL_HCD_HC_Halt>
 8004b66:	2803      	cmp	r0, #3
 8004b68:	bf9a      	itte	ls
 8004b6a:	4b02      	ldrls	r3, [pc, #8]	; (8004b74 <USBH_LL_ClosePipe+0x18>)
 8004b6c:	5c18      	ldrbls	r0, [r3, r0]
 8004b6e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004b70:	bd08      	pop	{r3, pc}
 8004b72:	bf00      	nop
 8004b74:	08004eb7 	.word	0x08004eb7

08004b78 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004b7a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004b7e:	9403      	str	r4, [sp, #12]
 8004b80:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004b84:	9402      	str	r4, [sp, #8]
 8004b86:	9c07      	ldr	r4, [sp, #28]
 8004b88:	9401      	str	r4, [sp, #4]
 8004b8a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b8e:	9400      	str	r4, [sp, #0]
 8004b90:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b94:	f7fb fede 	bl	8000954 <HAL_HCD_HC_SubmitRequest>
 8004b98:	2803      	cmp	r0, #3
 8004b9a:	bf9a      	itte	ls
 8004b9c:	4b02      	ldrls	r3, [pc, #8]	; (8004ba8 <USBH_LL_SubmitURB+0x30>)
 8004b9e:	5c18      	ldrbls	r0, [r3, r0]
 8004ba0:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004ba2:	b004      	add	sp, #16
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	bf00      	nop
 8004ba8:	08004eb7 	.word	0x08004eb7

08004bac <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004bac:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004bb0:	f7fc ba79 	b.w	80010a6 <HAL_HCD_HC_GetURBState>

08004bb4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004bb4:	b508      	push	{r3, lr}
  if (phost->id == HOST_HS) {
 8004bb6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004bba:	b913      	cbnz	r3, 8004bc2 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	f000 f817 	bl	8004bf0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004bc2:	20c8      	movs	r0, #200	; 0xc8
 8004bc4:	f7fb fcc6 	bl	8000554 <HAL_Delay>
  return USBH_OK;
}
 8004bc8:	2000      	movs	r0, #0
 8004bca:	bd08      	pop	{r3, pc}

08004bcc <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004bcc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8004bd0:	2328      	movs	r3, #40	; 0x28
 8004bd2:	fb03 0101 	mla	r1, r3, r1, r0
 8004bd6:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8004bda:	b11b      	cbz	r3, 8004be4 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004bdc:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8004be0:	2000      	movs	r0, #0
 8004be2:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8004be4:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8004be8:	e7fa      	b.n	8004be0 <USBH_LL_SetToggle+0x14>

08004bea <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004bea:	f7fb bcb3 	b.w	8000554 <HAL_Delay>
	...

08004bf0 <MX_DriverVbusHS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8004bf0:	fab0 f280 	clz	r2, r0
 8004bf4:	0952      	lsrs	r2, r2, #5
 8004bf6:	2110      	movs	r1, #16
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <MX_DriverVbusHS+0x10>)
 8004bfa:	f7fb be11 	b.w	8000820 <HAL_GPIO_WritePin>
 8004bfe:	bf00      	nop
 8004c00:	40020800 	.word	0x40020800

08004c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c3c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c0a:	e003      	b.n	8004c14 <LoopCopyDataInit>

08004c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c12:	3104      	adds	r1, #4

08004c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c1c:	d3f6      	bcc.n	8004c0c <CopyDataInit>
  ldr  r2, =_sbss
 8004c1e:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c20:	e002      	b.n	8004c28 <LoopFillZerobss>

08004c22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c24:	f842 3b04 	str.w	r3, [r2], #4

08004c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c2c:	d3f9      	bcc.n	8004c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c2e:	f7ff fe5b 	bl	80048e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c32:	f000 f817 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c36:	f7ff f997 	bl	8003f68 <main>
  bx  lr    
 8004c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004c3c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004c40:	08004ecc 	.word	0x08004ecc
  ldr  r0, =_sdata
 8004c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c48:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004c4c:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8004c50:	200261a8 	.word	0x200261a8

08004c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c54:	e7fe      	b.n	8004c54 <ADC_IRQHandler>
	...

08004c58 <__errno>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <__errno+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000028 	.word	0x20000028

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4e0d      	ldr	r6, [pc, #52]	; (8004c9c <__libc_init_array+0x38>)
 8004c68:	4c0d      	ldr	r4, [pc, #52]	; (8004ca0 <__libc_init_array+0x3c>)
 8004c6a:	1ba4      	subs	r4, r4, r6
 8004c6c:	10a4      	asrs	r4, r4, #2
 8004c6e:	2500      	movs	r5, #0
 8004c70:	42a5      	cmp	r5, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	4e0b      	ldr	r6, [pc, #44]	; (8004ca4 <__libc_init_array+0x40>)
 8004c76:	4c0c      	ldr	r4, [pc, #48]	; (8004ca8 <__libc_init_array+0x44>)
 8004c78:	f000 f8ee 	bl	8004e58 <_init>
 8004c7c:	1ba4      	subs	r4, r4, r6
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	2500      	movs	r5, #0
 8004c82:	42a5      	cmp	r5, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c8c:	4798      	blx	r3
 8004c8e:	3501      	adds	r5, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c96:	4798      	blx	r3
 8004c98:	3501      	adds	r5, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	08004ec4 	.word	0x08004ec4
 8004ca0:	08004ec4 	.word	0x08004ec4
 8004ca4:	08004ec4 	.word	0x08004ec4
 8004ca8:	08004ec8 	.word	0x08004ec8

08004cac <malloc>:
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <malloc+0xc>)
 8004cae:	4601      	mov	r1, r0
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	f000 b861 	b.w	8004d78 <_malloc_r>
 8004cb6:	bf00      	nop
 8004cb8:	20000028 	.word	0x20000028

08004cbc <free>:
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <free+0xc>)
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	f000 b80b 	b.w	8004cdc <_free_r>
 8004cc6:	bf00      	nop
 8004cc8:	20000028 	.word	0x20000028

08004ccc <memset>:
 8004ccc:	4402      	add	r2, r0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d100      	bne.n	8004cd6 <memset+0xa>
 8004cd4:	4770      	bx	lr
 8004cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cda:	e7f9      	b.n	8004cd0 <memset+0x4>

08004cdc <_free_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4605      	mov	r5, r0
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	d045      	beq.n	8004d70 <_free_r+0x94>
 8004ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce8:	1f0c      	subs	r4, r1, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfb8      	it	lt
 8004cee:	18e4      	addlt	r4, r4, r3
 8004cf0:	f000 f8b0 	bl	8004e54 <__malloc_lock>
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <_free_r+0x98>)
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	b933      	cbnz	r3, 8004d0a <_free_r+0x2e>
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	6014      	str	r4, [r2, #0]
 8004d00:	4628      	mov	r0, r5
 8004d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d06:	f000 b8a6 	b.w	8004e56 <__malloc_unlock>
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	d90c      	bls.n	8004d28 <_free_r+0x4c>
 8004d0e:	6821      	ldr	r1, [r4, #0]
 8004d10:	1862      	adds	r2, r4, r1
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf04      	itt	eq
 8004d16:	681a      	ldreq	r2, [r3, #0]
 8004d18:	685b      	ldreq	r3, [r3, #4]
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	bf04      	itt	eq
 8004d1e:	1852      	addeq	r2, r2, r1
 8004d20:	6022      	streq	r2, [r4, #0]
 8004d22:	6004      	str	r4, [r0, #0]
 8004d24:	e7ec      	b.n	8004d00 <_free_r+0x24>
 8004d26:	4613      	mov	r3, r2
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	b10a      	cbz	r2, 8004d30 <_free_r+0x54>
 8004d2c:	42a2      	cmp	r2, r4
 8004d2e:	d9fa      	bls.n	8004d26 <_free_r+0x4a>
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	1858      	adds	r0, r3, r1
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d10b      	bne.n	8004d50 <_free_r+0x74>
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	4401      	add	r1, r0
 8004d3c:	1858      	adds	r0, r3, r1
 8004d3e:	4282      	cmp	r2, r0
 8004d40:	6019      	str	r1, [r3, #0]
 8004d42:	d1dd      	bne.n	8004d00 <_free_r+0x24>
 8004d44:	6810      	ldr	r0, [r2, #0]
 8004d46:	6852      	ldr	r2, [r2, #4]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	4401      	add	r1, r0
 8004d4c:	6019      	str	r1, [r3, #0]
 8004d4e:	e7d7      	b.n	8004d00 <_free_r+0x24>
 8004d50:	d902      	bls.n	8004d58 <_free_r+0x7c>
 8004d52:	230c      	movs	r3, #12
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	e7d3      	b.n	8004d00 <_free_r+0x24>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	1821      	adds	r1, r4, r0
 8004d5c:	428a      	cmp	r2, r1
 8004d5e:	bf04      	itt	eq
 8004d60:	6811      	ldreq	r1, [r2, #0]
 8004d62:	6852      	ldreq	r2, [r2, #4]
 8004d64:	6062      	str	r2, [r4, #4]
 8004d66:	bf04      	itt	eq
 8004d68:	1809      	addeq	r1, r1, r0
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	605c      	str	r4, [r3, #4]
 8004d6e:	e7c7      	b.n	8004d00 <_free_r+0x24>
 8004d70:	bd38      	pop	{r3, r4, r5, pc}
 8004d72:	bf00      	nop
 8004d74:	200000b8 	.word	0x200000b8

08004d78 <_malloc_r>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	1ccd      	adds	r5, r1, #3
 8004d7c:	f025 0503 	bic.w	r5, r5, #3
 8004d80:	3508      	adds	r5, #8
 8004d82:	2d0c      	cmp	r5, #12
 8004d84:	bf38      	it	cc
 8004d86:	250c      	movcc	r5, #12
 8004d88:	2d00      	cmp	r5, #0
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	db01      	blt.n	8004d92 <_malloc_r+0x1a>
 8004d8e:	42a9      	cmp	r1, r5
 8004d90:	d903      	bls.n	8004d9a <_malloc_r+0x22>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	2000      	movs	r0, #0
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	f000 f85b 	bl	8004e54 <__malloc_lock>
 8004d9e:	4a23      	ldr	r2, [pc, #140]	; (8004e2c <_malloc_r+0xb4>)
 8004da0:	6814      	ldr	r4, [r2, #0]
 8004da2:	4621      	mov	r1, r4
 8004da4:	b991      	cbnz	r1, 8004dcc <_malloc_r+0x54>
 8004da6:	4c22      	ldr	r4, [pc, #136]	; (8004e30 <_malloc_r+0xb8>)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	b91b      	cbnz	r3, 8004db4 <_malloc_r+0x3c>
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f841 	bl	8004e34 <_sbrk_r>
 8004db2:	6020      	str	r0, [r4, #0]
 8004db4:	4629      	mov	r1, r5
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 f83c 	bl	8004e34 <_sbrk_r>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d126      	bne.n	8004e0e <_malloc_r+0x96>
 8004dc0:	230c      	movs	r3, #12
 8004dc2:	6033      	str	r3, [r6, #0]
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f846 	bl	8004e56 <__malloc_unlock>
 8004dca:	e7e4      	b.n	8004d96 <_malloc_r+0x1e>
 8004dcc:	680b      	ldr	r3, [r1, #0]
 8004dce:	1b5b      	subs	r3, r3, r5
 8004dd0:	d41a      	bmi.n	8004e08 <_malloc_r+0x90>
 8004dd2:	2b0b      	cmp	r3, #11
 8004dd4:	d90f      	bls.n	8004df6 <_malloc_r+0x7e>
 8004dd6:	600b      	str	r3, [r1, #0]
 8004dd8:	50cd      	str	r5, [r1, r3]
 8004dda:	18cc      	adds	r4, r1, r3
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f83a 	bl	8004e56 <__malloc_unlock>
 8004de2:	f104 000b 	add.w	r0, r4, #11
 8004de6:	1d23      	adds	r3, r4, #4
 8004de8:	f020 0007 	bic.w	r0, r0, #7
 8004dec:	1ac3      	subs	r3, r0, r3
 8004dee:	d01b      	beq.n	8004e28 <_malloc_r+0xb0>
 8004df0:	425a      	negs	r2, r3
 8004df2:	50e2      	str	r2, [r4, r3]
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	428c      	cmp	r4, r1
 8004df8:	bf0d      	iteet	eq
 8004dfa:	6863      	ldreq	r3, [r4, #4]
 8004dfc:	684b      	ldrne	r3, [r1, #4]
 8004dfe:	6063      	strne	r3, [r4, #4]
 8004e00:	6013      	streq	r3, [r2, #0]
 8004e02:	bf18      	it	ne
 8004e04:	460c      	movne	r4, r1
 8004e06:	e7e9      	b.n	8004ddc <_malloc_r+0x64>
 8004e08:	460c      	mov	r4, r1
 8004e0a:	6849      	ldr	r1, [r1, #4]
 8004e0c:	e7ca      	b.n	8004da4 <_malloc_r+0x2c>
 8004e0e:	1cc4      	adds	r4, r0, #3
 8004e10:	f024 0403 	bic.w	r4, r4, #3
 8004e14:	42a0      	cmp	r0, r4
 8004e16:	d005      	beq.n	8004e24 <_malloc_r+0xac>
 8004e18:	1a21      	subs	r1, r4, r0
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 f80a 	bl	8004e34 <_sbrk_r>
 8004e20:	3001      	adds	r0, #1
 8004e22:	d0cd      	beq.n	8004dc0 <_malloc_r+0x48>
 8004e24:	6025      	str	r5, [r4, #0]
 8004e26:	e7d9      	b.n	8004ddc <_malloc_r+0x64>
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200000b8 	.word	0x200000b8
 8004e30:	200000bc 	.word	0x200000bc

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4c06      	ldr	r4, [pc, #24]	; (8004e50 <_sbrk_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	f7ff fd38 	bl	80048b4 <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_sbrk_r+0x1a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_sbrk_r+0x1a>
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200261a4 	.word	0x200261a4

08004e54 <__malloc_lock>:
 8004e54:	4770      	bx	lr

08004e56 <__malloc_unlock>:
 8004e56:	4770      	bx	lr

08004e58 <_init>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr

08004e64 <_fini>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	bf00      	nop
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr
