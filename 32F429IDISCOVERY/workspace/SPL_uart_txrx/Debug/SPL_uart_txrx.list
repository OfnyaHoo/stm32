
SPL_uart_txrx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000c40  08000c40  00010c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c50  08000c50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c54  08000c54  00010c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000020  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000030  20000030  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003131  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000930  00000000  00000000  00023171  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000450  00000000  00000000  00023aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003e8  00000000  00000000  00023ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001675  00000000  00000000  000242e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000018e1  00000000  00000000  00025955  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00027236  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000011c4  00000000  00000000  000272b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00028478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000c28 	.word	0x08000c28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08000c28 	.word	0x08000c28

080001ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	da0b      	bge.n	8000218 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000200:	490d      	ldr	r1, [pc, #52]	; (8000238 <NVIC_SetPriority+0x4c>)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	3b04      	subs	r3, #4
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000216:	e009      	b.n	800022c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000218:	4908      	ldr	r1, [pc, #32]	; (800023c <NVIC_SetPriority+0x50>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000250:	d301      	bcc.n	8000256 <SysTick_Config+0x16>
 8000252:	2301      	movs	r3, #1
 8000254:	e00f      	b.n	8000276 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <SysTick_Config+0x40>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800025e:	210f      	movs	r1, #15
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f7ff ffc2 	bl	80001ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SysTick_Config+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Config+0x40>)
 8000270:	2207      	movs	r2, #7
 8000272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	e000e010 	.word	0xe000e010

08000284 <main>:
**
**===========================================================================
*/

int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800028a:	463b      	mov	r3, r7
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fab7 	bl	8000800 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <main+0x48>)
 8000296:	fba2 2303 	umull	r2, r3, r2, r3
 800029a:	099b      	lsrs	r3, r3, #6
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ffcf 	bl	8000240 <SysTick_Config>

	GPIOG_init();
 80002a2:	f000 f819 	bl	80002d8 <GPIOG_init>
	USART1_init();
 80002a6:	f000 f835 	bl	8000314 <USART1_init>

	while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
 80002aa:	bf00      	nop
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	4808      	ldr	r0, [pc, #32]	; (80002d0 <main+0x4c>)
 80002b0:	f000 fc7a 	bl	8000ba8 <USART_GetFlagStatus>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f8      	beq.n	80002ac <main+0x28>

	while (1)
	{
		USART_Puts(USART1, "hello world\r\n");
 80002ba:	4906      	ldr	r1, [pc, #24]	; (80002d4 <main+0x50>)
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <main+0x4c>)
 80002be:	f000 f875 	bl	80003ac <USART_Puts>
		Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f000 f893 	bl	80003f0 <Delay>
		USART_Puts(USART1, "hello world\r\n");
 80002ca:	e7f6      	b.n	80002ba <main+0x36>
 80002cc:	10624dd3 	.word	0x10624dd3
 80002d0:	40011000 	.word	0x40011000
 80002d4:	08000c40 	.word	0x08000c40

080002d8 <GPIOG_init>:
	}
}

static void GPIOG_init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80002de:	2101      	movs	r1, #1
 80002e0:	2040      	movs	r0, #64	; 0x40
 80002e2:	f000 fb35 	bl	8000950 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 80002e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80002ea:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80002ec:	2301      	movs	r3, #1
 80002ee:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002f0:	2300      	movs	r3, #0
 80002f2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80002f4:	2303      	movs	r3, #3
 80002f6:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002f8:	2300      	movs	r3, #0
 80002fa:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 80002fc:	463b      	mov	r3, r7
 80002fe:	4619      	mov	r1, r3
 8000300:	4803      	ldr	r0, [pc, #12]	; (8000310 <GPIOG_init+0x38>)
 8000302:	f000 f9a5 	bl	8000650 <GPIO_Init>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021800 	.word	0x40021800

08000314 <USART1_init>:


static void USART1_init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
	USART_InitTypeDef usart1_init_struct;
	GPIO_InitTypeDef gpioa_init_struct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800031a:	2101      	movs	r1, #1
 800031c:	2010      	movs	r0, #16
 800031e:	f000 fb37 	bl	8000990 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000322:	2101      	movs	r1, #1
 8000324:	2001      	movs	r0, #1
 8000326:	f000 fb13 	bl	8000950 <RCC_AHB1PeriphClockCmd>

	/* GPIOA PIN9 alternative function Tx */
	gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 800032a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800032e:	603b      	str	r3, [r7, #0]
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8000330:	2302      	movs	r3, #2
 8000332:	717b      	strb	r3, [r7, #5]
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF;
 8000334:	2302      	movs	r3, #2
 8000336:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &gpioa_init_struct);
 8000338:	463b      	mov	r3, r7
 800033a:	4619      	mov	r1, r3
 800033c:	4819      	ldr	r0, [pc, #100]	; (80003a4 <USART1_init+0x90>)
 800033e:	f000 f987 	bl	8000650 <GPIO_Init>

	/* GPIOA PIN9 alternative function Rx */
	gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 8000342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000346:	603b      	str	r3, [r7, #0]
	gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 8000348:	2302      	movs	r3, #2
 800034a:	717b      	strb	r3, [r7, #5]
	gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF;
 800034c:	2302      	movs	r3, #2
 800034e:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &gpioa_init_struct);
 8000350:	463b      	mov	r3, r7
 8000352:	4619      	mov	r1, r3
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <USART1_init+0x90>)
 8000356:	f000 f97b 	bl	8000650 <GPIO_Init>

	USART_Cmd(USART1, ENABLE);
 800035a:	2101      	movs	r1, #1
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <USART1_init+0x94>)
 800035e:	f000 fbf1 	bl	8000b44 <USART_Cmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8000362:	2207      	movs	r2, #7
 8000364:	2109      	movs	r1, #9
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <USART1_init+0x90>)
 8000368:	f000 fa00 	bl	800076c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 800036c:	2207      	movs	r2, #7
 800036e:	210a      	movs	r1, #10
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <USART1_init+0x90>)
 8000372:	f000 f9fb 	bl	800076c <GPIO_PinAFConfig>

	usart1_init_struct.USART_BaudRate = 115200;
 8000376:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800037a:	60bb      	str	r3, [r7, #8]
	usart1_init_struct.USART_WordLength = USART_WordLength_8b;
 800037c:	2300      	movs	r3, #0
 800037e:	81bb      	strh	r3, [r7, #12]
	usart1_init_struct.USART_StopBits = USART_StopBits_1;
 8000380:	2300      	movs	r3, #0
 8000382:	81fb      	strh	r3, [r7, #14]
	usart1_init_struct.USART_Parity = USART_Parity_No ;
 8000384:	2300      	movs	r3, #0
 8000386:	823b      	strh	r3, [r7, #16]
	usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000388:	230c      	movs	r3, #12
 800038a:	827b      	strh	r3, [r7, #18]
	usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800038c:	2300      	movs	r3, #0
 800038e:	82bb      	strh	r3, [r7, #20]

	USART_Init(USART1, &usart1_init_struct);
 8000390:	f107 0308 	add.w	r3, r7, #8
 8000394:	4619      	mov	r1, r3
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <USART1_init+0x94>)
 8000398:	f000 fb1a 	bl	80009d0 <USART_Init>
	// USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40011000 	.word	0x40011000

080003ac <USART_Puts>:

static void USART_Puts(USART_TypeDef* USARTx, volatile char *data) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	while(*data) {
 80003b6:	e012      	b.n	80003de <USART_Puts+0x32>
		while(!(USARTx->SR & 0x00000040));
 80003b8:	bf00      	nop
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0f8      	beq.n	80003ba <USART_Puts+0xe>
		USART_SendData(USARTx, *data);
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 fbd6 	bl	8000b84 <USART_SendData>
		data++;
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	3301      	adds	r3, #1
 80003dc:	603b      	str	r3, [r7, #0]
	while(*data) {
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1e7      	bne.n	80003b8 <USART_Puts+0xc>
	}
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <Delay>:

static void Delay(__IO uint32_t nTime)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <Delay+0x24>)
 80003fc:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 80003fe:	bf00      	nop
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <Delay+0x24>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1fb      	bne.n	8000400 <Delay+0x10>
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	2000002c 	.word	0x2000002c

08000418 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  if (TimingDelay != 0)
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <TimingDelay_Decrement+0x20>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d004      	beq.n	800042e <TimingDelay_Decrement+0x16>
  {
    TimingDelay--;
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <TimingDelay_Decrement+0x20>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a03      	ldr	r2, [pc, #12]	; (8000438 <TimingDelay_Decrement+0x20>)
 800042c:	6013      	str	r3, [r2, #0]
  }
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	2000002c 	.word	0x2000002c

0800043c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800043c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000474 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000442:	e003      	b.n	800044c <LoopCopyDataInit>

08000444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800044a:	3104      	adds	r1, #4

0800044c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800044c:	480b      	ldr	r0, [pc, #44]	; (800047c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000454:	d3f6      	bcc.n	8000444 <CopyDataInit>
  ldr  r2, =_sbss
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000458:	e002      	b.n	8000460 <LoopFillZerobss>

0800045a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800045a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800045c:	f842 3b04 	str.w	r3, [r2], #4

08000460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000464:	d3f9      	bcc.n	800045a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000466:	f000 f841 	bl	80004ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800046a:	f000 fbb9 	bl	8000be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800046e:	f7ff ff09 	bl	8000284 <main>
  bx  lr    
 8000472:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000474:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000478:	08000c58 	.word	0x08000c58
  ldr  r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000480:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000484:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000488:	20000030 	.word	0x20000030

0800048c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC_IRQHandler>

0800048e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <HardFault_Handler+0x4>

080004a2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <BusFault_Handler+0x4>

080004ae <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <UsageFault_Handler+0x4>

080004b4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 80004e2:	f7ff ff99 	bl	8000418 <TimingDelay_Decrement>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <SystemInit+0x60>)
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <SystemInit+0x60>)
 80004f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <SystemInit+0x64>)
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <SystemInit+0x64>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <SystemInit+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <SystemInit+0x64>)
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <SystemInit+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <SystemInit+0x64>)
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <SystemInit+0x68>)
 8000526:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <SystemInit+0x64>)
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <SystemInit+0x64>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SystemInit+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800053a:	f000 f80d 	bl	8000558 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800053e:	4b03      	ldr	r3, [pc, #12]	; (800054c <SystemInit+0x60>)
 8000540:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000544:	609a      	str	r2, [r3, #8]
#endif
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	40023800 	.word	0x40023800
 8000554:	24003010 	.word	0x24003010

08000558 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000566:	4a36      	ldr	r2, [pc, #216]	; (8000640 <SetSysClock+0xe8>)
 8000568:	4b35      	ldr	r3, [pc, #212]	; (8000640 <SetSysClock+0xe8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000570:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <SetSysClock+0xe8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d103      	bne.n	8000590 <SetSysClock+0x38>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800058e:	d1f0      	bne.n	8000572 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000590:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <SetSysClock+0xe8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800059c:	2301      	movs	r3, #1
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	e001      	b.n	80005a6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d142      	bne.n	8000632 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005ac:	4a24      	ldr	r2, [pc, #144]	; (8000640 <SetSysClock+0xe8>)
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <SetSysClock+0xe8>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <SetSysClock+0xec>)
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SetSysClock+0xec>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <SetSysClock+0xe8>)
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <SetSysClock+0xe8>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005cc:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <SetSysClock+0xe8>)
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SetSysClock+0xe8>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <SetSysClock+0xe8>)
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SetSysClock+0xe8>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005e2:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <SetSysClock+0xe8>)
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <SetSysClock+0xf0>)
 80005e8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <SetSysClock+0xe8>)
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <SetSysClock+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005f6:	bf00      	nop
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <SetSysClock+0xe8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f9      	beq.n	80005f8 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <SetSysClock+0xf4>)
 8000606:	f240 7205 	movw	r2, #1797	; 0x705
 800060a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <SetSysClock+0xe8>)
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <SetSysClock+0xe8>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	f023 0303 	bic.w	r3, r3, #3
 8000616:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000618:	4a09      	ldr	r2, [pc, #36]	; (8000640 <SetSysClock+0xe8>)
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <SetSysClock+0xe8>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000624:	bf00      	nop
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <SetSysClock+0xe8>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 030c 	and.w	r3, r3, #12
 800062e:	2b08      	cmp	r3, #8
 8000630:	d1f9      	bne.n	8000626 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000
 8000648:	07405a19 	.word	0x07405a19
 800064c:	40023c00 	.word	0x40023c00

08000650 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000650:	b480      	push	{r7}
 8000652:	b087      	sub	sp, #28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e076      	b.n	800075a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800066c:	2201      	movs	r2, #1
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	429a      	cmp	r2, r3
 8000686:	d165      	bne.n	8000754 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	2103      	movs	r1, #3
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	401a      	ands	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	4619      	mov	r1, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	431a      	orrs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d003      	beq.n	80006c6 <GPIO_Init+0x76>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d12e      	bne.n	8000724 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	2103      	movs	r1, #3
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	43db      	mvns	r3, r3
 80006d6:	401a      	ands	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	4619      	mov	r1, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	431a      	orrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	2301      	movs	r3, #1
 8000700:	408b      	lsls	r3, r1
 8000702:	43db      	mvns	r3, r3
 8000704:	401a      	ands	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	7992      	ldrb	r2, [r2, #6]
 8000712:	4611      	mov	r1, r2
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	b292      	uxth	r2, r2
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	b292      	uxth	r2, r2
 800071e:	431a      	orrs	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68da      	ldr	r2, [r3, #12]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	b29b      	uxth	r3, r3
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	2103      	movs	r1, #3
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	401a      	ands	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	4619      	mov	r1, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	431a      	orrs	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d985      	bls.n	800066c <GPIO_Init+0x1c>
    }
  }
}
 8000760:	bf00      	nop
 8000762:	371c      	adds	r7, #28
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
 8000778:	4613      	mov	r3, r2
 800077a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000784:	787a      	ldrb	r2, [r7, #1]
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	b29b      	uxth	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3208      	adds	r2, #8
 80007a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ac:	887b      	ldrh	r3, [r7, #2]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	210f      	movs	r1, #15
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	ea02 0103 	and.w	r1, r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f100 0208 	add.w	r2, r0, #8
 80007c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3208      	adds	r2, #8
 80007d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	4313      	orrs	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3208      	adds	r2, #8
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	2302      	movs	r3, #2
 800081e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000820:	4b47      	ldr	r3, [pc, #284]	; (8000940 <RCC_GetClocksFreq+0x140>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	f003 030c 	and.w	r3, r3, #12
 8000828:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	2b04      	cmp	r3, #4
 800082e:	d007      	beq.n	8000840 <RCC_GetClocksFreq+0x40>
 8000830:	2b08      	cmp	r3, #8
 8000832:	d009      	beq.n	8000848 <RCC_GetClocksFreq+0x48>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d13d      	bne.n	80008b4 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a42      	ldr	r2, [pc, #264]	; (8000944 <RCC_GetClocksFreq+0x144>)
 800083c:	601a      	str	r2, [r3, #0]
      break;
 800083e:	e03d      	b.n	80008bc <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a41      	ldr	r2, [pc, #260]	; (8000948 <RCC_GetClocksFreq+0x148>)
 8000844:	601a      	str	r2, [r3, #0]
      break;
 8000846:	e039      	b.n	80008bc <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000848:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <RCC_GetClocksFreq+0x140>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	0d9b      	lsrs	r3, r3, #22
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000854:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <RCC_GetClocksFreq+0x140>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800085c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00c      	beq.n	800087e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000864:	4a38      	ldr	r2, [pc, #224]	; (8000948 <RCC_GetClocksFreq+0x148>)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	fbb2 f3f3 	udiv	r3, r2, r3
 800086c:	4a34      	ldr	r2, [pc, #208]	; (8000940 <RCC_GetClocksFreq+0x140>)
 800086e:	6852      	ldr	r2, [r2, #4]
 8000870:	0992      	lsrs	r2, r2, #6
 8000872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	e00b      	b.n	8000896 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800087e:	4a31      	ldr	r2, [pc, #196]	; (8000944 <RCC_GetClocksFreq+0x144>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <RCC_GetClocksFreq+0x140>)
 8000888:	6852      	ldr	r2, [r2, #4]
 800088a:	0992      	lsrs	r2, r2, #6
 800088c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <RCC_GetClocksFreq+0x140>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	3301      	adds	r3, #1
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
      break;
 80008b2:	e003      	b.n	80008bc <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <RCC_GetClocksFreq+0x144>)
 80008b8:	601a      	str	r2, [r3, #0]
      break;
 80008ba:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <RCC_GetClocksFreq+0x140>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008cc:	4a1f      	ldr	r2, [pc, #124]	; (800094c <RCC_GetClocksFreq+0x14c>)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	40da      	lsrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <RCC_GetClocksFreq+0x140>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80008ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	0a9b      	lsrs	r3, r3, #10
 80008f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <RCC_GetClocksFreq+0x14c>)
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	40da      	lsrs	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <RCC_GetClocksFreq+0x140>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000914:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	0b5b      	lsrs	r3, r3, #13
 800091a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <RCC_GetClocksFreq+0x14c>)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	40da      	lsrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	3724      	adds	r7, #36	; 0x24
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40023800 	.word	0x40023800
 8000944:	00f42400 	.word	0x00f42400
 8000948:	007a1200 	.word	0x007a1200
 800094c:	20000000 	.word	0x20000000

08000950 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000962:	490a      	ldr	r1, [pc, #40]	; (800098c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4313      	orrs	r3, r2
 800096c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800096e:	e006      	b.n	800097e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	43db      	mvns	r3, r3
 800097a:	4013      	ands	r3, r2
 800097c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d006      	beq.n	80009b0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009a2:	490a      	ldr	r1, [pc, #40]	; (80009cc <RCC_APB2PeriphClockCmd+0x3c>)
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <RCC_APB2PeriphClockCmd+0x3c>)
 80009a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80009ae:	e006      	b.n	80009be <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <RCC_APB2PeriphClockCmd+0x3c>)
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <RCC_APB2PeriphClockCmd+0x3c>)
 80009b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4013      	ands	r3, r2
 80009bc:	644b      	str	r3, [r1, #68]	; 0x44
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	8a1b      	ldrh	r3, [r3, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	88db      	ldrh	r3, [r3, #6]
 80009fe:	461a      	mov	r2, r3
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	4313      	orrs	r3, r2
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	899b      	ldrh	r3, [r3, #12]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a1c:	f023 030c 	bic.w	r3, r3, #12
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	889a      	ldrh	r2, [r3, #4]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	891b      	ldrh	r3, [r3, #8]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	8a9b      	ldrh	r3, [r3, #20]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	899b      	ldrh	r3, [r3, #12]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fec6 	bl	8000800 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <USART_Init+0x168>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d003      	beq.n	8000a84 <USART_Init+0xb4>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <USART_Init+0x16c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d102      	bne.n	8000a8a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	e001      	b.n	8000a8e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	899b      	ldrh	r3, [r3, #12]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da0c      	bge.n	8000ab4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a9a:	6a3a      	ldr	r2, [r7, #32]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009a      	lsls	r2, r3, #2
 8000aa4:	441a      	add	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e00b      	b.n	8000acc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000ab4:	6a3a      	ldr	r2, [r7, #32]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	009a      	lsls	r2, r3, #2
 8000abe:	441a      	add	r2, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <USART_Init+0x170>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	2264      	movs	r2, #100	; 0x64
 8000ae0:	fb02 f303 	mul.w	r3, r2, r3
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	899b      	ldrh	r3, [r3, #12]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da0c      	bge.n	8000b10 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	3332      	adds	r3, #50	; 0x32
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <USART_Init+0x170>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0e:	e00b      	b.n	8000b28 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	3332      	adds	r3, #50	; 0x32
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <USART_Init+0x170>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	095b      	lsrs	r3, r3, #5
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b24:	4313      	orrs	r3, r2
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	811a      	strh	r2, [r3, #8]
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40011400 	.word	0x40011400
 8000b40:	51eb851f 	.word	0x51eb851f

08000b44 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	899b      	ldrh	r3, [r3, #12]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000b66:	e007      	b.n	8000b78 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	899b      	ldrh	r3, [r3, #12]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	819a      	strh	r2, [r3, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	809a      	strh	r2, [r3, #4]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e001      	b.n	8000bd2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <__libc_init_array>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4e0d      	ldr	r6, [pc, #52]	; (8000c18 <__libc_init_array+0x38>)
 8000be4:	4c0d      	ldr	r4, [pc, #52]	; (8000c1c <__libc_init_array+0x3c>)
 8000be6:	1ba4      	subs	r4, r4, r6
 8000be8:	10a4      	asrs	r4, r4, #2
 8000bea:	2500      	movs	r5, #0
 8000bec:	42a5      	cmp	r5, r4
 8000bee:	d109      	bne.n	8000c04 <__libc_init_array+0x24>
 8000bf0:	4e0b      	ldr	r6, [pc, #44]	; (8000c20 <__libc_init_array+0x40>)
 8000bf2:	4c0c      	ldr	r4, [pc, #48]	; (8000c24 <__libc_init_array+0x44>)
 8000bf4:	f000 f818 	bl	8000c28 <_init>
 8000bf8:	1ba4      	subs	r4, r4, r6
 8000bfa:	10a4      	asrs	r4, r4, #2
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	d105      	bne.n	8000c0e <__libc_init_array+0x2e>
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c08:	4798      	blx	r3
 8000c0a:	3501      	adds	r5, #1
 8000c0c:	e7ee      	b.n	8000bec <__libc_init_array+0xc>
 8000c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c12:	4798      	blx	r3
 8000c14:	3501      	adds	r5, #1
 8000c16:	e7f2      	b.n	8000bfe <__libc_init_array+0x1e>
 8000c18:	08000c50 	.word	0x08000c50
 8000c1c:	08000c50 	.word	0x08000c50
 8000c20:	08000c50 	.word	0x08000c50
 8000c24:	08000c54 	.word	0x08000c54

08000c28 <_init>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	bf00      	nop
 8000c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2e:	bc08      	pop	{r3}
 8000c30:	469e      	mov	lr, r3
 8000c32:	4770      	bx	lr

08000c34 <_fini>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	bf00      	nop
 8000c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3a:	bc08      	pop	{r3}
 8000c3c:	469e      	mov	lr, r3
 8000c3e:	4770      	bx	lr
