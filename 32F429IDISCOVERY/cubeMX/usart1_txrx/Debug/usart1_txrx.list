
usart1_txrx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003794  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08003948  08003948  00013948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08003b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000074  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000250  20000250  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000311d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00008a4f  00000000  00000000  00023329  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a5a  00000000  00000000  0002bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000630  00000000  00000000  0002d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002de08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002d28  00000000  00000000  0002e590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002924  00000000  00000000  000312b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00033bdc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000017f0  00000000  00000000  00033c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800392c 	.word	0x0800392c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800392c 	.word	0x0800392c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b97a 	b.w	8000e2c <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	468c      	mov	ip, r1
 8000b56:	460d      	mov	r5, r1
 8000b58:	4604      	mov	r4, r0
 8000b5a:	9e08      	ldr	r6, [sp, #32]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d151      	bne.n	8000c04 <__udivmoddi4+0xb4>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4617      	mov	r7, r2
 8000b64:	d96d      	bls.n	8000c42 <__udivmoddi4+0xf2>
 8000b66:	fab2 fe82 	clz	lr, r2
 8000b6a:	f1be 0f00 	cmp.w	lr, #0
 8000b6e:	d00b      	beq.n	8000b88 <__udivmoddi4+0x38>
 8000b70:	f1ce 0c20 	rsb	ip, lr, #32
 8000b74:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b7c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b80:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b88:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b8c:	0c25      	lsrs	r5, r4, #16
 8000b8e:	fbbc f8fa 	udiv	r8, ip, sl
 8000b92:	fa1f f987 	uxth.w	r9, r7
 8000b96:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b9a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b9e:	fb08 f309 	mul.w	r3, r8, r9
 8000ba2:	42ab      	cmp	r3, r5
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x6c>
 8000ba6:	19ed      	adds	r5, r5, r7
 8000ba8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bac:	f080 8123 	bcs.w	8000df6 <__udivmoddi4+0x2a6>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	f240 8120 	bls.w	8000df6 <__udivmoddi4+0x2a6>
 8000bb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bba:	443d      	add	r5, r7
 8000bbc:	1aed      	subs	r5, r5, r3
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bc4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb00 f909 	mul.w	r9, r0, r9
 8000bd0:	45a1      	cmp	r9, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x98>
 8000bd4:	19e4      	adds	r4, r4, r7
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 810a 	bcs.w	8000df2 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8107 	bls.w	8000df2 <__udivmoddi4+0x2a2>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	eba4 0409 	sub.w	r4, r4, r9
 8000bec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d061      	beq.n	8000cba <__udivmoddi4+0x16a>
 8000bf6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6034      	str	r4, [r6, #0]
 8000bfe:	6073      	str	r3, [r6, #4]
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xc8>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d054      	beq.n	8000cb6 <__udivmoddi4+0x166>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	f040 808e 	bne.w	8000d3e <__udivmoddi4+0x1ee>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xdc>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2d0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb65 0503 	sbc.w	r5, r5, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	46ac      	mov	ip, r5
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d03f      	beq.n	8000cba <__udivmoddi4+0x16a>
 8000c3a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b912      	cbnz	r2, 8000c4a <__udivmoddi4+0xfa>
 8000c44:	2701      	movs	r7, #1
 8000c46:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c4a:	fab7 fe87 	clz	lr, r7
 8000c4e:	f1be 0f00 	cmp.w	lr, #0
 8000c52:	d134      	bne.n	8000cbe <__udivmoddi4+0x16e>
 8000c54:	1beb      	subs	r3, r5, r7
 8000c56:	0c3a      	lsrs	r2, r7, #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c62:	0c25      	lsrs	r5, r4, #16
 8000c64:	fb02 3318 	mls	r3, r2, r8, r3
 8000c68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c6c:	fb0c f308 	mul.w	r3, ip, r8
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x134>
 8000c74:	19ed      	adds	r5, r5, r7
 8000c76:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x132>
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	f200 80d1 	bhi.w	8000e24 <__udivmoddi4+0x2d4>
 8000c82:	4680      	mov	r8, r0
 8000c84:	1aed      	subs	r5, r5, r3
 8000c86:	b2a3      	uxth	r3, r4
 8000c88:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c8c:	fb02 5510 	mls	r5, r2, r0, r5
 8000c90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c94:	fb0c fc00 	mul.w	ip, ip, r0
 8000c98:	45a4      	cmp	ip, r4
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x15c>
 8000c9c:	19e4      	adds	r4, r4, r7
 8000c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x15a>
 8000ca4:	45a4      	cmp	ip, r4
 8000ca6:	f200 80b8 	bhi.w	8000e1a <__udivmoddi4+0x2ca>
 8000caa:	4618      	mov	r0, r3
 8000cac:	eba4 040c 	sub.w	r4, r4, ip
 8000cb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb4:	e79d      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	f1ce 0420 	rsb	r4, lr, #32
 8000cc2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cca:	fa20 f804 	lsr.w	r8, r0, r4
 8000cce:	0c3a      	lsrs	r2, r7, #16
 8000cd0:	fa25 f404 	lsr.w	r4, r5, r4
 8000cd4:	ea48 0803 	orr.w	r8, r8, r3
 8000cd8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cdc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ce0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ce4:	fa1f fc87 	uxth.w	ip, r7
 8000ce8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cec:	fb01 f30c 	mul.w	r3, r1, ip
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1bc>
 8000cf8:	19ed      	adds	r5, r5, r7
 8000cfa:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfe:	f080 808a 	bcs.w	8000e16 <__udivmoddi4+0x2c6>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	f240 8087 	bls.w	8000e16 <__udivmoddi4+0x2c6>
 8000d08:	3902      	subs	r1, #2
 8000d0a:	443d      	add	r5, r7
 8000d0c:	1aeb      	subs	r3, r5, r3
 8000d0e:	fa1f f588 	uxth.w	r5, r8
 8000d12:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d16:	fb02 3310 	mls	r3, r2, r0, r3
 8000d1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d1e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x1e6>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2c:	d26f      	bcs.n	8000e0e <__udivmoddi4+0x2be>
 8000d2e:	42ab      	cmp	r3, r5
 8000d30:	d96d      	bls.n	8000e0e <__udivmoddi4+0x2be>
 8000d32:	3802      	subs	r0, #2
 8000d34:	443d      	add	r5, r7
 8000d36:	1aeb      	subs	r3, r5, r3
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	e78f      	b.n	8000c5e <__udivmoddi4+0x10e>
 8000d3e:	f1c1 0720 	rsb	r7, r1, #32
 8000d42:	fa22 f807 	lsr.w	r8, r2, r7
 8000d46:	408b      	lsls	r3, r1
 8000d48:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4c:	ea48 0303 	orr.w	r3, r8, r3
 8000d50:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d5e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d62:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d66:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d6a:	fa1f f883 	uxth.w	r8, r3
 8000d6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d72:	fb09 f408 	mul.w	r4, r9, r8
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x244>
 8000d82:	18ed      	adds	r5, r5, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d243      	bcs.n	8000e12 <__udivmoddi4+0x2c2>
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	d941      	bls.n	8000e12 <__udivmoddi4+0x2c2>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	441d      	add	r5, r3
 8000d94:	1b2d      	subs	r5, r5, r4
 8000d96:	fa1f fe8e 	uxth.w	lr, lr
 8000d9a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d9e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000da2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45a0      	cmp	r8, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x26e>
 8000dae:	18e4      	adds	r4, r4, r3
 8000db0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000db4:	d229      	bcs.n	8000e0a <__udivmoddi4+0x2ba>
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	d927      	bls.n	8000e0a <__udivmoddi4+0x2ba>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	441c      	add	r4, r3
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba4 0408 	sub.w	r4, r4, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454c      	cmp	r4, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	464d      	mov	r5, r9
 8000dd0:	d315      	bcc.n	8000dfe <__udivmoddi4+0x2ae>
 8000dd2:	d012      	beq.n	8000dfa <__udivmoddi4+0x2aa>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x29c>
 8000dd6:	ebba 030e 	subs.w	r3, sl, lr
 8000dda:	eb64 0405 	sbc.w	r4, r4, r5
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	6037      	str	r7, [r6, #0]
 8000dea:	6074      	str	r4, [r6, #4]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	4618      	mov	r0, r3
 8000df4:	e6f8      	b.n	8000be8 <__udivmoddi4+0x98>
 8000df6:	4690      	mov	r8, r2
 8000df8:	e6e0      	b.n	8000bbc <__udivmoddi4+0x6c>
 8000dfa:	45c2      	cmp	sl, r8
 8000dfc:	d2ea      	bcs.n	8000dd4 <__udivmoddi4+0x284>
 8000dfe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e02:	eb69 0503 	sbc.w	r5, r9, r3
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7e4      	b.n	8000dd4 <__udivmoddi4+0x284>
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	e7d7      	b.n	8000dbe <__udivmoddi4+0x26e>
 8000e0e:	4640      	mov	r0, r8
 8000e10:	e791      	b.n	8000d36 <__udivmoddi4+0x1e6>
 8000e12:	4681      	mov	r9, r0
 8000e14:	e7be      	b.n	8000d94 <__udivmoddi4+0x244>
 8000e16:	4601      	mov	r1, r0
 8000e18:	e778      	b.n	8000d0c <__udivmoddi4+0x1bc>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	e745      	b.n	8000cac <__udivmoddi4+0x15c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xe6>
 8000e24:	f1a8 0802 	sub.w	r8, r8, #2
 8000e28:	443d      	add	r5, r7
 8000e2a:	e72b      	b.n	8000c84 <__udivmoddi4+0x134>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
  ldr  r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5a:	f000 f949 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f001 f801 	bl	8001e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f000 f86d 	bl	8000f40 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e68:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e6c:	08003b98 	.word	0x08003b98
  ldr  r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e74:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000e78:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000e7c:	20000250 	.word	0x20000250

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_UART_RxCpltCallback>:

	return len;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e84:	b508      	push	{r3, lr}
	// printf("%c\r\n", g_u8Data);
	switch(g_u8Data) {
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b30      	cmp	r3, #48	; 0x30
 8000e8c:	d008      	beq.n	8000ea0 <HAL_UART_RxCpltCallback+0x1c>
 8000e8e:	2b31      	cmp	r3, #49	; 0x31
 8000e90:	d00d      	beq.n	8000eae <HAL_UART_RxCpltCallback+0x2a>
		break;
	case '1':
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
	}
	HAL_UART_Receive_IT(&huart1, &g_u8Data, sizeof(uint8_t));
 8000e92:	2201      	movs	r2, #1
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30>)
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <HAL_UART_RxCpltCallback+0x34>)
}
 8000e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1, &g_u8Data, sizeof(uint8_t));
 8000e9c:	f000 becc 	b.w	8001c38 <HAL_UART_Receive_IT>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_UART_RxCpltCallback+0x38>)
 8000ea8:	f000 fb00 	bl	80014ac <HAL_GPIO_WritePin>
		break;
 8000eac:	e7f1      	b.n	8000e92 <HAL_UART_RxCpltCallback+0xe>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	e7f7      	b.n	8000ea2 <HAL_UART_RxCpltCallback+0x1e>
 8000eb2:	bf00      	nop
 8000eb4:	20000244 	.word	0x20000244
 8000eb8:	20000204 	.word	0x20000204
 8000ebc:	40021800 	.word	0x40021800

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec4:	2230      	movs	r2, #48	; 0x30
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	a808      	add	r0, sp, #32
 8000eca:	f000 ffef 	bl	8001eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2214      	movs	r2, #20
 8000ed2:	a803      	add	r0, sp, #12
 8000ed4:	f000 ffea 	bl	8001eac <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	2400      	movs	r4, #0
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SystemClock_Config+0x78>)
 8000edc:	9401      	str	r4, [sp, #4]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef2:	9402      	str	r4, [sp, #8]
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f02:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	2310      	movs	r3, #16
 8000f18:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f000 facd 	bl	80014b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f20:	4621      	mov	r1, r4
 8000f22:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f26:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f2e:	f000 fc73 	bl	8001818 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f32:	b014      	add	sp, #80	; 0x50
 8000f34:	bd10      	pop	{r4, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <main>:
{
 8000f40:	b500      	push	{lr}
 8000f42:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000f44:	f000 f91e 	bl	8001184 <HAL_Init>
  SystemClock_Config();
 8000f48:	f7ff ffba 	bl	8000ec0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	2214      	movs	r2, #20
 8000f4e:	2100      	movs	r1, #0
 8000f50:	a803      	add	r0, sp, #12
 8000f52:	f000 ffab 	bl	8001eac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2500      	movs	r5, #0
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <main+0x90>)
 8000f5a:	9501      	str	r5, [sp, #4]
 8000f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f5e:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <main+0x94>)
  huart1.Instance = USART1;
 8000f60:	4c1d      	ldr	r4, [pc, #116]	; (8000fd8 <main+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
 8000f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f6a:	f002 0201 	and.w	r2, r2, #1
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f72:	9502      	str	r5, [sp, #8]
 8000f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f82:	462a      	mov	r2, r5
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f8e:	f000 fa8d 	bl	80014ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	a903      	add	r1, sp, #12
 8000f98:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <main+0x94>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f9a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa2:	f000 f997 	bl	80012d4 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <main+0x9c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa8:	60a5      	str	r5, [r4, #8]
  huart1.Init.BaudRate = 115200;
 8000faa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fae:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb2:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb6:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb8:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fba:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbc:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbe:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc0:	f000 fe0c 	bl	8001bdc <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, &g_u8Data, sizeof(uint8_t));
 8000fc4:	4632      	mov	r2, r6
 8000fc6:	4906      	ldr	r1, [pc, #24]	; (8000fe0 <main+0xa0>)
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f000 fe35 	bl	8001c38 <HAL_UART_Receive_IT>
 8000fce:	e7fe      	b.n	8000fce <main+0x8e>
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	20000204 	.word	0x20000204
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	20000244 	.word	0x20000244

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x34>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	9100      	str	r1, [sp, #0]
 8000fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ff6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ffa:	9200      	str	r2, [sp, #0]
 8000ffc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	9101      	str	r1, [sp, #4]
 8001000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	b002      	add	sp, #8
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b510      	push	{r4, lr}
 800101e:	4604      	mov	r4, r0
 8001020:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	2214      	movs	r2, #20
 8001024:	2100      	movs	r1, #0
 8001026:	a803      	add	r0, sp, #12
 8001028:	f000 ff40 	bl	8001eac <memset>
  if(huart->Instance==USART1)
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_UART_MspInit+0x78>)
 8001030:	429a      	cmp	r2, r3
 8001032:	d12d      	bne.n	8001090 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001034:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001038:	2400      	movs	r4, #0
 800103a:	9401      	str	r4, [sp, #4]
 800103c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001040:	f042 0210 	orr.w	r2, r2, #16
 8001044:	645a      	str	r2, [r3, #68]	; 0x44
 8001046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001048:	f002 0210 	and.w	r2, r2, #16
 800104c:	9201      	str	r2, [sp, #4]
 800104e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	9402      	str	r4, [sp, #8]
 8001052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	631a      	str	r2, [r3, #48]	; 0x30
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001064:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001068:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106e:	2301      	movs	r3, #1
 8001070:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001078:	2307      	movs	r3, #7
 800107a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f000 f92a 	bl	80012d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001080:	2025      	movs	r0, #37	; 0x25
 8001082:	4622      	mov	r2, r4
 8001084:	4621      	mov	r1, r4
 8001086:	f000 f8bb 	bl	8001200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108a:	2025      	movs	r0, #37	; 0x25
 800108c:	f000 f8ec 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001090:	b008      	add	sp, #32
 8001092:	bd10      	pop	{r4, pc}
 8001094:	40011000 	.word	0x40011000
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
 800109c:	4770      	bx	lr

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	e7fe      	b.n	800109e <HardFault_Handler>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler>

080010a6 <SVC_Handler>:
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 b884 	b.w	80011b8 <HAL_IncTick>

080010b0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <USART1_IRQHandler+0x8>)
 80010b2:	f000 be29 	b.w	8001d08 <HAL_UART_IRQHandler>
 80010b6:	bf00      	nop
 80010b8:	20000204 	.word	0x20000204

080010bc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80010bc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <_sbrk+0x2c>)
 80010c0:	6819      	ldr	r1, [r3, #0]
{
 80010c2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80010c4:	b909      	cbnz	r1, 80010ca <_sbrk+0xe>
		heap_end = &end;
 80010c6:	4909      	ldr	r1, [pc, #36]	; (80010ec <_sbrk+0x30>)
 80010c8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80010ca:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80010cc:	4669      	mov	r1, sp
 80010ce:	4402      	add	r2, r0
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d906      	bls.n	80010e2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80010d4:	f000 fec0 	bl	8001e58 <__errno>
 80010d8:	230c      	movs	r3, #12
 80010da:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80010e2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80010e4:	bd08      	pop	{r3, pc}
 80010e6:	bf00      	nop
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	20000250 	.word	0x20000250

080010f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	490f      	ldr	r1, [pc, #60]	; (8001130 <SystemInit+0x40>)
 80010f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <SystemInit+0x44>)
 8001100:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001102:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800110a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001112:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001116:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <SystemInit+0x48>)
 800111a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001122:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001124:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800112a:	608b      	str	r3, [r1, #8]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	40023800 	.word	0x40023800
 8001138:	24003010 	.word	0x24003010

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_InitTick+0x3c>)
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_InitTick+0x40>)
{
 8001142:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	7818      	ldrb	r0, [r3, #0]
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f0 	udiv	r3, r3, r0
 800114e:	6810      	ldr	r0, [r2, #0]
 8001150:	fbb0 f0f3 	udiv	r0, r0, r3
 8001154:	f000 f896 	bl	8001284 <HAL_SYSTICK_Config>
 8001158:	4604      	mov	r4, r0
 800115a:	b958      	cbnz	r0, 8001174 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	2d0f      	cmp	r5, #15
 800115e:	d809      	bhi.n	8001174 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	4602      	mov	r2, r0
 8001162:	4629      	mov	r1, r5
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f84a 	bl	8001200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_InitTick+0x44>)
 800116e:	4620      	mov	r0, r4
 8001170:	601d      	str	r5, [r3, #0]
 8001172:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_Init>:
{
 8001184:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x30>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001196:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800119e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f81b 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ffc8 	bl	800113c <HAL_InitTick>
  HAL_MspInit();
 80011ac:	f7ff ff1a 	bl	8000fe4 <HAL_MspInit>
}
 80011b0:	2000      	movs	r0, #0
 80011b2:	bd08      	pop	{r3, pc}
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x10>)
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_IncTick+0x14>)
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	440b      	add	r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000248 	.word	0x20000248
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011d0:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <HAL_GetTick+0x8>)
 80011d2:	6818      	ldr	r0, [r3, #0]
}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000248 	.word	0x20000248

080011dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	0200      	lsls	r0, r0, #8
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80011f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011f8:	60d3      	str	r3, [r2, #12]
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b530      	push	{r4, r5, lr}
 8001204:	68dc      	ldr	r4, [r3, #12]
 8001206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	2b04      	cmp	r3, #4
 8001212:	bf28      	it	cs
 8001214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 0501 	mov.w	r5, #1
 800121c:	fa05 f303 	lsl.w	r3, r5, r3
 8001220:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001224:	bf8c      	ite	hi
 8001226:	3c03      	subhi	r4, #3
 8001228:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122a:	4019      	ands	r1, r3
 800122c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122e:	fa05 f404 	lsl.w	r4, r5, r4
 8001232:	3c01      	subs	r4, #1
 8001234:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001236:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	ea42 0201 	orr.w	r2, r2, r1
 800123c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	bfad      	iteet	ge
 8001242:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	f000 000f 	andlt.w	r0, r0, #15
 800124a:	4b06      	ldrlt	r3, [pc, #24]	; (8001264 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	bfb5      	itete	lt
 8001252:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800125c:	bd30      	pop	{r4, r5, pc}
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	e000ed14 	.word	0xe000ed14

08001268 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001268:	2800      	cmp	r0, #0
 800126a:	db08      	blt.n	800127e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126c:	0942      	lsrs	r2, r0, #5
 800126e:	2301      	movs	r3, #1
 8001270:	f000 001f 	and.w	r0, r0, #31
 8001274:	fa03 f000 	lsl.w	r0, r3, r0
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <HAL_NVIC_EnableIRQ+0x18>)
 800127a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100

08001284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	3801      	subs	r0, #1
 8001286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800128a:	d20a      	bcs.n	80012a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001290:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	21f0      	movs	r1, #240	; 0xf0
 8001294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d003      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80012bc:	2001      	movs	r0, #1
 80012be:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80012c2:	2305      	movs	r3, #5
 80012c4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80012c8:	6813      	ldr	r3, [r2, #0]
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80012d0:	2000      	movs	r0, #0
}
 80012d2:	4770      	bx	lr

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80014a4 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e0:	4a6e      	ldr	r2, [pc, #440]	; (800149c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80014a8 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80012ea:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80012f0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80012f8:	45b6      	cmp	lr, r6
 80012fa:	f040 80b6 	bne.w	800146a <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fe:	684c      	ldr	r4, [r1, #4]
 8001300:	f024 0710 	bic.w	r7, r4, #16
 8001304:	2f02      	cmp	r7, #2
 8001306:	d116      	bne.n	8001336 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001308:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800130c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001310:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001314:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001318:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800131c:	f04f 0c0f 	mov.w	ip, #15
 8001320:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001324:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	690d      	ldr	r5, [r1, #16]
 800132a:	fa05 f50b 	lsl.w	r5, r5, fp
 800132e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001332:	f8ca 5020 	str.w	r5, [sl, #32]
 8001336:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800133c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001340:	fa05 f50a 	lsl.w	r5, r5, sl
 8001344:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001346:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001352:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001358:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800135a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800135e:	d811      	bhi.n	8001384 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001360:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001362:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001366:	68cf      	ldr	r7, [r1, #12]
 8001368:	fa07 fc0a 	lsl.w	ip, r7, sl
 800136c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001370:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001372:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001378:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800137c:	409f      	lsls	r7, r3
 800137e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001382:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001384:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001388:	688f      	ldr	r7, [r1, #8]
 800138a:	fa07 f70a 	lsl.w	r7, r7, sl
 800138e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001390:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	00e5      	lsls	r5, r4, #3
 8001394:	d569      	bpl.n	800146a <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	f04f 0b00 	mov.w	fp, #0
 800139a:	f8cd b00c 	str.w	fp, [sp, #12]
 800139e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	4d3f      	ldr	r5, [pc, #252]	; (80014a0 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80013a8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80013ac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80013b0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80013b4:	9703      	str	r7, [sp, #12]
 80013b6:	9f03      	ldr	r7, [sp, #12]
 80013b8:	f023 0703 	bic.w	r7, r3, #3
 80013bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013c0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80013c8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013d0:	f04f 0e0f 	mov.w	lr, #15
 80013d4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013da:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	d04b      	beq.n	8001478 <HAL_GPIO_Init+0x1a4>
 80013e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013e4:	42a8      	cmp	r0, r5
 80013e6:	d049      	beq.n	800147c <HAL_GPIO_Init+0x1a8>
 80013e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ec:	42a8      	cmp	r0, r5
 80013ee:	d047      	beq.n	8001480 <HAL_GPIO_Init+0x1ac>
 80013f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f4:	42a8      	cmp	r0, r5
 80013f6:	d045      	beq.n	8001484 <HAL_GPIO_Init+0x1b0>
 80013f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013fc:	42a8      	cmp	r0, r5
 80013fe:	d043      	beq.n	8001488 <HAL_GPIO_Init+0x1b4>
 8001400:	4548      	cmp	r0, r9
 8001402:	d043      	beq.n	800148c <HAL_GPIO_Init+0x1b8>
 8001404:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001408:	42a8      	cmp	r0, r5
 800140a:	d041      	beq.n	8001490 <HAL_GPIO_Init+0x1bc>
 800140c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001410:	42a8      	cmp	r0, r5
 8001412:	d03f      	beq.n	8001494 <HAL_GPIO_Init+0x1c0>
 8001414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001418:	42a8      	cmp	r0, r5
 800141a:	d03d      	beq.n	8001498 <HAL_GPIO_Init+0x1c4>
 800141c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001420:	42a8      	cmp	r0, r5
 8001422:	bf14      	ite	ne
 8001424:	250a      	movne	r5, #10
 8001426:	2509      	moveq	r5, #9
 8001428:	fa05 f50c 	lsl.w	r5, r5, ip
 800142c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001432:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001434:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001436:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800143a:	bf0c      	ite	eq
 800143c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800143e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001440:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001442:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001444:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001448:	bf0c      	ite	eq
 800144a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800144c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800144e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001450:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001452:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001456:	bf0c      	ite	eq
 8001458:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800145a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800145c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800145e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001462:	bf54      	ite	pl
 8001464:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001466:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001468:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	3301      	adds	r3, #1
 800146c:	2b10      	cmp	r3, #16
 800146e:	f47f af3c 	bne.w	80012ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001472:	b005      	add	sp, #20
 8001474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001478:	465d      	mov	r5, fp
 800147a:	e7d5      	b.n	8001428 <HAL_GPIO_Init+0x154>
 800147c:	2501      	movs	r5, #1
 800147e:	e7d3      	b.n	8001428 <HAL_GPIO_Init+0x154>
 8001480:	2502      	movs	r5, #2
 8001482:	e7d1      	b.n	8001428 <HAL_GPIO_Init+0x154>
 8001484:	2503      	movs	r5, #3
 8001486:	e7cf      	b.n	8001428 <HAL_GPIO_Init+0x154>
 8001488:	2504      	movs	r5, #4
 800148a:	e7cd      	b.n	8001428 <HAL_GPIO_Init+0x154>
 800148c:	2505      	movs	r5, #5
 800148e:	e7cb      	b.n	8001428 <HAL_GPIO_Init+0x154>
 8001490:	2506      	movs	r5, #6
 8001492:	e7c9      	b.n	8001428 <HAL_GPIO_Init+0x154>
 8001494:	2507      	movs	r5, #7
 8001496:	e7c7      	b.n	8001428 <HAL_GPIO_Init+0x154>
 8001498:	2508      	movs	r5, #8
 800149a:	e7c5      	b.n	8001428 <HAL_GPIO_Init+0x154>
 800149c:	40013c00 	.word	0x40013c00
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021400 	.word	0x40021400

080014ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	b10a      	cbz	r2, 80014b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	6181      	str	r1, [r0, #24]
 80014b0:	4770      	bx	lr
 80014b2:	0409      	lsls	r1, r1, #16
 80014b4:	e7fb      	b.n	80014ae <HAL_GPIO_WritePin+0x2>
	...

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	4604      	mov	r4, r0
 80014be:	b918      	cbnz	r0, 80014c8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80014c0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80014c2:	b002      	add	sp, #8
 80014c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c8:	6803      	ldr	r3, [r0, #0]
 80014ca:	07dd      	lsls	r5, r3, #31
 80014cc:	d410      	bmi.n	80014f0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	0798      	lsls	r0, r3, #30
 80014d2:	d458      	bmi.n	8001586 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	071a      	lsls	r2, r3, #28
 80014d8:	f100 809a 	bmi.w	8001610 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	075b      	lsls	r3, r3, #29
 80014e0:	f100 80b8 	bmi.w	8001654 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	69a2      	ldr	r2, [r4, #24]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	f040 8119 	bne.w	800171e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
 80014ee:	e7e8      	b.n	80014c2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f0:	4ba6      	ldr	r3, [pc, #664]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	f002 020c 	and.w	r2, r2, #12
 80014f8:	2a04      	cmp	r2, #4
 80014fa:	d007      	beq.n	800150c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001502:	2a08      	cmp	r2, #8
 8001504:	d10a      	bne.n	800151c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	0259      	lsls	r1, r3, #9
 800150a:	d507      	bpl.n	800151c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b9f      	ldr	r3, [pc, #636]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	039a      	lsls	r2, r3, #14
 8001512:	d5dc      	bpl.n	80014ce <HAL_RCC_OscConfig+0x16>
 8001514:	6863      	ldr	r3, [r4, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1d9      	bne.n	80014ce <HAL_RCC_OscConfig+0x16>
 800151a:	e7d1      	b.n	80014c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	6863      	ldr	r3, [r4, #4]
 800151e:	4d9b      	ldr	r5, [pc, #620]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d111      	bne.n	800154a <HAL_RCC_OscConfig+0x92>
 8001526:	682b      	ldr	r3, [r5, #0]
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800152e:	f7ff fe4f 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4d96      	ldr	r5, [pc, #600]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001534:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	039b      	lsls	r3, r3, #14
 800153a:	d4c8      	bmi.n	80014ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fe48 	bl	80011d0 <HAL_GetTick>
 8001540:	1b80      	subs	r0, r0, r6
 8001542:	2864      	cmp	r0, #100	; 0x64
 8001544:	d9f7      	bls.n	8001536 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
 8001548:	e7bb      	b.n	80014c2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154e:	d104      	bne.n	800155a <HAL_RCC_OscConfig+0xa2>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001556:	602b      	str	r3, [r5, #0]
 8001558:	e7e5      	b.n	8001526 <HAL_RCC_OscConfig+0x6e>
 800155a:	682a      	ldr	r2, [r5, #0]
 800155c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001560:	602a      	str	r2, [r5, #0]
 8001562:	682a      	ldr	r2, [r5, #0]
 8001564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001568:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1df      	bne.n	800152e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800156e:	f7ff fe2f 	bl	80011d0 <HAL_GetTick>
 8001572:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	039f      	lsls	r7, r3, #14
 8001578:	d5a9      	bpl.n	80014ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fe29 	bl	80011d0 <HAL_GetTick>
 800157e:	1b80      	subs	r0, r0, r6
 8001580:	2864      	cmp	r0, #100	; 0x64
 8001582:	d9f7      	bls.n	8001574 <HAL_RCC_OscConfig+0xbc>
 8001584:	e7df      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	f012 0f0c 	tst.w	r2, #12
 800158e:	d007      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001596:	2a08      	cmp	r2, #8
 8001598:	d111      	bne.n	80015be <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	025e      	lsls	r6, r3, #9
 800159e:	d40e      	bmi.n	80015be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a0:	4b7a      	ldr	r3, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	0795      	lsls	r5, r2, #30
 80015a6:	d502      	bpl.n	80015ae <HAL_RCC_OscConfig+0xf6>
 80015a8:	68e2      	ldr	r2, [r4, #12]
 80015aa:	2a01      	cmp	r2, #1
 80015ac:	d188      	bne.n	80014c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	6921      	ldr	r1, [r4, #16]
 80015b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80015ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015bc:	e78a      	b.n	80014d4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015be:	68e2      	ldr	r2, [r4, #12]
 80015c0:	4b73      	ldr	r3, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x2d8>)
 80015c2:	b1b2      	cbz	r2, 80015f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015c8:	f7ff fe02 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4d6f      	ldr	r5, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80015ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	0798      	lsls	r0, r3, #30
 80015d4:	d507      	bpl.n	80015e6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	6922      	ldr	r2, [r4, #16]
 80015da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015e2:	602b      	str	r3, [r5, #0]
 80015e4:	e776      	b.n	80014d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fdf3 	bl	80011d0 <HAL_GetTick>
 80015ea:	1b80      	subs	r0, r0, r6
 80015ec:	2802      	cmp	r0, #2
 80015ee:	d9ef      	bls.n	80015d0 <HAL_RCC_OscConfig+0x118>
 80015f0:	e7a9      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80015f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015f4:	f7ff fdec 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f8:	4d64      	ldr	r5, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80015fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	0799      	lsls	r1, r3, #30
 8001600:	f57f af68 	bpl.w	80014d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fde4 	bl	80011d0 <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	2802      	cmp	r0, #2
 800160c:	d9f6      	bls.n	80015fc <HAL_RCC_OscConfig+0x144>
 800160e:	e79a      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001610:	6962      	ldr	r2, [r4, #20]
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x2dc>)
 8001614:	b17a      	cbz	r2, 8001636 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800161a:	f7ff fdd9 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4d5b      	ldr	r5, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001620:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001624:	079f      	lsls	r7, r3, #30
 8001626:	f53f af59 	bmi.w	80014dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fdd1 	bl	80011d0 <HAL_GetTick>
 800162e:	1b80      	subs	r0, r0, r6
 8001630:	2802      	cmp	r0, #2
 8001632:	d9f6      	bls.n	8001622 <HAL_RCC_OscConfig+0x16a>
 8001634:	e787      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001636:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001638:	f7ff fdca 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4d53      	ldr	r5, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800163e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001642:	0798      	lsls	r0, r3, #30
 8001644:	f57f af4a 	bpl.w	80014dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fdc2 	bl	80011d0 <HAL_GetTick>
 800164c:	1b80      	subs	r0, r0, r6
 800164e:	2802      	cmp	r0, #2
 8001650:	d9f6      	bls.n	8001640 <HAL_RCC_OscConfig+0x188>
 8001652:	e778      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 8001656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001658:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800165c:	d128      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	9201      	str	r2, [sp, #4]
 8001660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001662:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001672:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4d48      	ldr	r5, [pc, #288]	; (8001798 <HAL_RCC_OscConfig+0x2e0>)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	05d9      	lsls	r1, r3, #23
 800167a:	d51b      	bpl.n	80016b4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	68a3      	ldr	r3, [r4, #8]
 800167e:	4d43      	ldr	r5, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 8001680:	2b01      	cmp	r3, #1
 8001682:	d127      	bne.n	80016d4 <HAL_RCC_OscConfig+0x21c>
 8001684:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800168c:	f7ff fda0 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4d3e      	ldr	r5, [pc, #248]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001692:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800169a:	079b      	lsls	r3, r3, #30
 800169c:	d539      	bpl.n	8001712 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800169e:	2e00      	cmp	r6, #0
 80016a0:	f43f af20 	beq.w	80014e4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	4a39      	ldr	r2, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 80016a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	e719      	b.n	80014e4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80016b0:	2600      	movs	r6, #0
 80016b2:	e7df      	b.n	8001674 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016bc:	f7ff fd88 	bl	80011d0 <HAL_GetTick>
 80016c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	682b      	ldr	r3, [r5, #0]
 80016c4:	05da      	lsls	r2, r3, #23
 80016c6:	d4d9      	bmi.n	800167c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff fd82 	bl	80011d0 <HAL_GetTick>
 80016cc:	1bc0      	subs	r0, r0, r7
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d9f7      	bls.n	80016c2 <HAL_RCC_OscConfig+0x20a>
 80016d2:	e738      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d104      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22a>
 80016d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	672b      	str	r3, [r5, #112]	; 0x70
 80016e0:	e7d0      	b.n	8001684 <HAL_RCC_OscConfig+0x1cc>
 80016e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	672a      	str	r2, [r5, #112]	; 0x70
 80016ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016ec:	f022 0204 	bic.w	r2, r2, #4
 80016f0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ca      	bne.n	800168c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80016f6:	f7ff fd6b 	bl	80011d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001702:	0798      	lsls	r0, r3, #30
 8001704:	d5cb      	bpl.n	800169e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fd63 	bl	80011d0 <HAL_GetTick>
 800170a:	1bc0      	subs	r0, r0, r7
 800170c:	4540      	cmp	r0, r8
 800170e:	d9f7      	bls.n	8001700 <HAL_RCC_OscConfig+0x248>
 8001710:	e719      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fd5d 	bl	80011d0 <HAL_GetTick>
 8001716:	1bc0      	subs	r0, r0, r7
 8001718:	4540      	cmp	r0, r8
 800171a:	d9bd      	bls.n	8001698 <HAL_RCC_OscConfig+0x1e0>
 800171c:	e713      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171e:	4d1b      	ldr	r5, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
 8001720:	68ab      	ldr	r3, [r5, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	f43f aeca 	beq.w	80014c0 <HAL_RCC_OscConfig+0x8>
 800172c:	4e1b      	ldr	r6, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x2e4>)
 800172e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001730:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001732:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001734:	d134      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001736:	f7ff fd4b 	bl	80011d0 <HAL_GetTick>
 800173a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	0199      	lsls	r1, r3, #6
 8001740:	d41e      	bmi.n	8001780 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001742:	6a22      	ldr	r2, [r4, #32]
 8001744:	69e3      	ldr	r3, [r4, #28]
 8001746:	4313      	orrs	r3, r2
 8001748:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800174a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800174e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001750:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001754:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4c0d      	ldr	r4, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001758:	0852      	lsrs	r2, r2, #1
 800175a:	3a01      	subs	r2, #1
 800175c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001760:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001762:	2301      	movs	r3, #1
 8001764:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001766:	f7ff fd33 	bl	80011d0 <HAL_GetTick>
 800176a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	019a      	lsls	r2, r3, #6
 8001770:	f53f aebc 	bmi.w	80014ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fd2c 	bl	80011d0 <HAL_GetTick>
 8001778:	1b40      	subs	r0, r0, r5
 800177a:	2802      	cmp	r0, #2
 800177c:	d9f6      	bls.n	800176c <HAL_RCC_OscConfig+0x2b4>
 800177e:	e6e2      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fd26 	bl	80011d0 <HAL_GetTick>
 8001784:	1bc0      	subs	r0, r0, r7
 8001786:	2802      	cmp	r0, #2
 8001788:	d9d8      	bls.n	800173c <HAL_RCC_OscConfig+0x284>
 800178a:	e6dc      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
 8001798:	40007000 	.word	0x40007000
 800179c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80017a0:	f7ff fd16 	bl	80011d0 <HAL_GetTick>
 80017a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	682b      	ldr	r3, [r5, #0]
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	f57f ae9f 	bpl.w	80014ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fd0f 	bl	80011d0 <HAL_GetTick>
 80017b2:	1b00      	subs	r0, r0, r4
 80017b4:	2802      	cmp	r0, #2
 80017b6:	d9f6      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2ee>
 80017b8:	e6c5      	b.n	8001546 <HAL_RCC_OscConfig+0x8e>
 80017ba:	bf00      	nop

080017bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4913      	ldr	r1, [pc, #76]	; (800180c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	688b      	ldr	r3, [r1, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x16>
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ce:	4810      	ldr	r0, [pc, #64]	; (8001810 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <HAL_RCC_GetSysClockFreq+0x58>)
 80017d4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017dc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e0:	bf14      	ite	ne
 80017e2:	480c      	ldrne	r0, [pc, #48]	; (8001814 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	480a      	ldreq	r0, [pc, #40]	; (8001810 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80017ea:	bf18      	it	ne
 80017ec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	fba1 0100 	umull	r0, r1, r1, r0
 80017f6:	f7ff f993 	bl	8000b20 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_GetSysClockFreq+0x50>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001802:	3301      	adds	r3, #1
 8001804:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001806:	fbb0 f0f3 	udiv	r0, r0, r3
 800180a:	bd08      	pop	{r3, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400
 8001814:	017d7840 	.word	0x017d7840

08001818 <HAL_RCC_ClockConfig>:
{
 8001818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800181c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800181e:	4604      	mov	r4, r0
 8001820:	b910      	cbnz	r0, 8001828 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001822:	2001      	movs	r0, #1
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_RCC_ClockConfig+0x124>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f002 020f 	and.w	r2, r2, #15
 8001830:	428a      	cmp	r2, r1
 8001832:	d328      	bcc.n	8001886 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	6821      	ldr	r1, [r4, #0]
 8001836:	078f      	lsls	r7, r1, #30
 8001838:	d42d      	bmi.n	8001896 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	07c8      	lsls	r0, r1, #31
 800183c:	d440      	bmi.n	80018c0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x124>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f002 020f 	and.w	r2, r2, #15
 8001846:	4295      	cmp	r5, r2
 8001848:	d366      	bcc.n	8001918 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	0751      	lsls	r1, r2, #29
 800184e:	d46c      	bmi.n	800192a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	0713      	lsls	r3, r2, #28
 8001852:	d507      	bpl.n	8001864 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001854:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 8001856:	6921      	ldr	r1, [r4, #16]
 8001858:	6893      	ldr	r3, [r2, #8]
 800185a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800185e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001862:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001864:	f7ff ffaa 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_RCC_ClockConfig+0x12c>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	40d8      	lsrs	r0, r3
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_ClockConfig+0x130>)
 8001878:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fc5e 	bl	800113c <HAL_InitTick>
  return HAL_OK;
 8001880:	2000      	movs	r0, #0
 8001882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	4299      	cmp	r1, r3
 8001892:	d1c6      	bne.n	8001822 <HAL_RCC_ClockConfig+0xa>
 8001894:	e7ce      	b.n	8001834 <HAL_RCC_ClockConfig+0x1c>
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	bf1e      	ittt	ne
 800189e:	689a      	ldrne	r2, [r3, #8]
 80018a0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80018a4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a8:	bf42      	ittt	mi
 80018aa:	689a      	ldrmi	r2, [r3, #8]
 80018ac:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80018b0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	68a0      	ldr	r0, [r4, #8]
 80018b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018ba:	4302      	orrs	r2, r0
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e7bc      	b.n	800183a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c0:	6862      	ldr	r2, [r4, #4]
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 80018c4:	2a01      	cmp	r2, #1
 80018c6:	d11d      	bne.n	8001904 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	d0a8      	beq.n	8001822 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d0:	4e1b      	ldr	r6, [pc, #108]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 80018d2:	68b3      	ldr	r3, [r6, #8]
 80018d4:	f023 0303 	bic.w	r3, r3, #3
 80018d8:	4313      	orrs	r3, r2
 80018da:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80018dc:	f7ff fc78 	bl	80011d0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80018e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	68b3      	ldr	r3, [r6, #8]
 80018e8:	6862      	ldr	r2, [r4, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018f2:	d0a4      	beq.n	800183e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7ff fc6c 	bl	80011d0 <HAL_GetTick>
 80018f8:	1bc0      	subs	r0, r0, r7
 80018fa:	4540      	cmp	r0, r8
 80018fc:	d9f3      	bls.n	80018e6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
}
 8001900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001904:	1e91      	subs	r1, r2, #2
 8001906:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001908:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	d802      	bhi.n	8001912 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001910:	e7dd      	b.n	80018ce <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	f013 0f02 	tst.w	r3, #2
 8001916:	e7da      	b.n	80018ce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001918:	b2ea      	uxtb	r2, r5
 800191a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	429d      	cmp	r5, r3
 8001924:	f47f af7d 	bne.w	8001822 <HAL_RCC_ClockConfig+0xa>
 8001928:	e78f      	b.n	800184a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192a:	4905      	ldr	r1, [pc, #20]	; (8001940 <HAL_RCC_ClockConfig+0x128>)
 800192c:	68e0      	ldr	r0, [r4, #12]
 800192e:	688b      	ldr	r3, [r1, #8]
 8001930:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001934:	4303      	orrs	r3, r0
 8001936:	608b      	str	r3, [r1, #8]
 8001938:	e78a      	b.n	8001850 <HAL_RCC_ClockConfig+0x38>
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	08003948 	.word	0x08003948
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x14>)
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800195a:	6810      	ldr	r0, [r2, #0]
}
 800195c:	40d8      	lsrs	r0, r3
 800195e:	4770      	bx	lr
 8001960:	40023800 	.word	0x40023800
 8001964:	08003958 	.word	0x08003958
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x14>)
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800197a:	6810      	ldr	r0, [r2, #0]
}
 800197c:	40d8      	lsrs	r0, r3
 800197e:	4770      	bx	lr
 8001980:	40023800 	.word	0x40023800
 8001984:	08003958 	.word	0x08003958
 8001988:	20000000 	.word	0x20000000

0800198c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800198c:	6803      	ldr	r3, [r0, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001994:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800199e:	2320      	movs	r3, #32
 80019a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80019a4:	4770      	bx	lr
	...

080019a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019ac:	6806      	ldr	r6, [r0, #0]
 80019ae:	68c2      	ldr	r2, [r0, #12]
 80019b0:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019b2:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b8:	4313      	orrs	r3, r2
 80019ba:	6133      	str	r3, [r6, #16]
{
 80019bc:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019be:	6883      	ldr	r3, [r0, #8]
 80019c0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80019c2:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019c4:	4303      	orrs	r3, r0
 80019c6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80019c8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019cc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80019ce:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019d2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019d8:	6973      	ldr	r3, [r6, #20]
 80019da:	69a2      	ldr	r2, [r4, #24]
 80019dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e6:	6173      	str	r3, [r6, #20]
 80019e8:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ea:	d17c      	bne.n	8001ae6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019ec:	429e      	cmp	r6, r3
 80019ee:	d003      	beq.n	80019f8 <UART_SetConfig+0x50>
 80019f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f4:	429e      	cmp	r6, r3
 80019f6:	d144      	bne.n	8001a82 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019f8:	f7ff ffb8 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 80019fc:	2519      	movs	r5, #25
 80019fe:	fb05 f300 	mul.w	r3, r5, r0
 8001a02:	6860      	ldr	r0, [r4, #4]
 8001a04:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a08:	0040      	lsls	r0, r0, #1
 8001a0a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a0e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a16:	f7ff ffa9 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001a1a:	6863      	ldr	r3, [r4, #4]
 8001a1c:	4368      	muls	r0, r5
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a24:	f7ff ffa2 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	4368      	muls	r0, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a36:	fb09 7313 	mls	r3, r9, r3, r7
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	3332      	adds	r3, #50	; 0x32
 8001a3e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a48:	f7ff ff90 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001a4c:	6862      	ldr	r2, [r4, #4]
 8001a4e:	4368      	muls	r0, r5
 8001a50:	0052      	lsls	r2, r2, #1
 8001a52:	fbb0 faf2 	udiv	sl, r0, r2
 8001a56:	f7ff ff89 	bl	800196c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a5a:	6863      	ldr	r3, [r4, #4]
 8001a5c:	4368      	muls	r0, r5
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a64:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a68:	fb09 a313 	mls	r3, r9, r3, sl
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	3332      	adds	r3, #50	; 0x32
 8001a70:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a7a:	443b      	add	r3, r7
 8001a7c:	60b3      	str	r3, [r6, #8]
 8001a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a82:	f7ff ff63 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001a86:	2519      	movs	r5, #25
 8001a88:	fb05 f300 	mul.w	r3, r5, r0
 8001a8c:	6860      	ldr	r0, [r4, #4]
 8001a8e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a92:	0040      	lsls	r0, r0, #1
 8001a94:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a98:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001aa0:	f7ff ff54 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001aa4:	6863      	ldr	r3, [r4, #4]
 8001aa6:	4368      	muls	r0, r5
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fbb0 f7f3 	udiv	r7, r0, r3
 8001aae:	f7ff ff4d 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001ab2:	6863      	ldr	r3, [r4, #4]
 8001ab4:	4368      	muls	r0, r5
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ac0:	fb09 7313 	mls	r3, r9, r3, r7
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	3332      	adds	r3, #50	; 0x32
 8001ac8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001ad2:	f7ff ff3b 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001ad6:	6862      	ldr	r2, [r4, #4]
 8001ad8:	4368      	muls	r0, r5
 8001ada:	0052      	lsls	r2, r2, #1
 8001adc:	fbb0 faf2 	udiv	sl, r0, r2
 8001ae0:	f7ff ff34 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001ae4:	e7b9      	b.n	8001a5a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ae6:	429e      	cmp	r6, r3
 8001ae8:	d002      	beq.n	8001af0 <UART_SetConfig+0x148>
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <UART_SetConfig+0x230>)
 8001aec:	429e      	cmp	r6, r3
 8001aee:	d140      	bne.n	8001b72 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001af0:	f7ff ff3c 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001af4:	6867      	ldr	r7, [r4, #4]
 8001af6:	2519      	movs	r5, #25
 8001af8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001afc:	fb05 f300 	mul.w	r3, r5, r0
 8001b00:	00bf      	lsls	r7, r7, #2
 8001b02:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b06:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b0a:	011f      	lsls	r7, r3, #4
 8001b0c:	f7ff ff2e 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001b10:	6863      	ldr	r3, [r4, #4]
 8001b12:	4368      	muls	r0, r5
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b1a:	f7ff ff27 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001b1e:	6863      	ldr	r3, [r4, #4]
 8001b20:	4368      	muls	r0, r5
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b28:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b2c:	fb09 8313 	mls	r3, r9, r3, r8
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	3332      	adds	r3, #50	; 0x32
 8001b34:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b38:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b3c:	f7ff ff16 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001b40:	6862      	ldr	r2, [r4, #4]
 8001b42:	4368      	muls	r0, r5
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	fbb0 faf2 	udiv	sl, r0, r2
 8001b4a:	f7ff ff0f 	bl	800196c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	4368      	muls	r0, r5
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b58:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b5c:	fb09 a313 	mls	r3, r9, r3, sl
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	3332      	adds	r3, #50	; 0x32
 8001b64:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	ea43 0308 	orr.w	r3, r3, r8
 8001b70:	e783      	b.n	8001a7a <UART_SetConfig+0xd2>
 8001b72:	f7ff feeb 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001b76:	6867      	ldr	r7, [r4, #4]
 8001b78:	2519      	movs	r5, #25
 8001b7a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b7e:	fb05 f300 	mul.w	r3, r5, r0
 8001b82:	00bf      	lsls	r7, r7, #2
 8001b84:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b88:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b8c:	011f      	lsls	r7, r3, #4
 8001b8e:	f7ff fedd 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	4368      	muls	r0, r5
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b9c:	f7ff fed6 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	4368      	muls	r0, r5
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bae:	fb09 8313 	mls	r3, r9, r3, r8
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	3332      	adds	r3, #50	; 0x32
 8001bb6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bba:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001bbe:	f7ff fec5 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001bc2:	6862      	ldr	r2, [r4, #4]
 8001bc4:	4368      	muls	r0, r5
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	fbb0 faf2 	udiv	sl, r0, r2
 8001bcc:	f7ff febe 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8001bd0:	e7bd      	b.n	8001b4e <UART_SetConfig+0x1a6>
 8001bd2:	bf00      	nop
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40011400 	.word	0x40011400

08001bdc <HAL_UART_Init>:
{
 8001bdc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001bde:	4604      	mov	r4, r0
 8001be0:	b340      	cbz	r0, 8001c34 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001be2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001be6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bea:	b91b      	cbnz	r3, 8001bf4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001bec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001bf0:	f7ff fa14 	bl	800101c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001bf4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001bf6:	2324      	movs	r3, #36	; 0x24
 8001bf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001bfc:	68d3      	ldr	r3, [r2, #12]
 8001bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c02:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fecf 	bl	80019a8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c1a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c22:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c24:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001c26:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c28:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001c32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
}
 8001c36:	bd10      	pop	{r4, pc}

08001c38 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c38:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d120      	bne.n	8001c82 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001c40:	b1e9      	cbz	r1, 8001c7e <HAL_UART_Receive_IT+0x46>
 8001c42:	b1e2      	cbz	r2, 8001c7e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001c44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d01a      	beq.n	8001c82 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001c4c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001c4e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c50:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c52:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c54:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c56:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c5a:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001c5c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c5e:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001c60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c64:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c68:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c6a:	6951      	ldr	r1, [r2, #20]
 8001c6c:	f041 0101 	orr.w	r1, r1, #1
 8001c70:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001c72:	68d1      	ldr	r1, [r2, #12]
 8001c74:	f041 0120 	orr.w	r1, r1, #32
 8001c78:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4770      	bx	lr
      return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	4770      	bx	lr
    return HAL_BUSY;
 8001c82:	2002      	movs	r0, #2
}
 8001c84:	4770      	bx	lr

08001c86 <HAL_UART_TxCpltCallback>:
 8001c86:	4770      	bx	lr

08001c88 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c88:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001c8c:	2b22      	cmp	r3, #34	; 0x22
{
 8001c8e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c90:	d136      	bne.n	8001d00 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c92:	6883      	ldr	r3, [r0, #8]
 8001c94:	6901      	ldr	r1, [r0, #16]
 8001c96:	6802      	ldr	r2, [r0, #0]
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c9e:	d123      	bne.n	8001ce8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ca0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ca2:	b9e9      	cbnz	r1, 8001ce0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001cac:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001cae:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001cb0:	3c01      	subs	r4, #1
 8001cb2:	b2a4      	uxth	r4, r4
 8001cb4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001cb6:	b98c      	cbnz	r4, 8001cdc <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001cb8:	6803      	ldr	r3, [r0, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	f022 0220 	bic.w	r2, r2, #32
 8001cc0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001cd8:	f7ff f8d4 	bl	8000e84 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001cdc:	2000      	movs	r0, #0
}
 8001cde:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f823 2b01 	strh.w	r2, [r3], #1
 8001ce6:	e7e1      	b.n	8001cac <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ce8:	b921      	cbnz	r1, 8001cf4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cea:	1c59      	adds	r1, r3, #1
 8001cec:	6852      	ldr	r2, [r2, #4]
 8001cee:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e7dc      	b.n	8001cae <UART_Receive_IT+0x26>
 8001cf4:	6852      	ldr	r2, [r2, #4]
 8001cf6:	1c59      	adds	r1, r3, #1
 8001cf8:	6281      	str	r1, [r0, #40]	; 0x28
 8001cfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cfe:	e7f7      	b.n	8001cf0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001d00:	2002      	movs	r0, #2
 8001d02:	bd10      	pop	{r4, pc}

08001d04 <HAL_UART_ErrorCallback>:
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d08:	6803      	ldr	r3, [r0, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d0c:	68d9      	ldr	r1, [r3, #12]
{
 8001d0e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001d10:	0716      	lsls	r6, r2, #28
{
 8001d12:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d14:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001d16:	d107      	bne.n	8001d28 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d18:	0696      	lsls	r6, r2, #26
 8001d1a:	d55a      	bpl.n	8001dd2 <HAL_UART_IRQHandler+0xca>
 8001d1c:	068d      	lsls	r5, r1, #26
 8001d1e:	d558      	bpl.n	8001dd2 <HAL_UART_IRQHandler+0xca>
}
 8001d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001d24:	f7ff bfb0 	b.w	8001c88 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d28:	f015 0501 	ands.w	r5, r5, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_UART_IRQHandler+0x2c>
 8001d2e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001d32:	d04e      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d34:	07d3      	lsls	r3, r2, #31
 8001d36:	d505      	bpl.n	8001d44 <HAL_UART_IRQHandler+0x3c>
 8001d38:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d3a:	bf42      	ittt	mi
 8001d3c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001d3e:	f043 0301 	orrmi.w	r3, r3, #1
 8001d42:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d44:	0750      	lsls	r0, r2, #29
 8001d46:	d504      	bpl.n	8001d52 <HAL_UART_IRQHandler+0x4a>
 8001d48:	b11d      	cbz	r5, 8001d52 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d52:	0793      	lsls	r3, r2, #30
 8001d54:	d504      	bpl.n	8001d60 <HAL_UART_IRQHandler+0x58>
 8001d56:	b11d      	cbz	r5, 8001d60 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d60:	0716      	lsls	r6, r2, #28
 8001d62:	d504      	bpl.n	8001d6e <HAL_UART_IRQHandler+0x66>
 8001d64:	b11d      	cbz	r5, 8001d6e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d066      	beq.n	8001e42 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d74:	0695      	lsls	r5, r2, #26
 8001d76:	d504      	bpl.n	8001d82 <HAL_UART_IRQHandler+0x7a>
 8001d78:	0688      	lsls	r0, r1, #26
 8001d7a:	d502      	bpl.n	8001d82 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff ff83 	bl	8001c88 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d88:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001d8a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d8c:	d402      	bmi.n	8001d94 <HAL_UART_IRQHandler+0x8c>
 8001d8e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001d92:	d01a      	beq.n	8001dca <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001d94:	f7ff fdfa 	bl	800198c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	0652      	lsls	r2, r2, #25
 8001d9e:	d510      	bpl.n	8001dc2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001da2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001daa:	b150      	cbz	r0, 8001dc2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_UART_IRQHandler+0x13c>)
 8001dae:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001db0:	f7ff fa7e 	bl	80012b0 <HAL_DMA_Abort_IT>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d044      	beq.n	8001e42 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001db8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001dc0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff ff9e 	bl	8001d04 <HAL_UART_ErrorCallback>
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001dca:	f7ff ff9b 	bl	8001d04 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dd2:	0616      	lsls	r6, r2, #24
 8001dd4:	d527      	bpl.n	8001e26 <HAL_UART_IRQHandler+0x11e>
 8001dd6:	060d      	lsls	r5, r1, #24
 8001dd8:	d525      	bpl.n	8001e26 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001dda:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001dde:	2a21      	cmp	r2, #33	; 0x21
 8001de0:	d12f      	bne.n	8001e42 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001de2:	68a2      	ldr	r2, [r4, #8]
 8001de4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001de8:	6a22      	ldr	r2, [r4, #32]
 8001dea:	d117      	bne.n	8001e1c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dec:	8811      	ldrh	r1, [r2, #0]
 8001dee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001df2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001df4:	6921      	ldr	r1, [r4, #16]
 8001df6:	b979      	cbnz	r1, 8001e18 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001df8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001dfa:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001dfc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001dfe:	3a01      	subs	r2, #1
 8001e00:	b292      	uxth	r2, r2
 8001e02:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001e04:	b9ea      	cbnz	r2, 8001e42 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001e18:	3201      	adds	r2, #1
 8001e1a:	e7ee      	b.n	8001dfa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e1c:	1c51      	adds	r1, r2, #1
 8001e1e:	6221      	str	r1, [r4, #32]
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	e7ea      	b.n	8001dfc <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e26:	0650      	lsls	r0, r2, #25
 8001e28:	d50b      	bpl.n	8001e42 <HAL_UART_IRQHandler+0x13a>
 8001e2a:	064a      	lsls	r2, r1, #25
 8001e2c:	d509      	bpl.n	8001e42 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e34:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e36:	2320      	movs	r3, #32
 8001e38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ff22 	bl	8001c86 <HAL_UART_TxCpltCallback>
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
 8001e44:	08001e49 	.word	0x08001e49

08001e48 <UART_DMAAbortOnError>:
{
 8001e48:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e50:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001e52:	f7ff ff57 	bl	8001d04 <HAL_UART_ErrorCallback>
 8001e56:	bd08      	pop	{r3, pc}

08001e58 <__errno>:
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <__errno+0x8>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	2000000c 	.word	0x2000000c

08001e64 <__libc_init_array>:
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	4e0d      	ldr	r6, [pc, #52]	; (8001e9c <__libc_init_array+0x38>)
 8001e68:	4c0d      	ldr	r4, [pc, #52]	; (8001ea0 <__libc_init_array+0x3c>)
 8001e6a:	1ba4      	subs	r4, r4, r6
 8001e6c:	10a4      	asrs	r4, r4, #2
 8001e6e:	2500      	movs	r5, #0
 8001e70:	42a5      	cmp	r5, r4
 8001e72:	d109      	bne.n	8001e88 <__libc_init_array+0x24>
 8001e74:	4e0b      	ldr	r6, [pc, #44]	; (8001ea4 <__libc_init_array+0x40>)
 8001e76:	4c0c      	ldr	r4, [pc, #48]	; (8001ea8 <__libc_init_array+0x44>)
 8001e78:	f001 fd58 	bl	800392c <_init>
 8001e7c:	1ba4      	subs	r4, r4, r6
 8001e7e:	10a4      	asrs	r4, r4, #2
 8001e80:	2500      	movs	r5, #0
 8001e82:	42a5      	cmp	r5, r4
 8001e84:	d105      	bne.n	8001e92 <__libc_init_array+0x2e>
 8001e86:	bd70      	pop	{r4, r5, r6, pc}
 8001e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e8c:	4798      	blx	r3
 8001e8e:	3501      	adds	r5, #1
 8001e90:	e7ee      	b.n	8001e70 <__libc_init_array+0xc>
 8001e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e96:	4798      	blx	r3
 8001e98:	3501      	adds	r5, #1
 8001e9a:	e7f2      	b.n	8001e82 <__libc_init_array+0x1e>
 8001e9c:	08003b90 	.word	0x08003b90
 8001ea0:	08003b90 	.word	0x08003b90
 8001ea4:	08003b90 	.word	0x08003b90
 8001ea8:	08003b94 	.word	0x08003b94

08001eac <memset>:
 8001eac:	4402      	add	r2, r0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <memset+0xa>
 8001eb4:	4770      	bx	lr
 8001eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eba:	e7f9      	b.n	8001eb0 <memset+0x4>

08001ebc <__cvt>:
 8001ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec0:	ec55 4b10 	vmov	r4, r5, d0
 8001ec4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001ec6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	460e      	mov	r6, r1
 8001ece:	4691      	mov	r9, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	bfb8      	it	lt
 8001ed4:	4622      	movlt	r2, r4
 8001ed6:	462b      	mov	r3, r5
 8001ed8:	f027 0720 	bic.w	r7, r7, #32
 8001edc:	bfbb      	ittet	lt
 8001ede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001ee2:	461d      	movlt	r5, r3
 8001ee4:	2300      	movge	r3, #0
 8001ee6:	232d      	movlt	r3, #45	; 0x2d
 8001ee8:	bfb8      	it	lt
 8001eea:	4614      	movlt	r4, r2
 8001eec:	2f46      	cmp	r7, #70	; 0x46
 8001eee:	700b      	strb	r3, [r1, #0]
 8001ef0:	d004      	beq.n	8001efc <__cvt+0x40>
 8001ef2:	2f45      	cmp	r7, #69	; 0x45
 8001ef4:	d100      	bne.n	8001ef8 <__cvt+0x3c>
 8001ef6:	3601      	adds	r6, #1
 8001ef8:	2102      	movs	r1, #2
 8001efa:	e000      	b.n	8001efe <__cvt+0x42>
 8001efc:	2103      	movs	r1, #3
 8001efe:	ab03      	add	r3, sp, #12
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	ab02      	add	r3, sp, #8
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	4632      	mov	r2, r6
 8001f08:	4653      	mov	r3, sl
 8001f0a:	ec45 4b10 	vmov	d0, r4, r5
 8001f0e:	f000 fbaf 	bl	8002670 <_dtoa_r>
 8001f12:	2f47      	cmp	r7, #71	; 0x47
 8001f14:	4680      	mov	r8, r0
 8001f16:	d102      	bne.n	8001f1e <__cvt+0x62>
 8001f18:	f019 0f01 	tst.w	r9, #1
 8001f1c:	d026      	beq.n	8001f6c <__cvt+0xb0>
 8001f1e:	2f46      	cmp	r7, #70	; 0x46
 8001f20:	eb08 0906 	add.w	r9, r8, r6
 8001f24:	d111      	bne.n	8001f4a <__cvt+0x8e>
 8001f26:	f898 3000 	ldrb.w	r3, [r8]
 8001f2a:	2b30      	cmp	r3, #48	; 0x30
 8001f2c:	d10a      	bne.n	8001f44 <__cvt+0x88>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2300      	movs	r3, #0
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe fd83 	bl	8000a40 <__aeabi_dcmpeq>
 8001f3a:	b918      	cbnz	r0, 8001f44 <__cvt+0x88>
 8001f3c:	f1c6 0601 	rsb	r6, r6, #1
 8001f40:	f8ca 6000 	str.w	r6, [sl]
 8001f44:	f8da 3000 	ldr.w	r3, [sl]
 8001f48:	4499      	add	r9, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	4620      	mov	r0, r4
 8001f50:	4629      	mov	r1, r5
 8001f52:	f7fe fd75 	bl	8000a40 <__aeabi_dcmpeq>
 8001f56:	b938      	cbnz	r0, 8001f68 <__cvt+0xac>
 8001f58:	2230      	movs	r2, #48	; 0x30
 8001f5a:	9b03      	ldr	r3, [sp, #12]
 8001f5c:	4599      	cmp	r9, r3
 8001f5e:	d905      	bls.n	8001f6c <__cvt+0xb0>
 8001f60:	1c59      	adds	r1, r3, #1
 8001f62:	9103      	str	r1, [sp, #12]
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e7f8      	b.n	8001f5a <__cvt+0x9e>
 8001f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f6c:	9b03      	ldr	r3, [sp, #12]
 8001f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f70:	eba3 0308 	sub.w	r3, r3, r8
 8001f74:	4640      	mov	r0, r8
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	b004      	add	sp, #16
 8001f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f7e <__exponent>:
 8001f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f80:	4603      	mov	r3, r0
 8001f82:	2900      	cmp	r1, #0
 8001f84:	bfb8      	it	lt
 8001f86:	4249      	neglt	r1, r1
 8001f88:	f803 2b02 	strb.w	r2, [r3], #2
 8001f8c:	bfb4      	ite	lt
 8001f8e:	222d      	movlt	r2, #45	; 0x2d
 8001f90:	222b      	movge	r2, #43	; 0x2b
 8001f92:	2909      	cmp	r1, #9
 8001f94:	7042      	strb	r2, [r0, #1]
 8001f96:	dd20      	ble.n	8001fda <__exponent+0x5c>
 8001f98:	f10d 0207 	add.w	r2, sp, #7
 8001f9c:	4617      	mov	r7, r2
 8001f9e:	260a      	movs	r6, #10
 8001fa0:	fb91 f5f6 	sdiv	r5, r1, r6
 8001fa4:	fb06 1115 	mls	r1, r6, r5, r1
 8001fa8:	3130      	adds	r1, #48	; 0x30
 8001faa:	2d09      	cmp	r5, #9
 8001fac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001fb0:	f102 34ff 	add.w	r4, r2, #4294967295
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	dc09      	bgt.n	8001fcc <__exponent+0x4e>
 8001fb8:	3130      	adds	r1, #48	; 0x30
 8001fba:	3a02      	subs	r2, #2
 8001fbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001fc0:	42ba      	cmp	r2, r7
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	d304      	bcc.n	8001fd0 <__exponent+0x52>
 8001fc6:	1a20      	subs	r0, r4, r0
 8001fc8:	b003      	add	sp, #12
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fcc:	4622      	mov	r2, r4
 8001fce:	e7e7      	b.n	8001fa0 <__exponent+0x22>
 8001fd0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8001fd8:	e7f2      	b.n	8001fc0 <__exponent+0x42>
 8001fda:	2230      	movs	r2, #48	; 0x30
 8001fdc:	461c      	mov	r4, r3
 8001fde:	4411      	add	r1, r2
 8001fe0:	f804 2b02 	strb.w	r2, [r4], #2
 8001fe4:	7059      	strb	r1, [r3, #1]
 8001fe6:	e7ee      	b.n	8001fc6 <__exponent+0x48>

08001fe8 <_printf_float>:
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	b08d      	sub	sp, #52	; 0x34
 8001fee:	460c      	mov	r4, r1
 8001ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001ff4:	4616      	mov	r6, r2
 8001ff6:	461f      	mov	r7, r3
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	f001 f907 	bl	800320c <_localeconv_r>
 8001ffe:	6803      	ldr	r3, [r0, #0]
 8002000:	9304      	str	r3, [sp, #16]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f8f4 	bl	80001f0 <strlen>
 8002008:	2300      	movs	r3, #0
 800200a:	930a      	str	r3, [sp, #40]	; 0x28
 800200c:	f8d8 3000 	ldr.w	r3, [r8]
 8002010:	9005      	str	r0, [sp, #20]
 8002012:	3307      	adds	r3, #7
 8002014:	f023 0307 	bic.w	r3, r3, #7
 8002018:	f103 0208 	add.w	r2, r3, #8
 800201c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002020:	f8d4 b000 	ldr.w	fp, [r4]
 8002024:	f8c8 2000 	str.w	r2, [r8]
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002030:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002034:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002038:	9307      	str	r3, [sp, #28]
 800203a:	f8cd 8018 	str.w	r8, [sp, #24]
 800203e:	f04f 32ff 	mov.w	r2, #4294967295
 8002042:	4ba5      	ldr	r3, [pc, #660]	; (80022d8 <_printf_float+0x2f0>)
 8002044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002048:	f7fe fd2c 	bl	8000aa4 <__aeabi_dcmpun>
 800204c:	2800      	cmp	r0, #0
 800204e:	f040 81fb 	bne.w	8002448 <_printf_float+0x460>
 8002052:	f04f 32ff 	mov.w	r2, #4294967295
 8002056:	4ba0      	ldr	r3, [pc, #640]	; (80022d8 <_printf_float+0x2f0>)
 8002058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800205c:	f7fe fd04 	bl	8000a68 <__aeabi_dcmple>
 8002060:	2800      	cmp	r0, #0
 8002062:	f040 81f1 	bne.w	8002448 <_printf_float+0x460>
 8002066:	2200      	movs	r2, #0
 8002068:	2300      	movs	r3, #0
 800206a:	4640      	mov	r0, r8
 800206c:	4649      	mov	r1, r9
 800206e:	f7fe fcf1 	bl	8000a54 <__aeabi_dcmplt>
 8002072:	b110      	cbz	r0, 800207a <_printf_float+0x92>
 8002074:	232d      	movs	r3, #45	; 0x2d
 8002076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800207a:	4b98      	ldr	r3, [pc, #608]	; (80022dc <_printf_float+0x2f4>)
 800207c:	4a98      	ldr	r2, [pc, #608]	; (80022e0 <_printf_float+0x2f8>)
 800207e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002082:	bf8c      	ite	hi
 8002084:	4690      	movhi	r8, r2
 8002086:	4698      	movls	r8, r3
 8002088:	2303      	movs	r3, #3
 800208a:	f02b 0204 	bic.w	r2, fp, #4
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	6022      	str	r2, [r4, #0]
 8002092:	f04f 0900 	mov.w	r9, #0
 8002096:	9700      	str	r7, [sp, #0]
 8002098:	4633      	mov	r3, r6
 800209a:	aa0b      	add	r2, sp, #44	; 0x2c
 800209c:	4621      	mov	r1, r4
 800209e:	4628      	mov	r0, r5
 80020a0:	f000 f9e2 	bl	8002468 <_printf_common>
 80020a4:	3001      	adds	r0, #1
 80020a6:	f040 8093 	bne.w	80021d0 <_printf_float+0x1e8>
 80020aa:	f04f 30ff 	mov.w	r0, #4294967295
 80020ae:	b00d      	add	sp, #52	; 0x34
 80020b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b4:	6861      	ldr	r1, [r4, #4]
 80020b6:	1c4b      	adds	r3, r1, #1
 80020b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80020bc:	d13f      	bne.n	800213e <_printf_float+0x156>
 80020be:	2306      	movs	r3, #6
 80020c0:	6063      	str	r3, [r4, #4]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	ab0a      	add	r3, sp, #40	; 0x28
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	ab09      	add	r3, sp, #36	; 0x24
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	ec49 8b10 	vmov	d0, r8, r9
 80020d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80020d6:	6022      	str	r2, [r4, #0]
 80020d8:	f8cd a004 	str.w	sl, [sp, #4]
 80020dc:	6861      	ldr	r1, [r4, #4]
 80020de:	4628      	mov	r0, r5
 80020e0:	f7ff feec 	bl	8001ebc <__cvt>
 80020e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80020e8:	2b47      	cmp	r3, #71	; 0x47
 80020ea:	4680      	mov	r8, r0
 80020ec:	d109      	bne.n	8002102 <_printf_float+0x11a>
 80020ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020f0:	1cd8      	adds	r0, r3, #3
 80020f2:	db02      	blt.n	80020fa <_printf_float+0x112>
 80020f4:	6862      	ldr	r2, [r4, #4]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	dd57      	ble.n	80021aa <_printf_float+0x1c2>
 80020fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80020fe:	fa5f fa8a 	uxtb.w	sl, sl
 8002102:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002108:	d834      	bhi.n	8002174 <_printf_float+0x18c>
 800210a:	3901      	subs	r1, #1
 800210c:	4652      	mov	r2, sl
 800210e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002112:	9109      	str	r1, [sp, #36]	; 0x24
 8002114:	f7ff ff33 	bl	8001f7e <__exponent>
 8002118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800211a:	1883      	adds	r3, r0, r2
 800211c:	2a01      	cmp	r2, #1
 800211e:	4681      	mov	r9, r0
 8002120:	6123      	str	r3, [r4, #16]
 8002122:	dc02      	bgt.n	800212a <_printf_float+0x142>
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	07d1      	lsls	r1, r2, #31
 8002128:	d501      	bpl.n	800212e <_printf_float+0x146>
 800212a:	3301      	adds	r3, #1
 800212c:	6123      	str	r3, [r4, #16]
 800212e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0af      	beq.n	8002096 <_printf_float+0xae>
 8002136:	232d      	movs	r3, #45	; 0x2d
 8002138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800213c:	e7ab      	b.n	8002096 <_printf_float+0xae>
 800213e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002142:	d002      	beq.n	800214a <_printf_float+0x162>
 8002144:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002148:	d1bb      	bne.n	80020c2 <_printf_float+0xda>
 800214a:	b189      	cbz	r1, 8002170 <_printf_float+0x188>
 800214c:	2300      	movs	r3, #0
 800214e:	9303      	str	r3, [sp, #12]
 8002150:	ab0a      	add	r3, sp, #40	; 0x28
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	ab09      	add	r3, sp, #36	; 0x24
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	ec49 8b10 	vmov	d0, r8, r9
 800215c:	6022      	str	r2, [r4, #0]
 800215e:	f8cd a004 	str.w	sl, [sp, #4]
 8002162:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002166:	4628      	mov	r0, r5
 8002168:	f7ff fea8 	bl	8001ebc <__cvt>
 800216c:	4680      	mov	r8, r0
 800216e:	e7be      	b.n	80020ee <_printf_float+0x106>
 8002170:	2301      	movs	r3, #1
 8002172:	e7a5      	b.n	80020c0 <_printf_float+0xd8>
 8002174:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002178:	d119      	bne.n	80021ae <_printf_float+0x1c6>
 800217a:	2900      	cmp	r1, #0
 800217c:	6863      	ldr	r3, [r4, #4]
 800217e:	dd0c      	ble.n	800219a <_printf_float+0x1b2>
 8002180:	6121      	str	r1, [r4, #16]
 8002182:	b913      	cbnz	r3, 800218a <_printf_float+0x1a2>
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	07d2      	lsls	r2, r2, #31
 8002188:	d502      	bpl.n	8002190 <_printf_float+0x1a8>
 800218a:	3301      	adds	r3, #1
 800218c:	440b      	add	r3, r1
 800218e:	6123      	str	r3, [r4, #16]
 8002190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002192:	65a3      	str	r3, [r4, #88]	; 0x58
 8002194:	f04f 0900 	mov.w	r9, #0
 8002198:	e7c9      	b.n	800212e <_printf_float+0x146>
 800219a:	b913      	cbnz	r3, 80021a2 <_printf_float+0x1ba>
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	07d0      	lsls	r0, r2, #31
 80021a0:	d501      	bpl.n	80021a6 <_printf_float+0x1be>
 80021a2:	3302      	adds	r3, #2
 80021a4:	e7f3      	b.n	800218e <_printf_float+0x1a6>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e7f1      	b.n	800218e <_printf_float+0x1a6>
 80021aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80021ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021b2:	4293      	cmp	r3, r2
 80021b4:	db05      	blt.n	80021c2 <_printf_float+0x1da>
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	6123      	str	r3, [r4, #16]
 80021ba:	07d1      	lsls	r1, r2, #31
 80021bc:	d5e8      	bpl.n	8002190 <_printf_float+0x1a8>
 80021be:	3301      	adds	r3, #1
 80021c0:	e7e5      	b.n	800218e <_printf_float+0x1a6>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bfd4      	ite	le
 80021c6:	f1c3 0302 	rsble	r3, r3, #2
 80021ca:	2301      	movgt	r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	e7de      	b.n	800218e <_printf_float+0x1a6>
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	055a      	lsls	r2, r3, #21
 80021d4:	d407      	bmi.n	80021e6 <_printf_float+0x1fe>
 80021d6:	6923      	ldr	r3, [r4, #16]
 80021d8:	4642      	mov	r2, r8
 80021da:	4631      	mov	r1, r6
 80021dc:	4628      	mov	r0, r5
 80021de:	47b8      	blx	r7
 80021e0:	3001      	adds	r0, #1
 80021e2:	d12b      	bne.n	800223c <_printf_float+0x254>
 80021e4:	e761      	b.n	80020aa <_printf_float+0xc2>
 80021e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80021ea:	f240 80e2 	bls.w	80023b2 <_printf_float+0x3ca>
 80021ee:	2200      	movs	r2, #0
 80021f0:	2300      	movs	r3, #0
 80021f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80021f6:	f7fe fc23 	bl	8000a40 <__aeabi_dcmpeq>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d03c      	beq.n	8002278 <_printf_float+0x290>
 80021fe:	2301      	movs	r3, #1
 8002200:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <_printf_float+0x2fc>)
 8002202:	4631      	mov	r1, r6
 8002204:	4628      	mov	r0, r5
 8002206:	47b8      	blx	r7
 8002208:	3001      	adds	r0, #1
 800220a:	f43f af4e 	beq.w	80020aa <_printf_float+0xc2>
 800220e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002212:	429a      	cmp	r2, r3
 8002214:	db02      	blt.n	800221c <_printf_float+0x234>
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	07d8      	lsls	r0, r3, #31
 800221a:	d50f      	bpl.n	800223c <_printf_float+0x254>
 800221c:	9b05      	ldr	r3, [sp, #20]
 800221e:	9a04      	ldr	r2, [sp, #16]
 8002220:	4631      	mov	r1, r6
 8002222:	4628      	mov	r0, r5
 8002224:	47b8      	blx	r7
 8002226:	3001      	adds	r0, #1
 8002228:	f43f af3f 	beq.w	80020aa <_printf_float+0xc2>
 800222c:	f04f 0800 	mov.w	r8, #0
 8002230:	f104 091a 	add.w	r9, r4, #26
 8002234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	4598      	cmp	r8, r3
 800223a:	db12      	blt.n	8002262 <_printf_float+0x27a>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	079b      	lsls	r3, r3, #30
 8002240:	d509      	bpl.n	8002256 <_printf_float+0x26e>
 8002242:	f04f 0800 	mov.w	r8, #0
 8002246:	f104 0919 	add.w	r9, r4, #25
 800224a:	68e3      	ldr	r3, [r4, #12]
 800224c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	4598      	cmp	r8, r3
 8002252:	f2c0 80ee 	blt.w	8002432 <_printf_float+0x44a>
 8002256:	68e0      	ldr	r0, [r4, #12]
 8002258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800225a:	4298      	cmp	r0, r3
 800225c:	bfb8      	it	lt
 800225e:	4618      	movlt	r0, r3
 8002260:	e725      	b.n	80020ae <_printf_float+0xc6>
 8002262:	2301      	movs	r3, #1
 8002264:	464a      	mov	r2, r9
 8002266:	4631      	mov	r1, r6
 8002268:	4628      	mov	r0, r5
 800226a:	47b8      	blx	r7
 800226c:	3001      	adds	r0, #1
 800226e:	f43f af1c 	beq.w	80020aa <_printf_float+0xc2>
 8002272:	f108 0801 	add.w	r8, r8, #1
 8002276:	e7dd      	b.n	8002234 <_printf_float+0x24c>
 8002278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	dc34      	bgt.n	80022e8 <_printf_float+0x300>
 800227e:	2301      	movs	r3, #1
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <_printf_float+0x2fc>)
 8002282:	4631      	mov	r1, r6
 8002284:	4628      	mov	r0, r5
 8002286:	47b8      	blx	r7
 8002288:	3001      	adds	r0, #1
 800228a:	f43f af0e 	beq.w	80020aa <_printf_float+0xc2>
 800228e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002290:	b923      	cbnz	r3, 800229c <_printf_float+0x2b4>
 8002292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002294:	b913      	cbnz	r3, 800229c <_printf_float+0x2b4>
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	07d9      	lsls	r1, r3, #31
 800229a:	d5cf      	bpl.n	800223c <_printf_float+0x254>
 800229c:	9b05      	ldr	r3, [sp, #20]
 800229e:	9a04      	ldr	r2, [sp, #16]
 80022a0:	4631      	mov	r1, r6
 80022a2:	4628      	mov	r0, r5
 80022a4:	47b8      	blx	r7
 80022a6:	3001      	adds	r0, #1
 80022a8:	f43f aeff 	beq.w	80020aa <_printf_float+0xc2>
 80022ac:	f04f 0900 	mov.w	r9, #0
 80022b0:	f104 0a1a 	add.w	sl, r4, #26
 80022b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022b6:	425b      	negs	r3, r3
 80022b8:	4599      	cmp	r9, r3
 80022ba:	db01      	blt.n	80022c0 <_printf_float+0x2d8>
 80022bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022be:	e78b      	b.n	80021d8 <_printf_float+0x1f0>
 80022c0:	2301      	movs	r3, #1
 80022c2:	4652      	mov	r2, sl
 80022c4:	4631      	mov	r1, r6
 80022c6:	4628      	mov	r0, r5
 80022c8:	47b8      	blx	r7
 80022ca:	3001      	adds	r0, #1
 80022cc:	f43f aeed 	beq.w	80020aa <_printf_float+0xc2>
 80022d0:	f109 0901 	add.w	r9, r9, #1
 80022d4:	e7ee      	b.n	80022b4 <_printf_float+0x2cc>
 80022d6:	bf00      	nop
 80022d8:	7fefffff 	.word	0x7fefffff
 80022dc:	08003960 	.word	0x08003960
 80022e0:	08003964 	.word	0x08003964
 80022e4:	08003970 	.word	0x08003970
 80022e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022ec:	429a      	cmp	r2, r3
 80022ee:	bfa8      	it	ge
 80022f0:	461a      	movge	r2, r3
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	4691      	mov	r9, r2
 80022f6:	dc38      	bgt.n	800236a <_printf_float+0x382>
 80022f8:	f104 031a 	add.w	r3, r4, #26
 80022fc:	f04f 0b00 	mov.w	fp, #0
 8002300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002304:	9306      	str	r3, [sp, #24]
 8002306:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800230a:	ebaa 0309 	sub.w	r3, sl, r9
 800230e:	459b      	cmp	fp, r3
 8002310:	db33      	blt.n	800237a <_printf_float+0x392>
 8002312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002316:	429a      	cmp	r2, r3
 8002318:	db3a      	blt.n	8002390 <_printf_float+0x3a8>
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	07da      	lsls	r2, r3, #31
 800231e:	d437      	bmi.n	8002390 <_printf_float+0x3a8>
 8002320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002322:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002324:	eba3 020a 	sub.w	r2, r3, sl
 8002328:	eba3 0901 	sub.w	r9, r3, r1
 800232c:	4591      	cmp	r9, r2
 800232e:	bfa8      	it	ge
 8002330:	4691      	movge	r9, r2
 8002332:	f1b9 0f00 	cmp.w	r9, #0
 8002336:	dc33      	bgt.n	80023a0 <_printf_float+0x3b8>
 8002338:	f04f 0800 	mov.w	r8, #0
 800233c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002340:	f104 0a1a 	add.w	sl, r4, #26
 8002344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	eba3 0309 	sub.w	r3, r3, r9
 800234e:	4598      	cmp	r8, r3
 8002350:	f6bf af74 	bge.w	800223c <_printf_float+0x254>
 8002354:	2301      	movs	r3, #1
 8002356:	4652      	mov	r2, sl
 8002358:	4631      	mov	r1, r6
 800235a:	4628      	mov	r0, r5
 800235c:	47b8      	blx	r7
 800235e:	3001      	adds	r0, #1
 8002360:	f43f aea3 	beq.w	80020aa <_printf_float+0xc2>
 8002364:	f108 0801 	add.w	r8, r8, #1
 8002368:	e7ec      	b.n	8002344 <_printf_float+0x35c>
 800236a:	4613      	mov	r3, r2
 800236c:	4631      	mov	r1, r6
 800236e:	4642      	mov	r2, r8
 8002370:	4628      	mov	r0, r5
 8002372:	47b8      	blx	r7
 8002374:	3001      	adds	r0, #1
 8002376:	d1bf      	bne.n	80022f8 <_printf_float+0x310>
 8002378:	e697      	b.n	80020aa <_printf_float+0xc2>
 800237a:	2301      	movs	r3, #1
 800237c:	9a06      	ldr	r2, [sp, #24]
 800237e:	4631      	mov	r1, r6
 8002380:	4628      	mov	r0, r5
 8002382:	47b8      	blx	r7
 8002384:	3001      	adds	r0, #1
 8002386:	f43f ae90 	beq.w	80020aa <_printf_float+0xc2>
 800238a:	f10b 0b01 	add.w	fp, fp, #1
 800238e:	e7ba      	b.n	8002306 <_printf_float+0x31e>
 8002390:	9b05      	ldr	r3, [sp, #20]
 8002392:	9a04      	ldr	r2, [sp, #16]
 8002394:	4631      	mov	r1, r6
 8002396:	4628      	mov	r0, r5
 8002398:	47b8      	blx	r7
 800239a:	3001      	adds	r0, #1
 800239c:	d1c0      	bne.n	8002320 <_printf_float+0x338>
 800239e:	e684      	b.n	80020aa <_printf_float+0xc2>
 80023a0:	464b      	mov	r3, r9
 80023a2:	eb08 020a 	add.w	r2, r8, sl
 80023a6:	4631      	mov	r1, r6
 80023a8:	4628      	mov	r0, r5
 80023aa:	47b8      	blx	r7
 80023ac:	3001      	adds	r0, #1
 80023ae:	d1c3      	bne.n	8002338 <_printf_float+0x350>
 80023b0:	e67b      	b.n	80020aa <_printf_float+0xc2>
 80023b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023b4:	2a01      	cmp	r2, #1
 80023b6:	dc01      	bgt.n	80023bc <_printf_float+0x3d4>
 80023b8:	07db      	lsls	r3, r3, #31
 80023ba:	d537      	bpl.n	800242c <_printf_float+0x444>
 80023bc:	2301      	movs	r3, #1
 80023be:	4642      	mov	r2, r8
 80023c0:	4631      	mov	r1, r6
 80023c2:	4628      	mov	r0, r5
 80023c4:	47b8      	blx	r7
 80023c6:	3001      	adds	r0, #1
 80023c8:	f43f ae6f 	beq.w	80020aa <_printf_float+0xc2>
 80023cc:	9b05      	ldr	r3, [sp, #20]
 80023ce:	9a04      	ldr	r2, [sp, #16]
 80023d0:	4631      	mov	r1, r6
 80023d2:	4628      	mov	r0, r5
 80023d4:	47b8      	blx	r7
 80023d6:	3001      	adds	r0, #1
 80023d8:	f43f ae67 	beq.w	80020aa <_printf_float+0xc2>
 80023dc:	2200      	movs	r2, #0
 80023de:	2300      	movs	r3, #0
 80023e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80023e4:	f7fe fb2c 	bl	8000a40 <__aeabi_dcmpeq>
 80023e8:	b158      	cbz	r0, 8002402 <_printf_float+0x41a>
 80023ea:	f04f 0800 	mov.w	r8, #0
 80023ee:	f104 0a1a 	add.w	sl, r4, #26
 80023f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	4598      	cmp	r8, r3
 80023f8:	db0d      	blt.n	8002416 <_printf_float+0x42e>
 80023fa:	464b      	mov	r3, r9
 80023fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002400:	e6eb      	b.n	80021da <_printf_float+0x1f2>
 8002402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002404:	f108 0201 	add.w	r2, r8, #1
 8002408:	3b01      	subs	r3, #1
 800240a:	4631      	mov	r1, r6
 800240c:	4628      	mov	r0, r5
 800240e:	47b8      	blx	r7
 8002410:	3001      	adds	r0, #1
 8002412:	d1f2      	bne.n	80023fa <_printf_float+0x412>
 8002414:	e649      	b.n	80020aa <_printf_float+0xc2>
 8002416:	2301      	movs	r3, #1
 8002418:	4652      	mov	r2, sl
 800241a:	4631      	mov	r1, r6
 800241c:	4628      	mov	r0, r5
 800241e:	47b8      	blx	r7
 8002420:	3001      	adds	r0, #1
 8002422:	f43f ae42 	beq.w	80020aa <_printf_float+0xc2>
 8002426:	f108 0801 	add.w	r8, r8, #1
 800242a:	e7e2      	b.n	80023f2 <_printf_float+0x40a>
 800242c:	2301      	movs	r3, #1
 800242e:	4642      	mov	r2, r8
 8002430:	e7eb      	b.n	800240a <_printf_float+0x422>
 8002432:	2301      	movs	r3, #1
 8002434:	464a      	mov	r2, r9
 8002436:	4631      	mov	r1, r6
 8002438:	4628      	mov	r0, r5
 800243a:	47b8      	blx	r7
 800243c:	3001      	adds	r0, #1
 800243e:	f43f ae34 	beq.w	80020aa <_printf_float+0xc2>
 8002442:	f108 0801 	add.w	r8, r8, #1
 8002446:	e700      	b.n	800224a <_printf_float+0x262>
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	4640      	mov	r0, r8
 800244e:	4649      	mov	r1, r9
 8002450:	f7fe fb28 	bl	8000aa4 <__aeabi_dcmpun>
 8002454:	2800      	cmp	r0, #0
 8002456:	f43f ae2d 	beq.w	80020b4 <_printf_float+0xcc>
 800245a:	4b01      	ldr	r3, [pc, #4]	; (8002460 <_printf_float+0x478>)
 800245c:	4a01      	ldr	r2, [pc, #4]	; (8002464 <_printf_float+0x47c>)
 800245e:	e60e      	b.n	800207e <_printf_float+0x96>
 8002460:	08003968 	.word	0x08003968
 8002464:	0800396c 	.word	0x0800396c

08002468 <_printf_common>:
 8002468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800246c:	4691      	mov	r9, r2
 800246e:	461f      	mov	r7, r3
 8002470:	688a      	ldr	r2, [r1, #8]
 8002472:	690b      	ldr	r3, [r1, #16]
 8002474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002478:	4293      	cmp	r3, r2
 800247a:	bfb8      	it	lt
 800247c:	4613      	movlt	r3, r2
 800247e:	f8c9 3000 	str.w	r3, [r9]
 8002482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002486:	4606      	mov	r6, r0
 8002488:	460c      	mov	r4, r1
 800248a:	b112      	cbz	r2, 8002492 <_printf_common+0x2a>
 800248c:	3301      	adds	r3, #1
 800248e:	f8c9 3000 	str.w	r3, [r9]
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	0699      	lsls	r1, r3, #26
 8002496:	bf42      	ittt	mi
 8002498:	f8d9 3000 	ldrmi.w	r3, [r9]
 800249c:	3302      	addmi	r3, #2
 800249e:	f8c9 3000 	strmi.w	r3, [r9]
 80024a2:	6825      	ldr	r5, [r4, #0]
 80024a4:	f015 0506 	ands.w	r5, r5, #6
 80024a8:	d107      	bne.n	80024ba <_printf_common+0x52>
 80024aa:	f104 0a19 	add.w	sl, r4, #25
 80024ae:	68e3      	ldr	r3, [r4, #12]
 80024b0:	f8d9 2000 	ldr.w	r2, [r9]
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	429d      	cmp	r5, r3
 80024b8:	db29      	blt.n	800250e <_printf_common+0xa6>
 80024ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80024be:	6822      	ldr	r2, [r4, #0]
 80024c0:	3300      	adds	r3, #0
 80024c2:	bf18      	it	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	0692      	lsls	r2, r2, #26
 80024c8:	d42e      	bmi.n	8002528 <_printf_common+0xc0>
 80024ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024ce:	4639      	mov	r1, r7
 80024d0:	4630      	mov	r0, r6
 80024d2:	47c0      	blx	r8
 80024d4:	3001      	adds	r0, #1
 80024d6:	d021      	beq.n	800251c <_printf_common+0xb4>
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	68e5      	ldr	r5, [r4, #12]
 80024dc:	f8d9 2000 	ldr.w	r2, [r9]
 80024e0:	f003 0306 	and.w	r3, r3, #6
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	bf08      	it	eq
 80024e8:	1aad      	subeq	r5, r5, r2
 80024ea:	68a3      	ldr	r3, [r4, #8]
 80024ec:	6922      	ldr	r2, [r4, #16]
 80024ee:	bf0c      	ite	eq
 80024f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024f4:	2500      	movne	r5, #0
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bfc4      	itt	gt
 80024fa:	1a9b      	subgt	r3, r3, r2
 80024fc:	18ed      	addgt	r5, r5, r3
 80024fe:	f04f 0900 	mov.w	r9, #0
 8002502:	341a      	adds	r4, #26
 8002504:	454d      	cmp	r5, r9
 8002506:	d11b      	bne.n	8002540 <_printf_common+0xd8>
 8002508:	2000      	movs	r0, #0
 800250a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250e:	2301      	movs	r3, #1
 8002510:	4652      	mov	r2, sl
 8002512:	4639      	mov	r1, r7
 8002514:	4630      	mov	r0, r6
 8002516:	47c0      	blx	r8
 8002518:	3001      	adds	r0, #1
 800251a:	d103      	bne.n	8002524 <_printf_common+0xbc>
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002524:	3501      	adds	r5, #1
 8002526:	e7c2      	b.n	80024ae <_printf_common+0x46>
 8002528:	18e1      	adds	r1, r4, r3
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	2030      	movs	r0, #48	; 0x30
 800252e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002532:	4422      	add	r2, r4
 8002534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800253c:	3302      	adds	r3, #2
 800253e:	e7c4      	b.n	80024ca <_printf_common+0x62>
 8002540:	2301      	movs	r3, #1
 8002542:	4622      	mov	r2, r4
 8002544:	4639      	mov	r1, r7
 8002546:	4630      	mov	r0, r6
 8002548:	47c0      	blx	r8
 800254a:	3001      	adds	r0, #1
 800254c:	d0e6      	beq.n	800251c <_printf_common+0xb4>
 800254e:	f109 0901 	add.w	r9, r9, #1
 8002552:	e7d7      	b.n	8002504 <_printf_common+0x9c>

08002554 <quorem>:
 8002554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	6903      	ldr	r3, [r0, #16]
 800255a:	690c      	ldr	r4, [r1, #16]
 800255c:	429c      	cmp	r4, r3
 800255e:	4680      	mov	r8, r0
 8002560:	f300 8082 	bgt.w	8002668 <quorem+0x114>
 8002564:	3c01      	subs	r4, #1
 8002566:	f101 0714 	add.w	r7, r1, #20
 800256a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800256e:	f100 0614 	add.w	r6, r0, #20
 8002572:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002576:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800257a:	eb06 030e 	add.w	r3, r6, lr
 800257e:	3501      	adds	r5, #1
 8002580:	eb07 090e 	add.w	r9, r7, lr
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	fbb0 f5f5 	udiv	r5, r0, r5
 800258a:	b395      	cbz	r5, 80025f2 <quorem+0x9e>
 800258c:	f04f 0a00 	mov.w	sl, #0
 8002590:	4638      	mov	r0, r7
 8002592:	46b4      	mov	ip, r6
 8002594:	46d3      	mov	fp, sl
 8002596:	f850 2b04 	ldr.w	r2, [r0], #4
 800259a:	b293      	uxth	r3, r2
 800259c:	fb05 a303 	mla	r3, r5, r3, sl
 80025a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	ebab 0303 	sub.w	r3, fp, r3
 80025aa:	0c12      	lsrs	r2, r2, #16
 80025ac:	f8bc b000 	ldrh.w	fp, [ip]
 80025b0:	fb05 a202 	mla	r2, r5, r2, sl
 80025b4:	fa13 f38b 	uxtah	r3, r3, fp
 80025b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80025bc:	fa1f fb82 	uxth.w	fp, r2
 80025c0:	f8dc 2000 	ldr.w	r2, [ip]
 80025c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80025c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025d2:	4581      	cmp	r9, r0
 80025d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80025d8:	f84c 3b04 	str.w	r3, [ip], #4
 80025dc:	d2db      	bcs.n	8002596 <quorem+0x42>
 80025de:	f856 300e 	ldr.w	r3, [r6, lr]
 80025e2:	b933      	cbnz	r3, 80025f2 <quorem+0x9e>
 80025e4:	9b01      	ldr	r3, [sp, #4]
 80025e6:	3b04      	subs	r3, #4
 80025e8:	429e      	cmp	r6, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	d330      	bcc.n	8002650 <quorem+0xfc>
 80025ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80025f2:	4640      	mov	r0, r8
 80025f4:	f001 f835 	bl	8003662 <__mcmp>
 80025f8:	2800      	cmp	r0, #0
 80025fa:	db25      	blt.n	8002648 <quorem+0xf4>
 80025fc:	3501      	adds	r5, #1
 80025fe:	4630      	mov	r0, r6
 8002600:	f04f 0e00 	mov.w	lr, #0
 8002604:	f857 2b04 	ldr.w	r2, [r7], #4
 8002608:	f8d0 c000 	ldr.w	ip, [r0]
 800260c:	b293      	uxth	r3, r2
 800260e:	ebae 0303 	sub.w	r3, lr, r3
 8002612:	0c12      	lsrs	r2, r2, #16
 8002614:	fa13 f38c 	uxtah	r3, r3, ip
 8002618:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800261c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002620:	b29b      	uxth	r3, r3
 8002622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002626:	45b9      	cmp	r9, r7
 8002628:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800262c:	f840 3b04 	str.w	r3, [r0], #4
 8002630:	d2e8      	bcs.n	8002604 <quorem+0xb0>
 8002632:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002636:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800263a:	b92a      	cbnz	r2, 8002648 <quorem+0xf4>
 800263c:	3b04      	subs	r3, #4
 800263e:	429e      	cmp	r6, r3
 8002640:	461a      	mov	r2, r3
 8002642:	d30b      	bcc.n	800265c <quorem+0x108>
 8002644:	f8c8 4010 	str.w	r4, [r8, #16]
 8002648:	4628      	mov	r0, r5
 800264a:	b003      	add	sp, #12
 800264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	3b04      	subs	r3, #4
 8002654:	2a00      	cmp	r2, #0
 8002656:	d1ca      	bne.n	80025ee <quorem+0x9a>
 8002658:	3c01      	subs	r4, #1
 800265a:	e7c5      	b.n	80025e8 <quorem+0x94>
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	3b04      	subs	r3, #4
 8002660:	2a00      	cmp	r2, #0
 8002662:	d1ef      	bne.n	8002644 <quorem+0xf0>
 8002664:	3c01      	subs	r4, #1
 8002666:	e7ea      	b.n	800263e <quorem+0xea>
 8002668:	2000      	movs	r0, #0
 800266a:	e7ee      	b.n	800264a <quorem+0xf6>
 800266c:	0000      	movs	r0, r0
	...

08002670 <_dtoa_r>:
 8002670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002674:	ec57 6b10 	vmov	r6, r7, d0
 8002678:	b097      	sub	sp, #92	; 0x5c
 800267a:	e9cd 6700 	strd	r6, r7, [sp]
 800267e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002680:	9107      	str	r1, [sp, #28]
 8002682:	4604      	mov	r4, r0
 8002684:	920a      	str	r2, [sp, #40]	; 0x28
 8002686:	930f      	str	r3, [sp, #60]	; 0x3c
 8002688:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800268a:	b93e      	cbnz	r6, 800269c <_dtoa_r+0x2c>
 800268c:	2010      	movs	r0, #16
 800268e:	f000 fdcb 	bl	8003228 <malloc>
 8002692:	6260      	str	r0, [r4, #36]	; 0x24
 8002694:	6046      	str	r6, [r0, #4]
 8002696:	6086      	str	r6, [r0, #8]
 8002698:	6006      	str	r6, [r0, #0]
 800269a:	60c6      	str	r6, [r0, #12]
 800269c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	b151      	cbz	r1, 80026b8 <_dtoa_r+0x48>
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	604a      	str	r2, [r1, #4]
 80026a6:	2301      	movs	r3, #1
 80026a8:	4093      	lsls	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]
 80026ac:	4620      	mov	r0, r4
 80026ae:	f000 fe02 	bl	80032b6 <_Bfree>
 80026b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	9b01      	ldr	r3, [sp, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfbf      	itttt	lt
 80026be:	2301      	movlt	r3, #1
 80026c0:	602b      	strlt	r3, [r5, #0]
 80026c2:	9b01      	ldrlt	r3, [sp, #4]
 80026c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80026c8:	bfb2      	itee	lt
 80026ca:	9301      	strlt	r3, [sp, #4]
 80026cc:	2300      	movge	r3, #0
 80026ce:	602b      	strge	r3, [r5, #0]
 80026d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80026d4:	4ba8      	ldr	r3, [pc, #672]	; (8002978 <_dtoa_r+0x308>)
 80026d6:	ea33 0308 	bics.w	r3, r3, r8
 80026da:	d11b      	bne.n	8002714 <_dtoa_r+0xa4>
 80026dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026de:	f242 730f 	movw	r3, #9999	; 0x270f
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	9b00      	ldr	r3, [sp, #0]
 80026e6:	b923      	cbnz	r3, 80026f2 <_dtoa_r+0x82>
 80026e8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80026ec:	2800      	cmp	r0, #0
 80026ee:	f000 8578 	beq.w	80031e2 <_dtoa_r+0xb72>
 80026f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80026f4:	b953      	cbnz	r3, 800270c <_dtoa_r+0x9c>
 80026f6:	4ba1      	ldr	r3, [pc, #644]	; (800297c <_dtoa_r+0x30c>)
 80026f8:	e021      	b.n	800273e <_dtoa_r+0xce>
 80026fa:	4ba1      	ldr	r3, [pc, #644]	; (8002980 <_dtoa_r+0x310>)
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	3308      	adds	r3, #8
 8002700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	9802      	ldr	r0, [sp, #8]
 8002706:	b017      	add	sp, #92	; 0x5c
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270c:	4b9b      	ldr	r3, [pc, #620]	; (800297c <_dtoa_r+0x30c>)
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	3303      	adds	r3, #3
 8002712:	e7f5      	b.n	8002700 <_dtoa_r+0x90>
 8002714:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002718:	2200      	movs	r2, #0
 800271a:	2300      	movs	r3, #0
 800271c:	4630      	mov	r0, r6
 800271e:	4639      	mov	r1, r7
 8002720:	f7fe f98e 	bl	8000a40 <__aeabi_dcmpeq>
 8002724:	4681      	mov	r9, r0
 8002726:	b160      	cbz	r0, 8002742 <_dtoa_r+0xd2>
 8002728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800272a:	2301      	movs	r3, #1
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8553 	beq.w	80031dc <_dtoa_r+0xb6c>
 8002736:	4b93      	ldr	r3, [pc, #588]	; (8002984 <_dtoa_r+0x314>)
 8002738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	3b01      	subs	r3, #1
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	e7e0      	b.n	8002704 <_dtoa_r+0x94>
 8002742:	aa14      	add	r2, sp, #80	; 0x50
 8002744:	a915      	add	r1, sp, #84	; 0x54
 8002746:	ec47 6b10 	vmov	d0, r6, r7
 800274a:	4620      	mov	r0, r4
 800274c:	f001 f801 	bl	8003752 <__d2b>
 8002750:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002754:	4682      	mov	sl, r0
 8002756:	2d00      	cmp	r5, #0
 8002758:	d07e      	beq.n	8002858 <_dtoa_r+0x1e8>
 800275a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800275e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002762:	4630      	mov	r0, r6
 8002764:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002768:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800276c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8002770:	2200      	movs	r2, #0
 8002772:	4b85      	ldr	r3, [pc, #532]	; (8002988 <_dtoa_r+0x318>)
 8002774:	f7fd fd48 	bl	8000208 <__aeabi_dsub>
 8002778:	a379      	add	r3, pc, #484	; (adr r3, 8002960 <_dtoa_r+0x2f0>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f7fd fef7 	bl	8000570 <__aeabi_dmul>
 8002782:	a379      	add	r3, pc, #484	; (adr r3, 8002968 <_dtoa_r+0x2f8>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd fd40 	bl	800020c <__adddf3>
 800278c:	4606      	mov	r6, r0
 800278e:	4628      	mov	r0, r5
 8002790:	460f      	mov	r7, r1
 8002792:	f7fd fe87 	bl	80004a4 <__aeabi_i2d>
 8002796:	a376      	add	r3, pc, #472	; (adr r3, 8002970 <_dtoa_r+0x300>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fee8 	bl	8000570 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4630      	mov	r0, r6
 80027a6:	4639      	mov	r1, r7
 80027a8:	f7fd fd30 	bl	800020c <__adddf3>
 80027ac:	4606      	mov	r6, r0
 80027ae:	460f      	mov	r7, r1
 80027b0:	f7fe f98e 	bl	8000ad0 <__aeabi_d2iz>
 80027b4:	2200      	movs	r2, #0
 80027b6:	4683      	mov	fp, r0
 80027b8:	2300      	movs	r3, #0
 80027ba:	4630      	mov	r0, r6
 80027bc:	4639      	mov	r1, r7
 80027be:	f7fe f949 	bl	8000a54 <__aeabi_dcmplt>
 80027c2:	b158      	cbz	r0, 80027dc <_dtoa_r+0x16c>
 80027c4:	4658      	mov	r0, fp
 80027c6:	f7fd fe6d 	bl	80004a4 <__aeabi_i2d>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4630      	mov	r0, r6
 80027d0:	4639      	mov	r1, r7
 80027d2:	f7fe f935 	bl	8000a40 <__aeabi_dcmpeq>
 80027d6:	b908      	cbnz	r0, 80027dc <_dtoa_r+0x16c>
 80027d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80027dc:	f1bb 0f16 	cmp.w	fp, #22
 80027e0:	d859      	bhi.n	8002896 <_dtoa_r+0x226>
 80027e2:	496a      	ldr	r1, [pc, #424]	; (800298c <_dtoa_r+0x31c>)
 80027e4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80027e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80027ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027f0:	f7fe f94e 	bl	8000a90 <__aeabi_dcmpgt>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d050      	beq.n	800289a <_dtoa_r+0x22a>
 80027f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80027fc:	2300      	movs	r3, #0
 80027fe:	930e      	str	r3, [sp, #56]	; 0x38
 8002800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002802:	1b5d      	subs	r5, r3, r5
 8002804:	1e6b      	subs	r3, r5, #1
 8002806:	9306      	str	r3, [sp, #24]
 8002808:	bf45      	ittet	mi
 800280a:	f1c5 0301 	rsbmi	r3, r5, #1
 800280e:	9305      	strmi	r3, [sp, #20]
 8002810:	2300      	movpl	r3, #0
 8002812:	2300      	movmi	r3, #0
 8002814:	bf4c      	ite	mi
 8002816:	9306      	strmi	r3, [sp, #24]
 8002818:	9305      	strpl	r3, [sp, #20]
 800281a:	f1bb 0f00 	cmp.w	fp, #0
 800281e:	db3e      	blt.n	800289e <_dtoa_r+0x22e>
 8002820:	9b06      	ldr	r3, [sp, #24]
 8002822:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002826:	445b      	add	r3, fp
 8002828:	9306      	str	r3, [sp, #24]
 800282a:	2300      	movs	r3, #0
 800282c:	9308      	str	r3, [sp, #32]
 800282e:	9b07      	ldr	r3, [sp, #28]
 8002830:	2b09      	cmp	r3, #9
 8002832:	f200 80af 	bhi.w	8002994 <_dtoa_r+0x324>
 8002836:	2b05      	cmp	r3, #5
 8002838:	bfc4      	itt	gt
 800283a:	3b04      	subgt	r3, #4
 800283c:	9307      	strgt	r3, [sp, #28]
 800283e:	9b07      	ldr	r3, [sp, #28]
 8002840:	f1a3 0302 	sub.w	r3, r3, #2
 8002844:	bfcc      	ite	gt
 8002846:	2600      	movgt	r6, #0
 8002848:	2601      	movle	r6, #1
 800284a:	2b03      	cmp	r3, #3
 800284c:	f200 80ae 	bhi.w	80029ac <_dtoa_r+0x33c>
 8002850:	e8df f003 	tbb	[pc, r3]
 8002854:	772f8482 	.word	0x772f8482
 8002858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800285a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800285c:	441d      	add	r5, r3
 800285e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002862:	2b20      	cmp	r3, #32
 8002864:	dd11      	ble.n	800288a <_dtoa_r+0x21a>
 8002866:	9a00      	ldr	r2, [sp, #0]
 8002868:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800286c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002870:	fa22 f000 	lsr.w	r0, r2, r0
 8002874:	fa08 f303 	lsl.w	r3, r8, r3
 8002878:	4318      	orrs	r0, r3
 800287a:	f7fd fe03 	bl	8000484 <__aeabi_ui2d>
 800287e:	2301      	movs	r3, #1
 8002880:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002884:	3d01      	subs	r5, #1
 8002886:	9312      	str	r3, [sp, #72]	; 0x48
 8002888:	e772      	b.n	8002770 <_dtoa_r+0x100>
 800288a:	f1c3 0020 	rsb	r0, r3, #32
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	fa03 f000 	lsl.w	r0, r3, r0
 8002894:	e7f1      	b.n	800287a <_dtoa_r+0x20a>
 8002896:	2301      	movs	r3, #1
 8002898:	e7b1      	b.n	80027fe <_dtoa_r+0x18e>
 800289a:	900e      	str	r0, [sp, #56]	; 0x38
 800289c:	e7b0      	b.n	8002800 <_dtoa_r+0x190>
 800289e:	9b05      	ldr	r3, [sp, #20]
 80028a0:	eba3 030b 	sub.w	r3, r3, fp
 80028a4:	9305      	str	r3, [sp, #20]
 80028a6:	f1cb 0300 	rsb	r3, fp, #0
 80028aa:	9308      	str	r3, [sp, #32]
 80028ac:	2300      	movs	r3, #0
 80028ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80028b0:	e7bd      	b.n	800282e <_dtoa_r+0x1be>
 80028b2:	2301      	movs	r3, #1
 80028b4:	9309      	str	r3, [sp, #36]	; 0x24
 80028b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	dd7a      	ble.n	80029b2 <_dtoa_r+0x342>
 80028bc:	9304      	str	r3, [sp, #16]
 80028be:	9303      	str	r3, [sp, #12]
 80028c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80028c2:	2200      	movs	r2, #0
 80028c4:	606a      	str	r2, [r5, #4]
 80028c6:	2104      	movs	r1, #4
 80028c8:	f101 0214 	add.w	r2, r1, #20
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d975      	bls.n	80029bc <_dtoa_r+0x34c>
 80028d0:	6869      	ldr	r1, [r5, #4]
 80028d2:	4620      	mov	r0, r4
 80028d4:	f000 fcbb 	bl	800324e <_Balloc>
 80028d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028da:	6028      	str	r0, [r5, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	9b03      	ldr	r3, [sp, #12]
 80028e2:	2b0e      	cmp	r3, #14
 80028e4:	f200 80e5 	bhi.w	8002ab2 <_dtoa_r+0x442>
 80028e8:	2e00      	cmp	r6, #0
 80028ea:	f000 80e2 	beq.w	8002ab2 <_dtoa_r+0x442>
 80028ee:	ed9d 7b00 	vldr	d7, [sp]
 80028f2:	f1bb 0f00 	cmp.w	fp, #0
 80028f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80028fa:	dd74      	ble.n	80029e6 <_dtoa_r+0x376>
 80028fc:	4a23      	ldr	r2, [pc, #140]	; (800298c <_dtoa_r+0x31c>)
 80028fe:	f00b 030f 	and.w	r3, fp, #15
 8002902:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002906:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800290a:	06f0      	lsls	r0, r6, #27
 800290c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002910:	d559      	bpl.n	80029c6 <_dtoa_r+0x356>
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <_dtoa_r+0x320>)
 8002914:	ec51 0b17 	vmov	r0, r1, d7
 8002918:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800291c:	f7fd ff52 	bl	80007c4 <__aeabi_ddiv>
 8002920:	e9cd 0100 	strd	r0, r1, [sp]
 8002924:	f006 060f 	and.w	r6, r6, #15
 8002928:	2503      	movs	r5, #3
 800292a:	4f19      	ldr	r7, [pc, #100]	; (8002990 <_dtoa_r+0x320>)
 800292c:	2e00      	cmp	r6, #0
 800292e:	d14c      	bne.n	80029ca <_dtoa_r+0x35a>
 8002930:	4642      	mov	r2, r8
 8002932:	464b      	mov	r3, r9
 8002934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002938:	f7fd ff44 	bl	80007c4 <__aeabi_ddiv>
 800293c:	e9cd 0100 	strd	r0, r1, [sp]
 8002940:	e06a      	b.n	8002a18 <_dtoa_r+0x3a8>
 8002942:	2301      	movs	r3, #1
 8002944:	9309      	str	r3, [sp, #36]	; 0x24
 8002946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002948:	445b      	add	r3, fp
 800294a:	9304      	str	r3, [sp, #16]
 800294c:	3301      	adds	r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	9303      	str	r3, [sp, #12]
 8002952:	bfb8      	it	lt
 8002954:	2301      	movlt	r3, #1
 8002956:	e7b3      	b.n	80028c0 <_dtoa_r+0x250>
 8002958:	2300      	movs	r3, #0
 800295a:	e7ab      	b.n	80028b4 <_dtoa_r+0x244>
 800295c:	2300      	movs	r3, #0
 800295e:	e7f1      	b.n	8002944 <_dtoa_r+0x2d4>
 8002960:	636f4361 	.word	0x636f4361
 8002964:	3fd287a7 	.word	0x3fd287a7
 8002968:	8b60c8b3 	.word	0x8b60c8b3
 800296c:	3fc68a28 	.word	0x3fc68a28
 8002970:	509f79fb 	.word	0x509f79fb
 8002974:	3fd34413 	.word	0x3fd34413
 8002978:	7ff00000 	.word	0x7ff00000
 800297c:	0800397b 	.word	0x0800397b
 8002980:	08003972 	.word	0x08003972
 8002984:	08003971 	.word	0x08003971
 8002988:	3ff80000 	.word	0x3ff80000
 800298c:	080039a8 	.word	0x080039a8
 8002990:	08003980 	.word	0x08003980
 8002994:	2601      	movs	r6, #1
 8002996:	2300      	movs	r3, #0
 8002998:	9307      	str	r3, [sp, #28]
 800299a:	9609      	str	r6, [sp, #36]	; 0x24
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
 80029a0:	9304      	str	r3, [sp, #16]
 80029a2:	9303      	str	r3, [sp, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2312      	movs	r3, #18
 80029a8:	920a      	str	r2, [sp, #40]	; 0x28
 80029aa:	e789      	b.n	80028c0 <_dtoa_r+0x250>
 80029ac:	2301      	movs	r3, #1
 80029ae:	9309      	str	r3, [sp, #36]	; 0x24
 80029b0:	e7f4      	b.n	800299c <_dtoa_r+0x32c>
 80029b2:	2301      	movs	r3, #1
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	461a      	mov	r2, r3
 80029ba:	e7f5      	b.n	80029a8 <_dtoa_r+0x338>
 80029bc:	686a      	ldr	r2, [r5, #4]
 80029be:	3201      	adds	r2, #1
 80029c0:	606a      	str	r2, [r5, #4]
 80029c2:	0049      	lsls	r1, r1, #1
 80029c4:	e780      	b.n	80028c8 <_dtoa_r+0x258>
 80029c6:	2502      	movs	r5, #2
 80029c8:	e7af      	b.n	800292a <_dtoa_r+0x2ba>
 80029ca:	07f1      	lsls	r1, r6, #31
 80029cc:	d508      	bpl.n	80029e0 <_dtoa_r+0x370>
 80029ce:	4640      	mov	r0, r8
 80029d0:	4649      	mov	r1, r9
 80029d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d6:	f7fd fdcb 	bl	8000570 <__aeabi_dmul>
 80029da:	3501      	adds	r5, #1
 80029dc:	4680      	mov	r8, r0
 80029de:	4689      	mov	r9, r1
 80029e0:	1076      	asrs	r6, r6, #1
 80029e2:	3708      	adds	r7, #8
 80029e4:	e7a2      	b.n	800292c <_dtoa_r+0x2bc>
 80029e6:	f000 809d 	beq.w	8002b24 <_dtoa_r+0x4b4>
 80029ea:	f1cb 0600 	rsb	r6, fp, #0
 80029ee:	4b9f      	ldr	r3, [pc, #636]	; (8002c6c <_dtoa_r+0x5fc>)
 80029f0:	4f9f      	ldr	r7, [pc, #636]	; (8002c70 <_dtoa_r+0x600>)
 80029f2:	f006 020f 	and.w	r2, r6, #15
 80029f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002a02:	f7fd fdb5 	bl	8000570 <__aeabi_dmul>
 8002a06:	e9cd 0100 	strd	r0, r1, [sp]
 8002a0a:	1136      	asrs	r6, r6, #4
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2502      	movs	r5, #2
 8002a10:	2e00      	cmp	r6, #0
 8002a12:	d17c      	bne.n	8002b0e <_dtoa_r+0x49e>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d191      	bne.n	800293c <_dtoa_r+0x2cc>
 8002a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8084 	beq.w	8002b28 <_dtoa_r+0x4b8>
 8002a20:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002a24:	2200      	movs	r2, #0
 8002a26:	4b93      	ldr	r3, [pc, #588]	; (8002c74 <_dtoa_r+0x604>)
 8002a28:	4640      	mov	r0, r8
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	f7fe f812 	bl	8000a54 <__aeabi_dcmplt>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d079      	beq.n	8002b28 <_dtoa_r+0x4b8>
 8002a34:	9b03      	ldr	r3, [sp, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d076      	beq.n	8002b28 <_dtoa_r+0x4b8>
 8002a3a:	9b04      	ldr	r3, [sp, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dd34      	ble.n	8002aaa <_dtoa_r+0x43a>
 8002a40:	2200      	movs	r2, #0
 8002a42:	4b8d      	ldr	r3, [pc, #564]	; (8002c78 <_dtoa_r+0x608>)
 8002a44:	4640      	mov	r0, r8
 8002a46:	4649      	mov	r1, r9
 8002a48:	f7fd fd92 	bl	8000570 <__aeabi_dmul>
 8002a4c:	e9cd 0100 	strd	r0, r1, [sp]
 8002a50:	9e04      	ldr	r6, [sp, #16]
 8002a52:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002a56:	3501      	adds	r5, #1
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f7fd fd23 	bl	80004a4 <__aeabi_i2d>
 8002a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a62:	f7fd fd85 	bl	8000570 <__aeabi_dmul>
 8002a66:	2200      	movs	r2, #0
 8002a68:	4b84      	ldr	r3, [pc, #528]	; (8002c7c <_dtoa_r+0x60c>)
 8002a6a:	f7fd fbcf 	bl	800020c <__adddf3>
 8002a6e:	4680      	mov	r8, r0
 8002a70:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8002a74:	2e00      	cmp	r6, #0
 8002a76:	d15a      	bne.n	8002b2e <_dtoa_r+0x4be>
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4b81      	ldr	r3, [pc, #516]	; (8002c80 <_dtoa_r+0x610>)
 8002a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a80:	f7fd fbc2 	bl	8000208 <__aeabi_dsub>
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	e9cd 0100 	strd	r0, r1, [sp]
 8002a8c:	f7fe f800 	bl	8000a90 <__aeabi_dcmpgt>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	f040 829b 	bne.w	8002fcc <_dtoa_r+0x95c>
 8002a96:	4642      	mov	r2, r8
 8002a98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002aa0:	f7fd ffd8 	bl	8000a54 <__aeabi_dcmplt>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	f040 828f 	bne.w	8002fc8 <_dtoa_r+0x958>
 8002aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002aae:	e9cd 2300 	strd	r2, r3, [sp]
 8002ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f2c0 8150 	blt.w	8002d5a <_dtoa_r+0x6ea>
 8002aba:	f1bb 0f0e 	cmp.w	fp, #14
 8002abe:	f300 814c 	bgt.w	8002d5a <_dtoa_r+0x6ea>
 8002ac2:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <_dtoa_r+0x5fc>)
 8002ac4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002ac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f280 80da 	bge.w	8002c88 <_dtoa_r+0x618>
 8002ad4:	9b03      	ldr	r3, [sp, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f300 80d6 	bgt.w	8002c88 <_dtoa_r+0x618>
 8002adc:	f040 8273 	bne.w	8002fc6 <_dtoa_r+0x956>
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <_dtoa_r+0x610>)
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	f7fd fd42 	bl	8000570 <__aeabi_dmul>
 8002aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002af0:	f7fd ffc4 	bl	8000a7c <__aeabi_dcmpge>
 8002af4:	9e03      	ldr	r6, [sp, #12]
 8002af6:	4637      	mov	r7, r6
 8002af8:	2800      	cmp	r0, #0
 8002afa:	f040 824a 	bne.w	8002f92 <_dtoa_r+0x922>
 8002afe:	9b02      	ldr	r3, [sp, #8]
 8002b00:	9a02      	ldr	r2, [sp, #8]
 8002b02:	1c5d      	adds	r5, r3, #1
 8002b04:	2331      	movs	r3, #49	; 0x31
 8002b06:	7013      	strb	r3, [r2, #0]
 8002b08:	f10b 0b01 	add.w	fp, fp, #1
 8002b0c:	e245      	b.n	8002f9a <_dtoa_r+0x92a>
 8002b0e:	07f2      	lsls	r2, r6, #31
 8002b10:	d505      	bpl.n	8002b1e <_dtoa_r+0x4ae>
 8002b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b16:	f7fd fd2b 	bl	8000570 <__aeabi_dmul>
 8002b1a:	3501      	adds	r5, #1
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	1076      	asrs	r6, r6, #1
 8002b20:	3708      	adds	r7, #8
 8002b22:	e775      	b.n	8002a10 <_dtoa_r+0x3a0>
 8002b24:	2502      	movs	r5, #2
 8002b26:	e777      	b.n	8002a18 <_dtoa_r+0x3a8>
 8002b28:	465f      	mov	r7, fp
 8002b2a:	9e03      	ldr	r6, [sp, #12]
 8002b2c:	e794      	b.n	8002a58 <_dtoa_r+0x3e8>
 8002b2e:	9a02      	ldr	r2, [sp, #8]
 8002b30:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <_dtoa_r+0x5fc>)
 8002b32:	4432      	add	r2, r6
 8002b34:	9213      	str	r2, [sp, #76]	; 0x4c
 8002b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b38:	1e71      	subs	r1, r6, #1
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d048      	beq.n	8002bd0 <_dtoa_r+0x560>
 8002b3e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	2000      	movs	r0, #0
 8002b48:	494e      	ldr	r1, [pc, #312]	; (8002c84 <_dtoa_r+0x614>)
 8002b4a:	f7fd fe3b 	bl	80007c4 <__aeabi_ddiv>
 8002b4e:	4642      	mov	r2, r8
 8002b50:	464b      	mov	r3, r9
 8002b52:	f7fd fb59 	bl	8000208 <__aeabi_dsub>
 8002b56:	9d02      	ldr	r5, [sp, #8]
 8002b58:	4680      	mov	r8, r0
 8002b5a:	4689      	mov	r9, r1
 8002b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b60:	f7fd ffb6 	bl	8000ad0 <__aeabi_d2iz>
 8002b64:	4606      	mov	r6, r0
 8002b66:	f7fd fc9d 	bl	80004a4 <__aeabi_i2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b72:	f7fd fb49 	bl	8000208 <__aeabi_dsub>
 8002b76:	3630      	adds	r6, #48	; 0x30
 8002b78:	f805 6b01 	strb.w	r6, [r5], #1
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	e9cd 0100 	strd	r0, r1, [sp]
 8002b84:	f7fd ff66 	bl	8000a54 <__aeabi_dcmplt>
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d165      	bne.n	8002c58 <_dtoa_r+0x5e8>
 8002b8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b90:	2000      	movs	r0, #0
 8002b92:	4938      	ldr	r1, [pc, #224]	; (8002c74 <_dtoa_r+0x604>)
 8002b94:	f7fd fb38 	bl	8000208 <__aeabi_dsub>
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	f7fd ff5a 	bl	8000a54 <__aeabi_dcmplt>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f040 80ba 	bne.w	8002d1a <_dtoa_r+0x6aa>
 8002ba6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002ba8:	429d      	cmp	r5, r3
 8002baa:	f43f af7e 	beq.w	8002aaa <_dtoa_r+0x43a>
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <_dtoa_r+0x608>)
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	f7fd fcdb 	bl	8000570 <__aeabi_dmul>
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4680      	mov	r8, r0
 8002bbe:	4689      	mov	r9, r1
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <_dtoa_r+0x608>)
 8002bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bc6:	f7fd fcd3 	bl	8000570 <__aeabi_dmul>
 8002bca:	e9cd 0100 	strd	r0, r1, [sp]
 8002bce:	e7c5      	b.n	8002b5c <_dtoa_r+0x4ec>
 8002bd0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bdc:	f7fd fcc8 	bl	8000570 <__aeabi_dmul>
 8002be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002be4:	9d02      	ldr	r5, [sp, #8]
 8002be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bea:	f7fd ff71 	bl	8000ad0 <__aeabi_d2iz>
 8002bee:	4606      	mov	r6, r0
 8002bf0:	f7fd fc58 	bl	80004a4 <__aeabi_i2d>
 8002bf4:	3630      	adds	r6, #48	; 0x30
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bfe:	f7fd fb03 	bl	8000208 <__aeabi_dsub>
 8002c02:	f805 6b01 	strb.w	r6, [r5], #1
 8002c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002c08:	42ab      	cmp	r3, r5
 8002c0a:	4680      	mov	r8, r0
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	d125      	bne.n	8002c60 <_dtoa_r+0x5f0>
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <_dtoa_r+0x614>)
 8002c16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002c1a:	f7fd faf7 	bl	800020c <__adddf3>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4640      	mov	r0, r8
 8002c24:	4649      	mov	r1, r9
 8002c26:	f7fd ff33 	bl	8000a90 <__aeabi_dcmpgt>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d175      	bne.n	8002d1a <_dtoa_r+0x6aa>
 8002c2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002c32:	2000      	movs	r0, #0
 8002c34:	4913      	ldr	r1, [pc, #76]	; (8002c84 <_dtoa_r+0x614>)
 8002c36:	f7fd fae7 	bl	8000208 <__aeabi_dsub>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4649      	mov	r1, r9
 8002c42:	f7fd ff07 	bl	8000a54 <__aeabi_dcmplt>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f43f af2f 	beq.w	8002aaa <_dtoa_r+0x43a>
 8002c4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	f105 32ff 	add.w	r2, r5, #4294967295
 8002c56:	d001      	beq.n	8002c5c <_dtoa_r+0x5ec>
 8002c58:	46bb      	mov	fp, r7
 8002c5a:	e04d      	b.n	8002cf8 <_dtoa_r+0x688>
 8002c5c:	4615      	mov	r5, r2
 8002c5e:	e7f5      	b.n	8002c4c <_dtoa_r+0x5dc>
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <_dtoa_r+0x608>)
 8002c62:	f7fd fc85 	bl	8000570 <__aeabi_dmul>
 8002c66:	e9cd 0100 	strd	r0, r1, [sp]
 8002c6a:	e7bc      	b.n	8002be6 <_dtoa_r+0x576>
 8002c6c:	080039a8 	.word	0x080039a8
 8002c70:	08003980 	.word	0x08003980
 8002c74:	3ff00000 	.word	0x3ff00000
 8002c78:	40240000 	.word	0x40240000
 8002c7c:	401c0000 	.word	0x401c0000
 8002c80:	40140000 	.word	0x40140000
 8002c84:	3fe00000 	.word	0x3fe00000
 8002c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002c8c:	9d02      	ldr	r5, [sp, #8]
 8002c8e:	4642      	mov	r2, r8
 8002c90:	464b      	mov	r3, r9
 8002c92:	4630      	mov	r0, r6
 8002c94:	4639      	mov	r1, r7
 8002c96:	f7fd fd95 	bl	80007c4 <__aeabi_ddiv>
 8002c9a:	f7fd ff19 	bl	8000ad0 <__aeabi_d2iz>
 8002c9e:	9000      	str	r0, [sp, #0]
 8002ca0:	f7fd fc00 	bl	80004a4 <__aeabi_i2d>
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	f7fd fc62 	bl	8000570 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	4639      	mov	r1, r7
 8002cb4:	f7fd faa8 	bl	8000208 <__aeabi_dsub>
 8002cb8:	9e00      	ldr	r6, [sp, #0]
 8002cba:	9f03      	ldr	r7, [sp, #12]
 8002cbc:	3630      	adds	r6, #48	; 0x30
 8002cbe:	f805 6b01 	strb.w	r6, [r5], #1
 8002cc2:	9e02      	ldr	r6, [sp, #8]
 8002cc4:	1bae      	subs	r6, r5, r6
 8002cc6:	42b7      	cmp	r7, r6
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	d138      	bne.n	8002d40 <_dtoa_r+0x6d0>
 8002cce:	f7fd fa9d 	bl	800020c <__adddf3>
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	460f      	mov	r7, r1
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4640      	mov	r0, r8
 8002cdc:	4649      	mov	r1, r9
 8002cde:	f7fd feb9 	bl	8000a54 <__aeabi_dcmplt>
 8002ce2:	b9c8      	cbnz	r0, 8002d18 <_dtoa_r+0x6a8>
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4640      	mov	r0, r8
 8002cea:	4649      	mov	r1, r9
 8002cec:	f7fd fea8 	bl	8000a40 <__aeabi_dcmpeq>
 8002cf0:	b110      	cbz	r0, 8002cf8 <_dtoa_r+0x688>
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	07db      	lsls	r3, r3, #31
 8002cf6:	d40f      	bmi.n	8002d18 <_dtoa_r+0x6a8>
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 fadb 	bl	80032b6 <_Bfree>
 8002d00:	2300      	movs	r3, #0
 8002d02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002d04:	702b      	strb	r3, [r5, #0]
 8002d06:	f10b 0301 	add.w	r3, fp, #1
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f43f acf8 	beq.w	8002704 <_dtoa_r+0x94>
 8002d14:	601d      	str	r5, [r3, #0]
 8002d16:	e4f5      	b.n	8002704 <_dtoa_r+0x94>
 8002d18:	465f      	mov	r7, fp
 8002d1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002d1e:	2a39      	cmp	r2, #57	; 0x39
 8002d20:	f105 33ff 	add.w	r3, r5, #4294967295
 8002d24:	d106      	bne.n	8002d34 <_dtoa_r+0x6c4>
 8002d26:	9a02      	ldr	r2, [sp, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d107      	bne.n	8002d3c <_dtoa_r+0x6cc>
 8002d2c:	2330      	movs	r3, #48	; 0x30
 8002d2e:	7013      	strb	r3, [r2, #0]
 8002d30:	3701      	adds	r7, #1
 8002d32:	4613      	mov	r3, r2
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	3201      	adds	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e78d      	b.n	8002c58 <_dtoa_r+0x5e8>
 8002d3c:	461d      	mov	r5, r3
 8002d3e:	e7ec      	b.n	8002d1a <_dtoa_r+0x6aa>
 8002d40:	2200      	movs	r2, #0
 8002d42:	4ba4      	ldr	r3, [pc, #656]	; (8002fd4 <_dtoa_r+0x964>)
 8002d44:	f7fd fc14 	bl	8000570 <__aeabi_dmul>
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4606      	mov	r6, r0
 8002d4e:	460f      	mov	r7, r1
 8002d50:	f7fd fe76 	bl	8000a40 <__aeabi_dcmpeq>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d09a      	beq.n	8002c8e <_dtoa_r+0x61e>
 8002d58:	e7ce      	b.n	8002cf8 <_dtoa_r+0x688>
 8002d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	f000 80cd 	beq.w	8002efc <_dtoa_r+0x88c>
 8002d62:	9a07      	ldr	r2, [sp, #28]
 8002d64:	2a01      	cmp	r2, #1
 8002d66:	f300 80af 	bgt.w	8002ec8 <_dtoa_r+0x858>
 8002d6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	f000 80a7 	beq.w	8002ec0 <_dtoa_r+0x850>
 8002d72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002d76:	9e08      	ldr	r6, [sp, #32]
 8002d78:	9d05      	ldr	r5, [sp, #20]
 8002d7a:	9a05      	ldr	r2, [sp, #20]
 8002d7c:	441a      	add	r2, r3
 8002d7e:	9205      	str	r2, [sp, #20]
 8002d80:	9a06      	ldr	r2, [sp, #24]
 8002d82:	2101      	movs	r1, #1
 8002d84:	441a      	add	r2, r3
 8002d86:	4620      	mov	r0, r4
 8002d88:	9206      	str	r2, [sp, #24]
 8002d8a:	f000 fb34 	bl	80033f6 <__i2b>
 8002d8e:	4607      	mov	r7, r0
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	dd0c      	ble.n	8002dae <_dtoa_r+0x73e>
 8002d94:	9b06      	ldr	r3, [sp, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	dd09      	ble.n	8002dae <_dtoa_r+0x73e>
 8002d9a:	42ab      	cmp	r3, r5
 8002d9c:	9a05      	ldr	r2, [sp, #20]
 8002d9e:	bfa8      	it	ge
 8002da0:	462b      	movge	r3, r5
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	9205      	str	r2, [sp, #20]
 8002da6:	9a06      	ldr	r2, [sp, #24]
 8002da8:	1aed      	subs	r5, r5, r3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	9306      	str	r3, [sp, #24]
 8002dae:	9b08      	ldr	r3, [sp, #32]
 8002db0:	b1f3      	cbz	r3, 8002df0 <_dtoa_r+0x780>
 8002db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a5 	beq.w	8002f04 <_dtoa_r+0x894>
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	dd10      	ble.n	8002de0 <_dtoa_r+0x770>
 8002dbe:	4639      	mov	r1, r7
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f000 fbae 	bl	8003524 <__pow5mult>
 8002dc8:	4652      	mov	r2, sl
 8002dca:	4601      	mov	r1, r0
 8002dcc:	4607      	mov	r7, r0
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f000 fb1a 	bl	8003408 <__multiply>
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	4680      	mov	r8, r0
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f000 fa6c 	bl	80032b6 <_Bfree>
 8002dde:	46c2      	mov	sl, r8
 8002de0:	9b08      	ldr	r3, [sp, #32]
 8002de2:	1b9a      	subs	r2, r3, r6
 8002de4:	d004      	beq.n	8002df0 <_dtoa_r+0x780>
 8002de6:	4651      	mov	r1, sl
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 fb9b 	bl	8003524 <__pow5mult>
 8002dee:	4682      	mov	sl, r0
 8002df0:	2101      	movs	r1, #1
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 faff 	bl	80033f6 <__i2b>
 8002df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	4606      	mov	r6, r0
 8002dfe:	f340 8083 	ble.w	8002f08 <_dtoa_r+0x898>
 8002e02:	461a      	mov	r2, r3
 8002e04:	4601      	mov	r1, r0
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 fb8c 	bl	8003524 <__pow5mult>
 8002e0c:	9b07      	ldr	r3, [sp, #28]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	4606      	mov	r6, r0
 8002e12:	dd7c      	ble.n	8002f0e <_dtoa_r+0x89e>
 8002e14:	f04f 0800 	mov.w	r8, #0
 8002e18:	6933      	ldr	r3, [r6, #16]
 8002e1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002e1e:	6918      	ldr	r0, [r3, #16]
 8002e20:	f000 fa9b 	bl	800335a <__hi0bits>
 8002e24:	f1c0 0020 	rsb	r0, r0, #32
 8002e28:	9b06      	ldr	r3, [sp, #24]
 8002e2a:	4418      	add	r0, r3
 8002e2c:	f010 001f 	ands.w	r0, r0, #31
 8002e30:	f000 8096 	beq.w	8002f60 <_dtoa_r+0x8f0>
 8002e34:	f1c0 0320 	rsb	r3, r0, #32
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	f340 8087 	ble.w	8002f4c <_dtoa_r+0x8dc>
 8002e3e:	9b05      	ldr	r3, [sp, #20]
 8002e40:	f1c0 001c 	rsb	r0, r0, #28
 8002e44:	4403      	add	r3, r0
 8002e46:	9305      	str	r3, [sp, #20]
 8002e48:	9b06      	ldr	r3, [sp, #24]
 8002e4a:	4405      	add	r5, r0
 8002e4c:	4403      	add	r3, r0
 8002e4e:	9306      	str	r3, [sp, #24]
 8002e50:	9b05      	ldr	r3, [sp, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	dd05      	ble.n	8002e62 <_dtoa_r+0x7f2>
 8002e56:	4651      	mov	r1, sl
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f000 fbb0 	bl	80035c0 <__lshift>
 8002e60:	4682      	mov	sl, r0
 8002e62:	9b06      	ldr	r3, [sp, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dd05      	ble.n	8002e74 <_dtoa_r+0x804>
 8002e68:	4631      	mov	r1, r6
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 fba7 	bl	80035c0 <__lshift>
 8002e72:	4606      	mov	r6, r0
 8002e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d074      	beq.n	8002f64 <_dtoa_r+0x8f4>
 8002e7a:	4631      	mov	r1, r6
 8002e7c:	4650      	mov	r0, sl
 8002e7e:	f000 fbf0 	bl	8003662 <__mcmp>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	da6e      	bge.n	8002f64 <_dtoa_r+0x8f4>
 8002e86:	2300      	movs	r3, #0
 8002e88:	4651      	mov	r1, sl
 8002e8a:	220a      	movs	r2, #10
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f000 fa29 	bl	80032e4 <__multadd>
 8002e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002e98:	4682      	mov	sl, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 81a8 	beq.w	80031f0 <_dtoa_r+0xb80>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	220a      	movs	r2, #10
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f000 fa1c 	bl	80032e4 <__multadd>
 8002eac:	9b04      	ldr	r3, [sp, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	4607      	mov	r7, r0
 8002eb2:	f300 80c8 	bgt.w	8003046 <_dtoa_r+0x9d6>
 8002eb6:	9b07      	ldr	r3, [sp, #28]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f340 80c4 	ble.w	8003046 <_dtoa_r+0x9d6>
 8002ebe:	e059      	b.n	8002f74 <_dtoa_r+0x904>
 8002ec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ec2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002ec6:	e756      	b.n	8002d76 <_dtoa_r+0x706>
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	1e5e      	subs	r6, r3, #1
 8002ecc:	9b08      	ldr	r3, [sp, #32]
 8002ece:	42b3      	cmp	r3, r6
 8002ed0:	bfbf      	itttt	lt
 8002ed2:	9b08      	ldrlt	r3, [sp, #32]
 8002ed4:	9608      	strlt	r6, [sp, #32]
 8002ed6:	1af2      	sublt	r2, r6, r3
 8002ed8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8002eda:	bfb6      	itet	lt
 8002edc:	189b      	addlt	r3, r3, r2
 8002ede:	1b9e      	subge	r6, r3, r6
 8002ee0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002ee2:	9b03      	ldr	r3, [sp, #12]
 8002ee4:	bfb8      	it	lt
 8002ee6:	2600      	movlt	r6, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bfb9      	ittee	lt
 8002eec:	9b05      	ldrlt	r3, [sp, #20]
 8002eee:	9a03      	ldrlt	r2, [sp, #12]
 8002ef0:	9d05      	ldrge	r5, [sp, #20]
 8002ef2:	9b03      	ldrge	r3, [sp, #12]
 8002ef4:	bfbc      	itt	lt
 8002ef6:	1a9d      	sublt	r5, r3, r2
 8002ef8:	2300      	movlt	r3, #0
 8002efa:	e73e      	b.n	8002d7a <_dtoa_r+0x70a>
 8002efc:	9e08      	ldr	r6, [sp, #32]
 8002efe:	9d05      	ldr	r5, [sp, #20]
 8002f00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002f02:	e745      	b.n	8002d90 <_dtoa_r+0x720>
 8002f04:	9a08      	ldr	r2, [sp, #32]
 8002f06:	e76e      	b.n	8002de6 <_dtoa_r+0x776>
 8002f08:	9b07      	ldr	r3, [sp, #28]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	dc19      	bgt.n	8002f42 <_dtoa_r+0x8d2>
 8002f0e:	9b00      	ldr	r3, [sp, #0]
 8002f10:	b9bb      	cbnz	r3, 8002f42 <_dtoa_r+0x8d2>
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f18:	b99b      	cbnz	r3, 8002f42 <_dtoa_r+0x8d2>
 8002f1a:	9b01      	ldr	r3, [sp, #4]
 8002f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f20:	0d1b      	lsrs	r3, r3, #20
 8002f22:	051b      	lsls	r3, r3, #20
 8002f24:	b183      	cbz	r3, 8002f48 <_dtoa_r+0x8d8>
 8002f26:	9b05      	ldr	r3, [sp, #20]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	9305      	str	r3, [sp, #20]
 8002f2c:	9b06      	ldr	r3, [sp, #24]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	9306      	str	r3, [sp, #24]
 8002f32:	f04f 0801 	mov.w	r8, #1
 8002f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af6d 	bne.w	8002e18 <_dtoa_r+0x7a8>
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e772      	b.n	8002e28 <_dtoa_r+0x7b8>
 8002f42:	f04f 0800 	mov.w	r8, #0
 8002f46:	e7f6      	b.n	8002f36 <_dtoa_r+0x8c6>
 8002f48:	4698      	mov	r8, r3
 8002f4a:	e7f4      	b.n	8002f36 <_dtoa_r+0x8c6>
 8002f4c:	d080      	beq.n	8002e50 <_dtoa_r+0x7e0>
 8002f4e:	9a05      	ldr	r2, [sp, #20]
 8002f50:	331c      	adds	r3, #28
 8002f52:	441a      	add	r2, r3
 8002f54:	9205      	str	r2, [sp, #20]
 8002f56:	9a06      	ldr	r2, [sp, #24]
 8002f58:	441a      	add	r2, r3
 8002f5a:	441d      	add	r5, r3
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	e776      	b.n	8002e4e <_dtoa_r+0x7de>
 8002f60:	4603      	mov	r3, r0
 8002f62:	e7f4      	b.n	8002f4e <_dtoa_r+0x8de>
 8002f64:	9b03      	ldr	r3, [sp, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	dc36      	bgt.n	8002fd8 <_dtoa_r+0x968>
 8002f6a:	9b07      	ldr	r3, [sp, #28]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	dd33      	ble.n	8002fd8 <_dtoa_r+0x968>
 8002f70:	9b03      	ldr	r3, [sp, #12]
 8002f72:	9304      	str	r3, [sp, #16]
 8002f74:	9b04      	ldr	r3, [sp, #16]
 8002f76:	b963      	cbnz	r3, 8002f92 <_dtoa_r+0x922>
 8002f78:	4631      	mov	r1, r6
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f000 f9b1 	bl	80032e4 <__multadd>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4606      	mov	r6, r0
 8002f86:	4650      	mov	r0, sl
 8002f88:	f000 fb6b 	bl	8003662 <__mcmp>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	f73f adb6 	bgt.w	8002afe <_dtoa_r+0x48e>
 8002f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f94:	9d02      	ldr	r5, [sp, #8]
 8002f96:	ea6f 0b03 	mvn.w	fp, r3
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9303      	str	r3, [sp, #12]
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 f988 	bl	80032b6 <_Bfree>
 8002fa6:	2f00      	cmp	r7, #0
 8002fa8:	f43f aea6 	beq.w	8002cf8 <_dtoa_r+0x688>
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	b12b      	cbz	r3, 8002fbc <_dtoa_r+0x94c>
 8002fb0:	42bb      	cmp	r3, r7
 8002fb2:	d003      	beq.n	8002fbc <_dtoa_r+0x94c>
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f000 f97d 	bl	80032b6 <_Bfree>
 8002fbc:	4639      	mov	r1, r7
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 f979 	bl	80032b6 <_Bfree>
 8002fc4:	e698      	b.n	8002cf8 <_dtoa_r+0x688>
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	4637      	mov	r7, r6
 8002fca:	e7e2      	b.n	8002f92 <_dtoa_r+0x922>
 8002fcc:	46bb      	mov	fp, r7
 8002fce:	4637      	mov	r7, r6
 8002fd0:	e595      	b.n	8002afe <_dtoa_r+0x48e>
 8002fd2:	bf00      	nop
 8002fd4:	40240000 	.word	0x40240000
 8002fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fda:	bb93      	cbnz	r3, 8003042 <_dtoa_r+0x9d2>
 8002fdc:	9b03      	ldr	r3, [sp, #12]
 8002fde:	9304      	str	r3, [sp, #16]
 8002fe0:	9d02      	ldr	r5, [sp, #8]
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4650      	mov	r0, sl
 8002fe6:	f7ff fab5 	bl	8002554 <quorem>
 8002fea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002fee:	f805 9b01 	strb.w	r9, [r5], #1
 8002ff2:	9b02      	ldr	r3, [sp, #8]
 8002ff4:	9a04      	ldr	r2, [sp, #16]
 8002ff6:	1aeb      	subs	r3, r5, r3
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f300 80dc 	bgt.w	80031b6 <_dtoa_r+0xb46>
 8002ffe:	9b02      	ldr	r3, [sp, #8]
 8003000:	2a01      	cmp	r2, #1
 8003002:	bfac      	ite	ge
 8003004:	189b      	addge	r3, r3, r2
 8003006:	3301      	addlt	r3, #1
 8003008:	4698      	mov	r8, r3
 800300a:	2300      	movs	r3, #0
 800300c:	9303      	str	r3, [sp, #12]
 800300e:	4651      	mov	r1, sl
 8003010:	2201      	movs	r2, #1
 8003012:	4620      	mov	r0, r4
 8003014:	f000 fad4 	bl	80035c0 <__lshift>
 8003018:	4631      	mov	r1, r6
 800301a:	4682      	mov	sl, r0
 800301c:	f000 fb21 	bl	8003662 <__mcmp>
 8003020:	2800      	cmp	r0, #0
 8003022:	f300 808d 	bgt.w	8003140 <_dtoa_r+0xad0>
 8003026:	d103      	bne.n	8003030 <_dtoa_r+0x9c0>
 8003028:	f019 0f01 	tst.w	r9, #1
 800302c:	f040 8088 	bne.w	8003140 <_dtoa_r+0xad0>
 8003030:	4645      	mov	r5, r8
 8003032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003036:	2b30      	cmp	r3, #48	; 0x30
 8003038:	f105 32ff 	add.w	r2, r5, #4294967295
 800303c:	d1af      	bne.n	8002f9e <_dtoa_r+0x92e>
 800303e:	4615      	mov	r5, r2
 8003040:	e7f7      	b.n	8003032 <_dtoa_r+0x9c2>
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	9304      	str	r3, [sp, #16]
 8003046:	2d00      	cmp	r5, #0
 8003048:	dd05      	ble.n	8003056 <_dtoa_r+0x9e6>
 800304a:	4639      	mov	r1, r7
 800304c:	462a      	mov	r2, r5
 800304e:	4620      	mov	r0, r4
 8003050:	f000 fab6 	bl	80035c0 <__lshift>
 8003054:	4607      	mov	r7, r0
 8003056:	f1b8 0f00 	cmp.w	r8, #0
 800305a:	d04c      	beq.n	80030f6 <_dtoa_r+0xa86>
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4620      	mov	r0, r4
 8003060:	f000 f8f5 	bl	800324e <_Balloc>
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	3202      	adds	r2, #2
 8003068:	4605      	mov	r5, r0
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	f107 010c 	add.w	r1, r7, #12
 8003070:	300c      	adds	r0, #12
 8003072:	f000 f8e1 	bl	8003238 <memcpy>
 8003076:	2201      	movs	r2, #1
 8003078:	4629      	mov	r1, r5
 800307a:	4620      	mov	r0, r4
 800307c:	f000 faa0 	bl	80035c0 <__lshift>
 8003080:	9b00      	ldr	r3, [sp, #0]
 8003082:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003086:	9703      	str	r7, [sp, #12]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	4607      	mov	r7, r0
 800308e:	9305      	str	r3, [sp, #20]
 8003090:	4631      	mov	r1, r6
 8003092:	4650      	mov	r0, sl
 8003094:	f7ff fa5e 	bl	8002554 <quorem>
 8003098:	9903      	ldr	r1, [sp, #12]
 800309a:	4605      	mov	r5, r0
 800309c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80030a0:	4650      	mov	r0, sl
 80030a2:	f000 fade 	bl	8003662 <__mcmp>
 80030a6:	463a      	mov	r2, r7
 80030a8:	9000      	str	r0, [sp, #0]
 80030aa:	4631      	mov	r1, r6
 80030ac:	4620      	mov	r0, r4
 80030ae:	f000 faf2 	bl	8003696 <__mdiff>
 80030b2:	68c3      	ldr	r3, [r0, #12]
 80030b4:	4602      	mov	r2, r0
 80030b6:	bb03      	cbnz	r3, 80030fa <_dtoa_r+0xa8a>
 80030b8:	4601      	mov	r1, r0
 80030ba:	9006      	str	r0, [sp, #24]
 80030bc:	4650      	mov	r0, sl
 80030be:	f000 fad0 	bl	8003662 <__mcmp>
 80030c2:	9a06      	ldr	r2, [sp, #24]
 80030c4:	4603      	mov	r3, r0
 80030c6:	4611      	mov	r1, r2
 80030c8:	4620      	mov	r0, r4
 80030ca:	9306      	str	r3, [sp, #24]
 80030cc:	f000 f8f3 	bl	80032b6 <_Bfree>
 80030d0:	9b06      	ldr	r3, [sp, #24]
 80030d2:	b9a3      	cbnz	r3, 80030fe <_dtoa_r+0xa8e>
 80030d4:	9a07      	ldr	r2, [sp, #28]
 80030d6:	b992      	cbnz	r2, 80030fe <_dtoa_r+0xa8e>
 80030d8:	9a05      	ldr	r2, [sp, #20]
 80030da:	b982      	cbnz	r2, 80030fe <_dtoa_r+0xa8e>
 80030dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80030e0:	d029      	beq.n	8003136 <_dtoa_r+0xac6>
 80030e2:	9b00      	ldr	r3, [sp, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dd01      	ble.n	80030ec <_dtoa_r+0xa7c>
 80030e8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80030ec:	f108 0501 	add.w	r5, r8, #1
 80030f0:	f888 9000 	strb.w	r9, [r8]
 80030f4:	e753      	b.n	8002f9e <_dtoa_r+0x92e>
 80030f6:	4638      	mov	r0, r7
 80030f8:	e7c2      	b.n	8003080 <_dtoa_r+0xa10>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e7e3      	b.n	80030c6 <_dtoa_r+0xa56>
 80030fe:	9a00      	ldr	r2, [sp, #0]
 8003100:	2a00      	cmp	r2, #0
 8003102:	db04      	blt.n	800310e <_dtoa_r+0xa9e>
 8003104:	d125      	bne.n	8003152 <_dtoa_r+0xae2>
 8003106:	9a07      	ldr	r2, [sp, #28]
 8003108:	bb1a      	cbnz	r2, 8003152 <_dtoa_r+0xae2>
 800310a:	9a05      	ldr	r2, [sp, #20]
 800310c:	bb0a      	cbnz	r2, 8003152 <_dtoa_r+0xae2>
 800310e:	2b00      	cmp	r3, #0
 8003110:	ddec      	ble.n	80030ec <_dtoa_r+0xa7c>
 8003112:	4651      	mov	r1, sl
 8003114:	2201      	movs	r2, #1
 8003116:	4620      	mov	r0, r4
 8003118:	f000 fa52 	bl	80035c0 <__lshift>
 800311c:	4631      	mov	r1, r6
 800311e:	4682      	mov	sl, r0
 8003120:	f000 fa9f 	bl	8003662 <__mcmp>
 8003124:	2800      	cmp	r0, #0
 8003126:	dc03      	bgt.n	8003130 <_dtoa_r+0xac0>
 8003128:	d1e0      	bne.n	80030ec <_dtoa_r+0xa7c>
 800312a:	f019 0f01 	tst.w	r9, #1
 800312e:	d0dd      	beq.n	80030ec <_dtoa_r+0xa7c>
 8003130:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003134:	d1d8      	bne.n	80030e8 <_dtoa_r+0xa78>
 8003136:	2339      	movs	r3, #57	; 0x39
 8003138:	f888 3000 	strb.w	r3, [r8]
 800313c:	f108 0801 	add.w	r8, r8, #1
 8003140:	4645      	mov	r5, r8
 8003142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003146:	2b39      	cmp	r3, #57	; 0x39
 8003148:	f105 32ff 	add.w	r2, r5, #4294967295
 800314c:	d03b      	beq.n	80031c6 <_dtoa_r+0xb56>
 800314e:	3301      	adds	r3, #1
 8003150:	e040      	b.n	80031d4 <_dtoa_r+0xb64>
 8003152:	2b00      	cmp	r3, #0
 8003154:	f108 0501 	add.w	r5, r8, #1
 8003158:	dd05      	ble.n	8003166 <_dtoa_r+0xaf6>
 800315a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800315e:	d0ea      	beq.n	8003136 <_dtoa_r+0xac6>
 8003160:	f109 0901 	add.w	r9, r9, #1
 8003164:	e7c4      	b.n	80030f0 <_dtoa_r+0xa80>
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	9a04      	ldr	r2, [sp, #16]
 800316a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800316e:	1aeb      	subs	r3, r5, r3
 8003170:	4293      	cmp	r3, r2
 8003172:	46a8      	mov	r8, r5
 8003174:	f43f af4b 	beq.w	800300e <_dtoa_r+0x99e>
 8003178:	4651      	mov	r1, sl
 800317a:	2300      	movs	r3, #0
 800317c:	220a      	movs	r2, #10
 800317e:	4620      	mov	r0, r4
 8003180:	f000 f8b0 	bl	80032e4 <__multadd>
 8003184:	9b03      	ldr	r3, [sp, #12]
 8003186:	9903      	ldr	r1, [sp, #12]
 8003188:	42bb      	cmp	r3, r7
 800318a:	4682      	mov	sl, r0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	f04f 020a 	mov.w	r2, #10
 8003194:	4620      	mov	r0, r4
 8003196:	d104      	bne.n	80031a2 <_dtoa_r+0xb32>
 8003198:	f000 f8a4 	bl	80032e4 <__multadd>
 800319c:	9003      	str	r0, [sp, #12]
 800319e:	4607      	mov	r7, r0
 80031a0:	e776      	b.n	8003090 <_dtoa_r+0xa20>
 80031a2:	f000 f89f 	bl	80032e4 <__multadd>
 80031a6:	2300      	movs	r3, #0
 80031a8:	9003      	str	r0, [sp, #12]
 80031aa:	220a      	movs	r2, #10
 80031ac:	4639      	mov	r1, r7
 80031ae:	4620      	mov	r0, r4
 80031b0:	f000 f898 	bl	80032e4 <__multadd>
 80031b4:	e7f3      	b.n	800319e <_dtoa_r+0xb2e>
 80031b6:	4651      	mov	r1, sl
 80031b8:	2300      	movs	r3, #0
 80031ba:	220a      	movs	r2, #10
 80031bc:	4620      	mov	r0, r4
 80031be:	f000 f891 	bl	80032e4 <__multadd>
 80031c2:	4682      	mov	sl, r0
 80031c4:	e70d      	b.n	8002fe2 <_dtoa_r+0x972>
 80031c6:	9b02      	ldr	r3, [sp, #8]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d105      	bne.n	80031d8 <_dtoa_r+0xb68>
 80031cc:	9a02      	ldr	r2, [sp, #8]
 80031ce:	f10b 0b01 	add.w	fp, fp, #1
 80031d2:	2331      	movs	r3, #49	; 0x31
 80031d4:	7013      	strb	r3, [r2, #0]
 80031d6:	e6e2      	b.n	8002f9e <_dtoa_r+0x92e>
 80031d8:	4615      	mov	r5, r2
 80031da:	e7b2      	b.n	8003142 <_dtoa_r+0xad2>
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <_dtoa_r+0xb94>)
 80031de:	f7ff baae 	b.w	800273e <_dtoa_r+0xce>
 80031e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f aa88 	bne.w	80026fa <_dtoa_r+0x8a>
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <_dtoa_r+0xb98>)
 80031ec:	f7ff baa7 	b.w	800273e <_dtoa_r+0xce>
 80031f0:	9b04      	ldr	r3, [sp, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f73f aef4 	bgt.w	8002fe0 <_dtoa_r+0x970>
 80031f8:	9b07      	ldr	r3, [sp, #28]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	f77f aef0 	ble.w	8002fe0 <_dtoa_r+0x970>
 8003200:	e6b8      	b.n	8002f74 <_dtoa_r+0x904>
 8003202:	bf00      	nop
 8003204:	08003970 	.word	0x08003970
 8003208:	08003972 	.word	0x08003972

0800320c <_localeconv_r>:
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <_localeconv_r+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a18      	ldr	r0, [r3, #32]
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <_localeconv_r+0x18>)
 8003214:	2800      	cmp	r0, #0
 8003216:	bf08      	it	eq
 8003218:	4618      	moveq	r0, r3
 800321a:	30f0      	adds	r0, #240	; 0xf0
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	2000000c 	.word	0x2000000c
 8003224:	20000070 	.word	0x20000070

08003228 <malloc>:
 8003228:	4b02      	ldr	r3, [pc, #8]	; (8003234 <malloc+0xc>)
 800322a:	4601      	mov	r1, r0
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	f000 baed 	b.w	800380c <_malloc_r>
 8003232:	bf00      	nop
 8003234:	2000000c 	.word	0x2000000c

08003238 <memcpy>:
 8003238:	b510      	push	{r4, lr}
 800323a:	1e43      	subs	r3, r0, #1
 800323c:	440a      	add	r2, r1
 800323e:	4291      	cmp	r1, r2
 8003240:	d100      	bne.n	8003244 <memcpy+0xc>
 8003242:	bd10      	pop	{r4, pc}
 8003244:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800324c:	e7f7      	b.n	800323e <memcpy+0x6>

0800324e <_Balloc>:
 800324e:	b570      	push	{r4, r5, r6, lr}
 8003250:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003252:	4604      	mov	r4, r0
 8003254:	460e      	mov	r6, r1
 8003256:	b93d      	cbnz	r5, 8003268 <_Balloc+0x1a>
 8003258:	2010      	movs	r0, #16
 800325a:	f7ff ffe5 	bl	8003228 <malloc>
 800325e:	6260      	str	r0, [r4, #36]	; 0x24
 8003260:	6045      	str	r5, [r0, #4]
 8003262:	6085      	str	r5, [r0, #8]
 8003264:	6005      	str	r5, [r0, #0]
 8003266:	60c5      	str	r5, [r0, #12]
 8003268:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800326a:	68eb      	ldr	r3, [r5, #12]
 800326c:	b183      	cbz	r3, 8003290 <_Balloc+0x42>
 800326e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003276:	b9b8      	cbnz	r0, 80032a8 <_Balloc+0x5a>
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f506 	lsl.w	r5, r1, r6
 800327e:	1d6a      	adds	r2, r5, #5
 8003280:	0092      	lsls	r2, r2, #2
 8003282:	4620      	mov	r0, r4
 8003284:	f000 fab4 	bl	80037f0 <_calloc_r>
 8003288:	b160      	cbz	r0, 80032a4 <_Balloc+0x56>
 800328a:	6046      	str	r6, [r0, #4]
 800328c:	6085      	str	r5, [r0, #8]
 800328e:	e00e      	b.n	80032ae <_Balloc+0x60>
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	2104      	movs	r1, #4
 8003294:	4620      	mov	r0, r4
 8003296:	f000 faab 	bl	80037f0 <_calloc_r>
 800329a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800329c:	60e8      	str	r0, [r5, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e4      	bne.n	800326e <_Balloc+0x20>
 80032a4:	2000      	movs	r0, #0
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	6802      	ldr	r2, [r0, #0]
 80032aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80032ae:	2300      	movs	r3, #0
 80032b0:	6103      	str	r3, [r0, #16]
 80032b2:	60c3      	str	r3, [r0, #12]
 80032b4:	bd70      	pop	{r4, r5, r6, pc}

080032b6 <_Bfree>:
 80032b6:	b570      	push	{r4, r5, r6, lr}
 80032b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80032ba:	4606      	mov	r6, r0
 80032bc:	460d      	mov	r5, r1
 80032be:	b93c      	cbnz	r4, 80032d0 <_Bfree+0x1a>
 80032c0:	2010      	movs	r0, #16
 80032c2:	f7ff ffb1 	bl	8003228 <malloc>
 80032c6:	6270      	str	r0, [r6, #36]	; 0x24
 80032c8:	6044      	str	r4, [r0, #4]
 80032ca:	6084      	str	r4, [r0, #8]
 80032cc:	6004      	str	r4, [r0, #0]
 80032ce:	60c4      	str	r4, [r0, #12]
 80032d0:	b13d      	cbz	r5, 80032e2 <_Bfree+0x2c>
 80032d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80032d4:	686a      	ldr	r2, [r5, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032dc:	6029      	str	r1, [r5, #0]
 80032de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80032e2:	bd70      	pop	{r4, r5, r6, pc}

080032e4 <__multadd>:
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e8:	690d      	ldr	r5, [r1, #16]
 80032ea:	461f      	mov	r7, r3
 80032ec:	4606      	mov	r6, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	f101 0e14 	add.w	lr, r1, #20
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8de 0000 	ldr.w	r0, [lr]
 80032fa:	b281      	uxth	r1, r0
 80032fc:	fb02 7101 	mla	r1, r2, r1, r7
 8003300:	0c0f      	lsrs	r7, r1, #16
 8003302:	0c00      	lsrs	r0, r0, #16
 8003304:	fb02 7000 	mla	r0, r2, r0, r7
 8003308:	b289      	uxth	r1, r1
 800330a:	3301      	adds	r3, #1
 800330c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003310:	429d      	cmp	r5, r3
 8003312:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003316:	f84e 1b04 	str.w	r1, [lr], #4
 800331a:	dcec      	bgt.n	80032f6 <__multadd+0x12>
 800331c:	b1d7      	cbz	r7, 8003354 <__multadd+0x70>
 800331e:	68a3      	ldr	r3, [r4, #8]
 8003320:	429d      	cmp	r5, r3
 8003322:	db12      	blt.n	800334a <__multadd+0x66>
 8003324:	6861      	ldr	r1, [r4, #4]
 8003326:	4630      	mov	r0, r6
 8003328:	3101      	adds	r1, #1
 800332a:	f7ff ff90 	bl	800324e <_Balloc>
 800332e:	6922      	ldr	r2, [r4, #16]
 8003330:	3202      	adds	r2, #2
 8003332:	f104 010c 	add.w	r1, r4, #12
 8003336:	4680      	mov	r8, r0
 8003338:	0092      	lsls	r2, r2, #2
 800333a:	300c      	adds	r0, #12
 800333c:	f7ff ff7c 	bl	8003238 <memcpy>
 8003340:	4621      	mov	r1, r4
 8003342:	4630      	mov	r0, r6
 8003344:	f7ff ffb7 	bl	80032b6 <_Bfree>
 8003348:	4644      	mov	r4, r8
 800334a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800334e:	3501      	adds	r5, #1
 8003350:	615f      	str	r7, [r3, #20]
 8003352:	6125      	str	r5, [r4, #16]
 8003354:	4620      	mov	r0, r4
 8003356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800335a <__hi0bits>:
 800335a:	0c02      	lsrs	r2, r0, #16
 800335c:	0412      	lsls	r2, r2, #16
 800335e:	4603      	mov	r3, r0
 8003360:	b9b2      	cbnz	r2, 8003390 <__hi0bits+0x36>
 8003362:	0403      	lsls	r3, r0, #16
 8003364:	2010      	movs	r0, #16
 8003366:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800336a:	bf04      	itt	eq
 800336c:	021b      	lsleq	r3, r3, #8
 800336e:	3008      	addeq	r0, #8
 8003370:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003374:	bf04      	itt	eq
 8003376:	011b      	lsleq	r3, r3, #4
 8003378:	3004      	addeq	r0, #4
 800337a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800337e:	bf04      	itt	eq
 8003380:	009b      	lsleq	r3, r3, #2
 8003382:	3002      	addeq	r0, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	db06      	blt.n	8003396 <__hi0bits+0x3c>
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	d503      	bpl.n	8003394 <__hi0bits+0x3a>
 800338c:	3001      	adds	r0, #1
 800338e:	4770      	bx	lr
 8003390:	2000      	movs	r0, #0
 8003392:	e7e8      	b.n	8003366 <__hi0bits+0xc>
 8003394:	2020      	movs	r0, #32
 8003396:	4770      	bx	lr

08003398 <__lo0bits>:
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	f013 0207 	ands.w	r2, r3, #7
 800339e:	4601      	mov	r1, r0
 80033a0:	d00b      	beq.n	80033ba <__lo0bits+0x22>
 80033a2:	07da      	lsls	r2, r3, #31
 80033a4:	d423      	bmi.n	80033ee <__lo0bits+0x56>
 80033a6:	0798      	lsls	r0, r3, #30
 80033a8:	bf49      	itett	mi
 80033aa:	085b      	lsrmi	r3, r3, #1
 80033ac:	089b      	lsrpl	r3, r3, #2
 80033ae:	2001      	movmi	r0, #1
 80033b0:	600b      	strmi	r3, [r1, #0]
 80033b2:	bf5c      	itt	pl
 80033b4:	600b      	strpl	r3, [r1, #0]
 80033b6:	2002      	movpl	r0, #2
 80033b8:	4770      	bx	lr
 80033ba:	b298      	uxth	r0, r3
 80033bc:	b9a8      	cbnz	r0, 80033ea <__lo0bits+0x52>
 80033be:	0c1b      	lsrs	r3, r3, #16
 80033c0:	2010      	movs	r0, #16
 80033c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80033c6:	bf04      	itt	eq
 80033c8:	0a1b      	lsreq	r3, r3, #8
 80033ca:	3008      	addeq	r0, #8
 80033cc:	071a      	lsls	r2, r3, #28
 80033ce:	bf04      	itt	eq
 80033d0:	091b      	lsreq	r3, r3, #4
 80033d2:	3004      	addeq	r0, #4
 80033d4:	079a      	lsls	r2, r3, #30
 80033d6:	bf04      	itt	eq
 80033d8:	089b      	lsreq	r3, r3, #2
 80033da:	3002      	addeq	r0, #2
 80033dc:	07da      	lsls	r2, r3, #31
 80033de:	d402      	bmi.n	80033e6 <__lo0bits+0x4e>
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	d006      	beq.n	80033f2 <__lo0bits+0x5a>
 80033e4:	3001      	adds	r0, #1
 80033e6:	600b      	str	r3, [r1, #0]
 80033e8:	4770      	bx	lr
 80033ea:	4610      	mov	r0, r2
 80033ec:	e7e9      	b.n	80033c2 <__lo0bits+0x2a>
 80033ee:	2000      	movs	r0, #0
 80033f0:	4770      	bx	lr
 80033f2:	2020      	movs	r0, #32
 80033f4:	4770      	bx	lr

080033f6 <__i2b>:
 80033f6:	b510      	push	{r4, lr}
 80033f8:	460c      	mov	r4, r1
 80033fa:	2101      	movs	r1, #1
 80033fc:	f7ff ff27 	bl	800324e <_Balloc>
 8003400:	2201      	movs	r2, #1
 8003402:	6144      	str	r4, [r0, #20]
 8003404:	6102      	str	r2, [r0, #16]
 8003406:	bd10      	pop	{r4, pc}

08003408 <__multiply>:
 8003408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340c:	4614      	mov	r4, r2
 800340e:	690a      	ldr	r2, [r1, #16]
 8003410:	6923      	ldr	r3, [r4, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	bfb8      	it	lt
 8003416:	460b      	movlt	r3, r1
 8003418:	4689      	mov	r9, r1
 800341a:	bfbc      	itt	lt
 800341c:	46a1      	movlt	r9, r4
 800341e:	461c      	movlt	r4, r3
 8003420:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003424:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003428:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800342c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003430:	eb07 060a 	add.w	r6, r7, sl
 8003434:	429e      	cmp	r6, r3
 8003436:	bfc8      	it	gt
 8003438:	3101      	addgt	r1, #1
 800343a:	f7ff ff08 	bl	800324e <_Balloc>
 800343e:	f100 0514 	add.w	r5, r0, #20
 8003442:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003446:	462b      	mov	r3, r5
 8003448:	2200      	movs	r2, #0
 800344a:	4543      	cmp	r3, r8
 800344c:	d316      	bcc.n	800347c <__multiply+0x74>
 800344e:	f104 0214 	add.w	r2, r4, #20
 8003452:	f109 0114 	add.w	r1, r9, #20
 8003456:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800345a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	9c01      	ldr	r4, [sp, #4]
 8003462:	4294      	cmp	r4, r2
 8003464:	4613      	mov	r3, r2
 8003466:	d80c      	bhi.n	8003482 <__multiply+0x7a>
 8003468:	2e00      	cmp	r6, #0
 800346a:	dd03      	ble.n	8003474 <__multiply+0x6c>
 800346c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003470:	2b00      	cmp	r3, #0
 8003472:	d054      	beq.n	800351e <__multiply+0x116>
 8003474:	6106      	str	r6, [r0, #16]
 8003476:	b003      	add	sp, #12
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	f843 2b04 	str.w	r2, [r3], #4
 8003480:	e7e3      	b.n	800344a <__multiply+0x42>
 8003482:	f8b3 a000 	ldrh.w	sl, [r3]
 8003486:	3204      	adds	r2, #4
 8003488:	f1ba 0f00 	cmp.w	sl, #0
 800348c:	d020      	beq.n	80034d0 <__multiply+0xc8>
 800348e:	46ae      	mov	lr, r5
 8003490:	4689      	mov	r9, r1
 8003492:	f04f 0c00 	mov.w	ip, #0
 8003496:	f859 4b04 	ldr.w	r4, [r9], #4
 800349a:	f8be b000 	ldrh.w	fp, [lr]
 800349e:	b2a3      	uxth	r3, r4
 80034a0:	fb0a b303 	mla	r3, sl, r3, fp
 80034a4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80034a8:	f8de 4000 	ldr.w	r4, [lr]
 80034ac:	4463      	add	r3, ip
 80034ae:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80034b2:	fb0a c40b 	mla	r4, sl, fp, ip
 80034b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80034c0:	454f      	cmp	r7, r9
 80034c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80034c6:	f84e 3b04 	str.w	r3, [lr], #4
 80034ca:	d8e4      	bhi.n	8003496 <__multiply+0x8e>
 80034cc:	f8ce c000 	str.w	ip, [lr]
 80034d0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80034d4:	f1b9 0f00 	cmp.w	r9, #0
 80034d8:	d01f      	beq.n	800351a <__multiply+0x112>
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	46ae      	mov	lr, r5
 80034de:	468c      	mov	ip, r1
 80034e0:	f04f 0a00 	mov.w	sl, #0
 80034e4:	f8bc 4000 	ldrh.w	r4, [ip]
 80034e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80034ec:	fb09 b404 	mla	r4, r9, r4, fp
 80034f0:	44a2      	add	sl, r4
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80034f8:	f84e 3b04 	str.w	r3, [lr], #4
 80034fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003500:	f8be 4000 	ldrh.w	r4, [lr]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	fb09 4303 	mla	r3, r9, r3, r4
 800350a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800350e:	4567      	cmp	r7, ip
 8003510:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003514:	d8e6      	bhi.n	80034e4 <__multiply+0xdc>
 8003516:	f8ce 3000 	str.w	r3, [lr]
 800351a:	3504      	adds	r5, #4
 800351c:	e7a0      	b.n	8003460 <__multiply+0x58>
 800351e:	3e01      	subs	r6, #1
 8003520:	e7a2      	b.n	8003468 <__multiply+0x60>
	...

08003524 <__pow5mult>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	4615      	mov	r5, r2
 800352a:	f012 0203 	ands.w	r2, r2, #3
 800352e:	4606      	mov	r6, r0
 8003530:	460f      	mov	r7, r1
 8003532:	d007      	beq.n	8003544 <__pow5mult+0x20>
 8003534:	3a01      	subs	r2, #1
 8003536:	4c21      	ldr	r4, [pc, #132]	; (80035bc <__pow5mult+0x98>)
 8003538:	2300      	movs	r3, #0
 800353a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800353e:	f7ff fed1 	bl	80032e4 <__multadd>
 8003542:	4607      	mov	r7, r0
 8003544:	10ad      	asrs	r5, r5, #2
 8003546:	d035      	beq.n	80035b4 <__pow5mult+0x90>
 8003548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800354a:	b93c      	cbnz	r4, 800355c <__pow5mult+0x38>
 800354c:	2010      	movs	r0, #16
 800354e:	f7ff fe6b 	bl	8003228 <malloc>
 8003552:	6270      	str	r0, [r6, #36]	; 0x24
 8003554:	6044      	str	r4, [r0, #4]
 8003556:	6084      	str	r4, [r0, #8]
 8003558:	6004      	str	r4, [r0, #0]
 800355a:	60c4      	str	r4, [r0, #12]
 800355c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003564:	b94c      	cbnz	r4, 800357a <__pow5mult+0x56>
 8003566:	f240 2171 	movw	r1, #625	; 0x271
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff ff43 	bl	80033f6 <__i2b>
 8003570:	2300      	movs	r3, #0
 8003572:	f8c8 0008 	str.w	r0, [r8, #8]
 8003576:	4604      	mov	r4, r0
 8003578:	6003      	str	r3, [r0, #0]
 800357a:	f04f 0800 	mov.w	r8, #0
 800357e:	07eb      	lsls	r3, r5, #31
 8003580:	d50a      	bpl.n	8003598 <__pow5mult+0x74>
 8003582:	4639      	mov	r1, r7
 8003584:	4622      	mov	r2, r4
 8003586:	4630      	mov	r0, r6
 8003588:	f7ff ff3e 	bl	8003408 <__multiply>
 800358c:	4639      	mov	r1, r7
 800358e:	4681      	mov	r9, r0
 8003590:	4630      	mov	r0, r6
 8003592:	f7ff fe90 	bl	80032b6 <_Bfree>
 8003596:	464f      	mov	r7, r9
 8003598:	106d      	asrs	r5, r5, #1
 800359a:	d00b      	beq.n	80035b4 <__pow5mult+0x90>
 800359c:	6820      	ldr	r0, [r4, #0]
 800359e:	b938      	cbnz	r0, 80035b0 <__pow5mult+0x8c>
 80035a0:	4622      	mov	r2, r4
 80035a2:	4621      	mov	r1, r4
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff ff2f 	bl	8003408 <__multiply>
 80035aa:	6020      	str	r0, [r4, #0]
 80035ac:	f8c0 8000 	str.w	r8, [r0]
 80035b0:	4604      	mov	r4, r0
 80035b2:	e7e4      	b.n	800357e <__pow5mult+0x5a>
 80035b4:	4638      	mov	r0, r7
 80035b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ba:	bf00      	nop
 80035bc:	08003a70 	.word	0x08003a70

080035c0 <__lshift>:
 80035c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	460c      	mov	r4, r1
 80035c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	6849      	ldr	r1, [r1, #4]
 80035ce:	eb0a 0903 	add.w	r9, sl, r3
 80035d2:	68a3      	ldr	r3, [r4, #8]
 80035d4:	4607      	mov	r7, r0
 80035d6:	4616      	mov	r6, r2
 80035d8:	f109 0501 	add.w	r5, r9, #1
 80035dc:	42ab      	cmp	r3, r5
 80035de:	db31      	blt.n	8003644 <__lshift+0x84>
 80035e0:	4638      	mov	r0, r7
 80035e2:	f7ff fe34 	bl	800324e <_Balloc>
 80035e6:	2200      	movs	r2, #0
 80035e8:	4680      	mov	r8, r0
 80035ea:	f100 0314 	add.w	r3, r0, #20
 80035ee:	4611      	mov	r1, r2
 80035f0:	4552      	cmp	r2, sl
 80035f2:	db2a      	blt.n	800364a <__lshift+0x8a>
 80035f4:	6920      	ldr	r0, [r4, #16]
 80035f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80035fa:	f104 0114 	add.w	r1, r4, #20
 80035fe:	f016 021f 	ands.w	r2, r6, #31
 8003602:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003606:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800360a:	d022      	beq.n	8003652 <__lshift+0x92>
 800360c:	f1c2 0c20 	rsb	ip, r2, #32
 8003610:	2000      	movs	r0, #0
 8003612:	680e      	ldr	r6, [r1, #0]
 8003614:	4096      	lsls	r6, r2
 8003616:	4330      	orrs	r0, r6
 8003618:	f843 0b04 	str.w	r0, [r3], #4
 800361c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003620:	458e      	cmp	lr, r1
 8003622:	fa20 f00c 	lsr.w	r0, r0, ip
 8003626:	d8f4      	bhi.n	8003612 <__lshift+0x52>
 8003628:	6018      	str	r0, [r3, #0]
 800362a:	b108      	cbz	r0, 8003630 <__lshift+0x70>
 800362c:	f109 0502 	add.w	r5, r9, #2
 8003630:	3d01      	subs	r5, #1
 8003632:	4638      	mov	r0, r7
 8003634:	f8c8 5010 	str.w	r5, [r8, #16]
 8003638:	4621      	mov	r1, r4
 800363a:	f7ff fe3c 	bl	80032b6 <_Bfree>
 800363e:	4640      	mov	r0, r8
 8003640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003644:	3101      	adds	r1, #1
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	e7c8      	b.n	80035dc <__lshift+0x1c>
 800364a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800364e:	3201      	adds	r2, #1
 8003650:	e7ce      	b.n	80035f0 <__lshift+0x30>
 8003652:	3b04      	subs	r3, #4
 8003654:	f851 2b04 	ldr.w	r2, [r1], #4
 8003658:	f843 2f04 	str.w	r2, [r3, #4]!
 800365c:	458e      	cmp	lr, r1
 800365e:	d8f9      	bhi.n	8003654 <__lshift+0x94>
 8003660:	e7e6      	b.n	8003630 <__lshift+0x70>

08003662 <__mcmp>:
 8003662:	6903      	ldr	r3, [r0, #16]
 8003664:	690a      	ldr	r2, [r1, #16]
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	b530      	push	{r4, r5, lr}
 800366a:	d10c      	bne.n	8003686 <__mcmp+0x24>
 800366c:	0092      	lsls	r2, r2, #2
 800366e:	3014      	adds	r0, #20
 8003670:	3114      	adds	r1, #20
 8003672:	1884      	adds	r4, r0, r2
 8003674:	4411      	add	r1, r2
 8003676:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800367a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800367e:	4295      	cmp	r5, r2
 8003680:	d003      	beq.n	800368a <__mcmp+0x28>
 8003682:	d305      	bcc.n	8003690 <__mcmp+0x2e>
 8003684:	2301      	movs	r3, #1
 8003686:	4618      	mov	r0, r3
 8003688:	bd30      	pop	{r4, r5, pc}
 800368a:	42a0      	cmp	r0, r4
 800368c:	d3f3      	bcc.n	8003676 <__mcmp+0x14>
 800368e:	e7fa      	b.n	8003686 <__mcmp+0x24>
 8003690:	f04f 33ff 	mov.w	r3, #4294967295
 8003694:	e7f7      	b.n	8003686 <__mcmp+0x24>

08003696 <__mdiff>:
 8003696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800369a:	460d      	mov	r5, r1
 800369c:	4607      	mov	r7, r0
 800369e:	4611      	mov	r1, r2
 80036a0:	4628      	mov	r0, r5
 80036a2:	4614      	mov	r4, r2
 80036a4:	f7ff ffdd 	bl	8003662 <__mcmp>
 80036a8:	1e06      	subs	r6, r0, #0
 80036aa:	d108      	bne.n	80036be <__mdiff+0x28>
 80036ac:	4631      	mov	r1, r6
 80036ae:	4638      	mov	r0, r7
 80036b0:	f7ff fdcd 	bl	800324e <_Balloc>
 80036b4:	2301      	movs	r3, #1
 80036b6:	6103      	str	r3, [r0, #16]
 80036b8:	6146      	str	r6, [r0, #20]
 80036ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036be:	bfa4      	itt	ge
 80036c0:	4623      	movge	r3, r4
 80036c2:	462c      	movge	r4, r5
 80036c4:	4638      	mov	r0, r7
 80036c6:	6861      	ldr	r1, [r4, #4]
 80036c8:	bfa6      	itte	ge
 80036ca:	461d      	movge	r5, r3
 80036cc:	2600      	movge	r6, #0
 80036ce:	2601      	movlt	r6, #1
 80036d0:	f7ff fdbd 	bl	800324e <_Balloc>
 80036d4:	692b      	ldr	r3, [r5, #16]
 80036d6:	60c6      	str	r6, [r0, #12]
 80036d8:	6926      	ldr	r6, [r4, #16]
 80036da:	f105 0914 	add.w	r9, r5, #20
 80036de:	f104 0214 	add.w	r2, r4, #20
 80036e2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80036e6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80036ea:	f100 0514 	add.w	r5, r0, #20
 80036ee:	f04f 0c00 	mov.w	ip, #0
 80036f2:	f852 ab04 	ldr.w	sl, [r2], #4
 80036f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80036fa:	fa1c f18a 	uxtah	r1, ip, sl
 80036fe:	b2a3      	uxth	r3, r4
 8003700:	1ac9      	subs	r1, r1, r3
 8003702:	0c23      	lsrs	r3, r4, #16
 8003704:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003708:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800370c:	b289      	uxth	r1, r1
 800370e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003712:	45c8      	cmp	r8, r9
 8003714:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003718:	4696      	mov	lr, r2
 800371a:	f845 3b04 	str.w	r3, [r5], #4
 800371e:	d8e8      	bhi.n	80036f2 <__mdiff+0x5c>
 8003720:	45be      	cmp	lr, r7
 8003722:	d305      	bcc.n	8003730 <__mdiff+0x9a>
 8003724:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003728:	b18b      	cbz	r3, 800374e <__mdiff+0xb8>
 800372a:	6106      	str	r6, [r0, #16]
 800372c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003730:	f85e 1b04 	ldr.w	r1, [lr], #4
 8003734:	fa1c f381 	uxtah	r3, ip, r1
 8003738:	141a      	asrs	r2, r3, #16
 800373a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003744:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003748:	f845 3b04 	str.w	r3, [r5], #4
 800374c:	e7e8      	b.n	8003720 <__mdiff+0x8a>
 800374e:	3e01      	subs	r6, #1
 8003750:	e7e8      	b.n	8003724 <__mdiff+0x8e>

08003752 <__d2b>:
 8003752:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003756:	460e      	mov	r6, r1
 8003758:	2101      	movs	r1, #1
 800375a:	ec59 8b10 	vmov	r8, r9, d0
 800375e:	4615      	mov	r5, r2
 8003760:	f7ff fd75 	bl	800324e <_Balloc>
 8003764:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003768:	4607      	mov	r7, r0
 800376a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800376e:	bb34      	cbnz	r4, 80037be <__d2b+0x6c>
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	f1b8 0f00 	cmp.w	r8, #0
 8003776:	d027      	beq.n	80037c8 <__d2b+0x76>
 8003778:	a802      	add	r0, sp, #8
 800377a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800377e:	f7ff fe0b 	bl	8003398 <__lo0bits>
 8003782:	9900      	ldr	r1, [sp, #0]
 8003784:	b1f0      	cbz	r0, 80037c4 <__d2b+0x72>
 8003786:	9a01      	ldr	r2, [sp, #4]
 8003788:	f1c0 0320 	rsb	r3, r0, #32
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	430b      	orrs	r3, r1
 8003792:	40c2      	lsrs	r2, r0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	9201      	str	r2, [sp, #4]
 8003798:	9b01      	ldr	r3, [sp, #4]
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2102      	movne	r1, #2
 80037a2:	2101      	moveq	r1, #1
 80037a4:	6139      	str	r1, [r7, #16]
 80037a6:	b1c4      	cbz	r4, 80037da <__d2b+0x88>
 80037a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80037ac:	4404      	add	r4, r0
 80037ae:	6034      	str	r4, [r6, #0]
 80037b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80037b4:	6028      	str	r0, [r5, #0]
 80037b6:	4638      	mov	r0, r7
 80037b8:	b003      	add	sp, #12
 80037ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037c2:	e7d5      	b.n	8003770 <__d2b+0x1e>
 80037c4:	6179      	str	r1, [r7, #20]
 80037c6:	e7e7      	b.n	8003798 <__d2b+0x46>
 80037c8:	a801      	add	r0, sp, #4
 80037ca:	f7ff fde5 	bl	8003398 <__lo0bits>
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	2101      	movs	r1, #1
 80037d4:	6139      	str	r1, [r7, #16]
 80037d6:	3020      	adds	r0, #32
 80037d8:	e7e5      	b.n	80037a6 <__d2b+0x54>
 80037da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80037de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80037e2:	6030      	str	r0, [r6, #0]
 80037e4:	6918      	ldr	r0, [r3, #16]
 80037e6:	f7ff fdb8 	bl	800335a <__hi0bits>
 80037ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80037ee:	e7e1      	b.n	80037b4 <__d2b+0x62>

080037f0 <_calloc_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	fb02 f401 	mul.w	r4, r2, r1
 80037f6:	4621      	mov	r1, r4
 80037f8:	f000 f808 	bl	800380c <_malloc_r>
 80037fc:	4605      	mov	r5, r0
 80037fe:	b118      	cbz	r0, 8003808 <_calloc_r+0x18>
 8003800:	4622      	mov	r2, r4
 8003802:	2100      	movs	r1, #0
 8003804:	f7fe fb52 	bl	8001eac <memset>
 8003808:	4628      	mov	r0, r5
 800380a:	bd38      	pop	{r3, r4, r5, pc}

0800380c <_malloc_r>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	1ccd      	adds	r5, r1, #3
 8003810:	f025 0503 	bic.w	r5, r5, #3
 8003814:	3508      	adds	r5, #8
 8003816:	2d0c      	cmp	r5, #12
 8003818:	bf38      	it	cc
 800381a:	250c      	movcc	r5, #12
 800381c:	2d00      	cmp	r5, #0
 800381e:	4606      	mov	r6, r0
 8003820:	db01      	blt.n	8003826 <_malloc_r+0x1a>
 8003822:	42a9      	cmp	r1, r5
 8003824:	d903      	bls.n	800382e <_malloc_r+0x22>
 8003826:	230c      	movs	r3, #12
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	2000      	movs	r0, #0
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	f000 f86d 	bl	800390c <__malloc_lock>
 8003832:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <_malloc_r+0xb4>)
 8003834:	6814      	ldr	r4, [r2, #0]
 8003836:	4621      	mov	r1, r4
 8003838:	b991      	cbnz	r1, 8003860 <_malloc_r+0x54>
 800383a:	4c22      	ldr	r4, [pc, #136]	; (80038c4 <_malloc_r+0xb8>)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	b91b      	cbnz	r3, 8003848 <_malloc_r+0x3c>
 8003840:	4630      	mov	r0, r6
 8003842:	f000 f841 	bl	80038c8 <_sbrk_r>
 8003846:	6020      	str	r0, [r4, #0]
 8003848:	4629      	mov	r1, r5
 800384a:	4630      	mov	r0, r6
 800384c:	f000 f83c 	bl	80038c8 <_sbrk_r>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d126      	bne.n	80038a2 <_malloc_r+0x96>
 8003854:	230c      	movs	r3, #12
 8003856:	6033      	str	r3, [r6, #0]
 8003858:	4630      	mov	r0, r6
 800385a:	f000 f858 	bl	800390e <__malloc_unlock>
 800385e:	e7e4      	b.n	800382a <_malloc_r+0x1e>
 8003860:	680b      	ldr	r3, [r1, #0]
 8003862:	1b5b      	subs	r3, r3, r5
 8003864:	d41a      	bmi.n	800389c <_malloc_r+0x90>
 8003866:	2b0b      	cmp	r3, #11
 8003868:	d90f      	bls.n	800388a <_malloc_r+0x7e>
 800386a:	600b      	str	r3, [r1, #0]
 800386c:	50cd      	str	r5, [r1, r3]
 800386e:	18cc      	adds	r4, r1, r3
 8003870:	4630      	mov	r0, r6
 8003872:	f000 f84c 	bl	800390e <__malloc_unlock>
 8003876:	f104 000b 	add.w	r0, r4, #11
 800387a:	1d23      	adds	r3, r4, #4
 800387c:	f020 0007 	bic.w	r0, r0, #7
 8003880:	1ac3      	subs	r3, r0, r3
 8003882:	d01b      	beq.n	80038bc <_malloc_r+0xb0>
 8003884:	425a      	negs	r2, r3
 8003886:	50e2      	str	r2, [r4, r3]
 8003888:	bd70      	pop	{r4, r5, r6, pc}
 800388a:	428c      	cmp	r4, r1
 800388c:	bf0d      	iteet	eq
 800388e:	6863      	ldreq	r3, [r4, #4]
 8003890:	684b      	ldrne	r3, [r1, #4]
 8003892:	6063      	strne	r3, [r4, #4]
 8003894:	6013      	streq	r3, [r2, #0]
 8003896:	bf18      	it	ne
 8003898:	460c      	movne	r4, r1
 800389a:	e7e9      	b.n	8003870 <_malloc_r+0x64>
 800389c:	460c      	mov	r4, r1
 800389e:	6849      	ldr	r1, [r1, #4]
 80038a0:	e7ca      	b.n	8003838 <_malloc_r+0x2c>
 80038a2:	1cc4      	adds	r4, r0, #3
 80038a4:	f024 0403 	bic.w	r4, r4, #3
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d005      	beq.n	80038b8 <_malloc_r+0xac>
 80038ac:	1a21      	subs	r1, r4, r0
 80038ae:	4630      	mov	r0, r6
 80038b0:	f000 f80a 	bl	80038c8 <_sbrk_r>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d0cd      	beq.n	8003854 <_malloc_r+0x48>
 80038b8:	6025      	str	r5, [r4, #0]
 80038ba:	e7d9      	b.n	8003870 <_malloc_r+0x64>
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	bf00      	nop
 80038c0:	200001fc 	.word	0x200001fc
 80038c4:	20000200 	.word	0x20000200

080038c8 <_sbrk_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4c06      	ldr	r4, [pc, #24]	; (80038e4 <_sbrk_r+0x1c>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	4605      	mov	r5, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	f7fd fbf2 	bl	80010bc <_sbrk>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_sbrk_r+0x1a>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_sbrk_r+0x1a>
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	2000024c 	.word	0x2000024c

080038e8 <__ascii_mbtowc>:
 80038e8:	b082      	sub	sp, #8
 80038ea:	b901      	cbnz	r1, 80038ee <__ascii_mbtowc+0x6>
 80038ec:	a901      	add	r1, sp, #4
 80038ee:	b142      	cbz	r2, 8003902 <__ascii_mbtowc+0x1a>
 80038f0:	b14b      	cbz	r3, 8003906 <__ascii_mbtowc+0x1e>
 80038f2:	7813      	ldrb	r3, [r2, #0]
 80038f4:	600b      	str	r3, [r1, #0]
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	1c10      	adds	r0, r2, #0
 80038fa:	bf18      	it	ne
 80038fc:	2001      	movne	r0, #1
 80038fe:	b002      	add	sp, #8
 8003900:	4770      	bx	lr
 8003902:	4610      	mov	r0, r2
 8003904:	e7fb      	b.n	80038fe <__ascii_mbtowc+0x16>
 8003906:	f06f 0001 	mvn.w	r0, #1
 800390a:	e7f8      	b.n	80038fe <__ascii_mbtowc+0x16>

0800390c <__malloc_lock>:
 800390c:	4770      	bx	lr

0800390e <__malloc_unlock>:
 800390e:	4770      	bx	lr

08003910 <__ascii_wctomb>:
 8003910:	b149      	cbz	r1, 8003926 <__ascii_wctomb+0x16>
 8003912:	2aff      	cmp	r2, #255	; 0xff
 8003914:	bf85      	ittet	hi
 8003916:	238a      	movhi	r3, #138	; 0x8a
 8003918:	6003      	strhi	r3, [r0, #0]
 800391a:	700a      	strbls	r2, [r1, #0]
 800391c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003920:	bf98      	it	ls
 8003922:	2001      	movls	r0, #1
 8003924:	4770      	bx	lr
 8003926:	4608      	mov	r0, r1
 8003928:	4770      	bx	lr
	...

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
